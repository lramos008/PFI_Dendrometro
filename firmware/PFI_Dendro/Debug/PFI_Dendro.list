
PFI_Dendro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002620  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  0800272c  0800272c  0000372c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002760  08002760  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002760  08002760  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002760  08002760  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002760  08002760  00003760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002764  08002764  00003764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002768  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08002774  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002774  00004080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006517  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001448  00000000  00000000  0000a54c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000708  00000000  00000000  0000b998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000055d  00000000  00000000  0000c0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016035  00000000  00000000  0000c5fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008fa7  00000000  00000000  00022632  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e9ff  00000000  00000000  0002b5d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a9fd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001bf0  00000000  00000000  000aa01c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000abc0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002714 	.word	0x08002714

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002714 	.word	0x08002714

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  sDateAndTime dateTimeToSet = {.time = {.seconds = 0, .minutes = 37, .hours = 19},
 8000152:	4a15      	ldr	r2, [pc, #84]	@ (80001a8 <main+0x5c>)
 8000154:	f107 0308 	add.w	r3, r7, #8
 8000158:	e892 0003 	ldmia.w	r2, {r0, r1}
 800015c:	6018      	str	r0, [r3, #0]
 800015e:	3304      	adds	r3, #4
 8000160:	8019      	strh	r1, [r3, #0]
 8000162:	3302      	adds	r3, #2
 8000164:	0c0a      	lsrs	r2, r1, #16
 8000166:	701a      	strb	r2, [r3, #0]
  	  	  	  	  	  	  	  	.date = {.day = 3, .date = 2, .month = 4, .year = 25}};

  sDateAndTime readDateTime = {0};
 8000168:	463b      	mov	r3, r7
 800016a:	2200      	movs	r2, #0
 800016c:	601a      	str	r2, [r3, #0]
 800016e:	f8c3 2003 	str.w	r2, [r3, #3]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000172:	f000 fb45 	bl	8000800 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000176:	f000 f81b 	bl	80001b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800017a:	f000 f883 	bl	8000284 <MX_GPIO_Init>
  MX_I2C1_Init();
 800017e:	f000 f853 	bl	8000228 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  status = RTCSetDateAndTime(&dateTimeToSet);
 8000182:	f107 0308 	add.w	r3, r7, #8
 8000186:	4618      	mov	r0, r3
 8000188:	f000 fae0 	bl	800074c <RTCSetDateAndTime>
 800018c:	4603      	mov	r3, r0
 800018e:	73fb      	strb	r3, [r7, #15]
  status = RTCGetDateAndTime(&readDateTime);
 8000190:	463b      	mov	r3, r7
 8000192:	4618      	mov	r0, r3
 8000194:	f000 fa75 	bl	8000682 <RTCGetDateAndTime>
 8000198:	4603      	mov	r3, r0
 800019a:	73fb      	strb	r3, [r7, #15]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800019c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001a0:	4802      	ldr	r0, [pc, #8]	@ (80001ac <main+0x60>)
 80001a2:	f000 fe0f 	bl	8000dc4 <HAL_GPIO_TogglePin>
 80001a6:	e7f9      	b.n	800019c <main+0x50>
 80001a8:	0800272c 	.word	0x0800272c
 80001ac:	40011000 	.word	0x40011000

080001b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b090      	sub	sp, #64	@ 0x40
 80001b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001b6:	f107 0318 	add.w	r3, r7, #24
 80001ba:	2228      	movs	r2, #40	@ 0x28
 80001bc:	2100      	movs	r1, #0
 80001be:	4618      	mov	r0, r3
 80001c0:	f002 fa7c 	bl	80026bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	2200      	movs	r2, #0
 80001c8:	601a      	str	r2, [r3, #0]
 80001ca:	605a      	str	r2, [r3, #4]
 80001cc:	609a      	str	r2, [r3, #8]
 80001ce:	60da      	str	r2, [r3, #12]
 80001d0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001d2:	2302      	movs	r3, #2
 80001d4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001d6:	2301      	movs	r3, #1
 80001d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001da:	2310      	movs	r3, #16
 80001dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001de:	2300      	movs	r3, #0
 80001e0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001e2:	f107 0318 	add.w	r3, r7, #24
 80001e6:	4618      	mov	r0, r3
 80001e8:	f001 fe6c 	bl	8001ec4 <HAL_RCC_OscConfig>
 80001ec:	4603      	mov	r3, r0
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d001      	beq.n	80001f6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001f2:	f000 f893 	bl	800031c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001f6:	230f      	movs	r3, #15
 80001f8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001fa:	2300      	movs	r3, #0
 80001fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001fe:	2300      	movs	r3, #0
 8000200:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000206:	2300      	movs	r3, #0
 8000208:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800020a:	1d3b      	adds	r3, r7, #4
 800020c:	2100      	movs	r1, #0
 800020e:	4618      	mov	r0, r3
 8000210:	f002 f8da 	bl	80023c8 <HAL_RCC_ClockConfig>
 8000214:	4603      	mov	r3, r0
 8000216:	2b00      	cmp	r3, #0
 8000218:	d001      	beq.n	800021e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800021a:	f000 f87f 	bl	800031c <Error_Handler>
  }
}
 800021e:	bf00      	nop
 8000220:	3740      	adds	r7, #64	@ 0x40
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
	...

08000228 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800022c:	4b12      	ldr	r3, [pc, #72]	@ (8000278 <MX_I2C1_Init+0x50>)
 800022e:	4a13      	ldr	r2, [pc, #76]	@ (800027c <MX_I2C1_Init+0x54>)
 8000230:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000232:	4b11      	ldr	r3, [pc, #68]	@ (8000278 <MX_I2C1_Init+0x50>)
 8000234:	4a12      	ldr	r2, [pc, #72]	@ (8000280 <MX_I2C1_Init+0x58>)
 8000236:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000238:	4b0f      	ldr	r3, [pc, #60]	@ (8000278 <MX_I2C1_Init+0x50>)
 800023a:	2200      	movs	r2, #0
 800023c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800023e:	4b0e      	ldr	r3, [pc, #56]	@ (8000278 <MX_I2C1_Init+0x50>)
 8000240:	2200      	movs	r2, #0
 8000242:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000244:	4b0c      	ldr	r3, [pc, #48]	@ (8000278 <MX_I2C1_Init+0x50>)
 8000246:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800024a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800024c:	4b0a      	ldr	r3, [pc, #40]	@ (8000278 <MX_I2C1_Init+0x50>)
 800024e:	2200      	movs	r2, #0
 8000250:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000252:	4b09      	ldr	r3, [pc, #36]	@ (8000278 <MX_I2C1_Init+0x50>)
 8000254:	2200      	movs	r2, #0
 8000256:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000258:	4b07      	ldr	r3, [pc, #28]	@ (8000278 <MX_I2C1_Init+0x50>)
 800025a:	2200      	movs	r2, #0
 800025c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800025e:	4b06      	ldr	r3, [pc, #24]	@ (8000278 <MX_I2C1_Init+0x50>)
 8000260:	2200      	movs	r2, #0
 8000262:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000264:	4804      	ldr	r0, [pc, #16]	@ (8000278 <MX_I2C1_Init+0x50>)
 8000266:	f000 fdc7 	bl	8000df8 <HAL_I2C_Init>
 800026a:	4603      	mov	r3, r0
 800026c:	2b00      	cmp	r3, #0
 800026e:	d001      	beq.n	8000274 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000270:	f000 f854 	bl	800031c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000274:	bf00      	nop
 8000276:	bd80      	pop	{r7, pc}
 8000278:	20000028 	.word	0x20000028
 800027c:	40005400 	.word	0x40005400
 8000280:	000186a0 	.word	0x000186a0

08000284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b088      	sub	sp, #32
 8000288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800028a:	f107 0310 	add.w	r3, r7, #16
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
 8000292:	605a      	str	r2, [r3, #4]
 8000294:	609a      	str	r2, [r3, #8]
 8000296:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000298:	4b1e      	ldr	r3, [pc, #120]	@ (8000314 <MX_GPIO_Init+0x90>)
 800029a:	699b      	ldr	r3, [r3, #24]
 800029c:	4a1d      	ldr	r2, [pc, #116]	@ (8000314 <MX_GPIO_Init+0x90>)
 800029e:	f043 0310 	orr.w	r3, r3, #16
 80002a2:	6193      	str	r3, [r2, #24]
 80002a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000314 <MX_GPIO_Init+0x90>)
 80002a6:	699b      	ldr	r3, [r3, #24]
 80002a8:	f003 0310 	and.w	r3, r3, #16
 80002ac:	60fb      	str	r3, [r7, #12]
 80002ae:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b0:	4b18      	ldr	r3, [pc, #96]	@ (8000314 <MX_GPIO_Init+0x90>)
 80002b2:	699b      	ldr	r3, [r3, #24]
 80002b4:	4a17      	ldr	r2, [pc, #92]	@ (8000314 <MX_GPIO_Init+0x90>)
 80002b6:	f043 0304 	orr.w	r3, r3, #4
 80002ba:	6193      	str	r3, [r2, #24]
 80002bc:	4b15      	ldr	r3, [pc, #84]	@ (8000314 <MX_GPIO_Init+0x90>)
 80002be:	699b      	ldr	r3, [r3, #24]
 80002c0:	f003 0304 	and.w	r3, r3, #4
 80002c4:	60bb      	str	r3, [r7, #8]
 80002c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002c8:	4b12      	ldr	r3, [pc, #72]	@ (8000314 <MX_GPIO_Init+0x90>)
 80002ca:	699b      	ldr	r3, [r3, #24]
 80002cc:	4a11      	ldr	r2, [pc, #68]	@ (8000314 <MX_GPIO_Init+0x90>)
 80002ce:	f043 0308 	orr.w	r3, r3, #8
 80002d2:	6193      	str	r3, [r2, #24]
 80002d4:	4b0f      	ldr	r3, [pc, #60]	@ (8000314 <MX_GPIO_Init+0x90>)
 80002d6:	699b      	ldr	r3, [r3, #24]
 80002d8:	f003 0308 	and.w	r3, r3, #8
 80002dc:	607b      	str	r3, [r7, #4]
 80002de:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002e0:	2200      	movs	r2, #0
 80002e2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002e6:	480c      	ldr	r0, [pc, #48]	@ (8000318 <MX_GPIO_Init+0x94>)
 80002e8:	f000 fd54 	bl	8000d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80002ec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f2:	2301      	movs	r3, #1
 80002f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f6:	2300      	movs	r3, #0
 80002f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002fa:	2302      	movs	r3, #2
 80002fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80002fe:	f107 0310 	add.w	r3, r7, #16
 8000302:	4619      	mov	r1, r3
 8000304:	4804      	ldr	r0, [pc, #16]	@ (8000318 <MX_GPIO_Init+0x94>)
 8000306:	f000 fbc1 	bl	8000a8c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800030a:	bf00      	nop
 800030c:	3720      	adds	r7, #32
 800030e:	46bd      	mov	sp, r7
 8000310:	bd80      	pop	{r7, pc}
 8000312:	bf00      	nop
 8000314:	40021000 	.word	0x40021000
 8000318:	40011000 	.word	0x40011000

0800031c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000320:	b672      	cpsid	i
}
 8000322:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000324:	bf00      	nop
 8000326:	e7fd      	b.n	8000324 <Error_Handler+0x8>

08000328 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000328:	b480      	push	{r7}
 800032a:	b085      	sub	sp, #20
 800032c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800032e:	4b15      	ldr	r3, [pc, #84]	@ (8000384 <HAL_MspInit+0x5c>)
 8000330:	699b      	ldr	r3, [r3, #24]
 8000332:	4a14      	ldr	r2, [pc, #80]	@ (8000384 <HAL_MspInit+0x5c>)
 8000334:	f043 0301 	orr.w	r3, r3, #1
 8000338:	6193      	str	r3, [r2, #24]
 800033a:	4b12      	ldr	r3, [pc, #72]	@ (8000384 <HAL_MspInit+0x5c>)
 800033c:	699b      	ldr	r3, [r3, #24]
 800033e:	f003 0301 	and.w	r3, r3, #1
 8000342:	60bb      	str	r3, [r7, #8]
 8000344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000346:	4b0f      	ldr	r3, [pc, #60]	@ (8000384 <HAL_MspInit+0x5c>)
 8000348:	69db      	ldr	r3, [r3, #28]
 800034a:	4a0e      	ldr	r2, [pc, #56]	@ (8000384 <HAL_MspInit+0x5c>)
 800034c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000350:	61d3      	str	r3, [r2, #28]
 8000352:	4b0c      	ldr	r3, [pc, #48]	@ (8000384 <HAL_MspInit+0x5c>)
 8000354:	69db      	ldr	r3, [r3, #28]
 8000356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800035a:	607b      	str	r3, [r7, #4]
 800035c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800035e:	4b0a      	ldr	r3, [pc, #40]	@ (8000388 <HAL_MspInit+0x60>)
 8000360:	685b      	ldr	r3, [r3, #4]
 8000362:	60fb      	str	r3, [r7, #12]
 8000364:	68fb      	ldr	r3, [r7, #12]
 8000366:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800036a:	60fb      	str	r3, [r7, #12]
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000372:	60fb      	str	r3, [r7, #12]
 8000374:	4a04      	ldr	r2, [pc, #16]	@ (8000388 <HAL_MspInit+0x60>)
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800037a:	bf00      	nop
 800037c:	3714      	adds	r7, #20
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr
 8000384:	40021000 	.word	0x40021000
 8000388:	40010000 	.word	0x40010000

0800038c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b088      	sub	sp, #32
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000394:	f107 0310 	add.w	r3, r7, #16
 8000398:	2200      	movs	r2, #0
 800039a:	601a      	str	r2, [r3, #0]
 800039c:	605a      	str	r2, [r3, #4]
 800039e:	609a      	str	r2, [r3, #8]
 80003a0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	4a15      	ldr	r2, [pc, #84]	@ (80003fc <HAL_I2C_MspInit+0x70>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d123      	bne.n	80003f4 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ac:	4b14      	ldr	r3, [pc, #80]	@ (8000400 <HAL_I2C_MspInit+0x74>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a13      	ldr	r2, [pc, #76]	@ (8000400 <HAL_I2C_MspInit+0x74>)
 80003b2:	f043 0308 	orr.w	r3, r3, #8
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b11      	ldr	r3, [pc, #68]	@ (8000400 <HAL_I2C_MspInit+0x74>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0308 	and.w	r3, r3, #8
 80003c0:	60fb      	str	r3, [r7, #12]
 80003c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80003c4:	23c0      	movs	r3, #192	@ 0xc0
 80003c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80003c8:	2312      	movs	r3, #18
 80003ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80003cc:	2303      	movs	r3, #3
 80003ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003d0:	f107 0310 	add.w	r3, r7, #16
 80003d4:	4619      	mov	r1, r3
 80003d6:	480b      	ldr	r0, [pc, #44]	@ (8000404 <HAL_I2C_MspInit+0x78>)
 80003d8:	f000 fb58 	bl	8000a8c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80003dc:	4b08      	ldr	r3, [pc, #32]	@ (8000400 <HAL_I2C_MspInit+0x74>)
 80003de:	69db      	ldr	r3, [r3, #28]
 80003e0:	4a07      	ldr	r2, [pc, #28]	@ (8000400 <HAL_I2C_MspInit+0x74>)
 80003e2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003e6:	61d3      	str	r3, [r2, #28]
 80003e8:	4b05      	ldr	r3, [pc, #20]	@ (8000400 <HAL_I2C_MspInit+0x74>)
 80003ea:	69db      	ldr	r3, [r3, #28]
 80003ec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80003f0:	60bb      	str	r3, [r7, #8]
 80003f2:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80003f4:	bf00      	nop
 80003f6:	3720      	adds	r7, #32
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	40005400 	.word	0x40005400
 8000400:	40021000 	.word	0x40021000
 8000404:	40010c00 	.word	0x40010c00

08000408 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800040c:	bf00      	nop
 800040e:	e7fd      	b.n	800040c <NMI_Handler+0x4>

08000410 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000414:	bf00      	nop
 8000416:	e7fd      	b.n	8000414 <HardFault_Handler+0x4>

08000418 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000418:	b480      	push	{r7}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800041c:	bf00      	nop
 800041e:	e7fd      	b.n	800041c <MemManage_Handler+0x4>

08000420 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000424:	bf00      	nop
 8000426:	e7fd      	b.n	8000424 <BusFault_Handler+0x4>

08000428 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000428:	b480      	push	{r7}
 800042a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800042c:	bf00      	nop
 800042e:	e7fd      	b.n	800042c <UsageFault_Handler+0x4>

08000430 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000434:	bf00      	nop
 8000436:	46bd      	mov	sp, r7
 8000438:	bc80      	pop	{r7}
 800043a:	4770      	bx	lr

0800043c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000440:	bf00      	nop
 8000442:	46bd      	mov	sp, r7
 8000444:	bc80      	pop	{r7}
 8000446:	4770      	bx	lr

08000448 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800044c:	bf00      	nop
 800044e:	46bd      	mov	sp, r7
 8000450:	bc80      	pop	{r7}
 8000452:	4770      	bx	lr

08000454 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000458:	f000 fa18 	bl	800088c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800045c:	bf00      	nop
 800045e:	bd80      	pop	{r7, pc}

08000460 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000464:	bf00      	nop
 8000466:	46bd      	mov	sp, r7
 8000468:	bc80      	pop	{r7}
 800046a:	4770      	bx	lr

0800046c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800046c:	f7ff fff8 	bl	8000460 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000470:	480b      	ldr	r0, [pc, #44]	@ (80004a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000472:	490c      	ldr	r1, [pc, #48]	@ (80004a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000474:	4a0c      	ldr	r2, [pc, #48]	@ (80004a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000476:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000478:	e002      	b.n	8000480 <LoopCopyDataInit>

0800047a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800047a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800047c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800047e:	3304      	adds	r3, #4

08000480 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000480:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000482:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000484:	d3f9      	bcc.n	800047a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000486:	4a09      	ldr	r2, [pc, #36]	@ (80004ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000488:	4c09      	ldr	r4, [pc, #36]	@ (80004b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800048a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800048c:	e001      	b.n	8000492 <LoopFillZerobss>

0800048e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800048e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000490:	3204      	adds	r2, #4

08000492 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000492:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000494:	d3fb      	bcc.n	800048e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000496:	f002 f919 	bl	80026cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800049a:	f7ff fe57 	bl	800014c <main>
  bx lr
 800049e:	4770      	bx	lr
  ldr r0, =_sdata
 80004a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80004a8:	08002768 	.word	0x08002768
  ldr r2, =_sbss
 80004ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80004b0:	20000080 	.word	0x20000080

080004b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80004b4:	e7fe      	b.n	80004b4 <ADC1_2_IRQHandler>
	...

080004b8 <writeRTCRegisters>:
uint8_t registers[RTC_DATETIME_REGISTER_NUM] = {0};
// ====================[ PRIVATE FUNCTIONS ]======================
#if DEBUG_TEST == 0
extern I2C_HandleTypeDef hi2c1;

static tStatusRTC writeRTCRegisters(uint16_t slaveAddress, uint16_t registerAddress, uint8_t *dataToWrite, uint16_t dataSize){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b08a      	sub	sp, #40	@ 0x28
 80004bc:	af04      	add	r7, sp, #16
 80004be:	60ba      	str	r2, [r7, #8]
 80004c0:	461a      	mov	r2, r3
 80004c2:	4603      	mov	r3, r0
 80004c4:	81fb      	strh	r3, [r7, #14]
 80004c6:	460b      	mov	r3, r1
 80004c8:	81bb      	strh	r3, [r7, #12]
 80004ca:	4613      	mov	r3, r2
 80004cc:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Write(&hi2c1, slaveAddress, registerAddress, I2C_MEMADD_SIZE_8BIT, dataToWrite, dataSize, HAL_MAX_DELAY);
 80004ce:	89ba      	ldrh	r2, [r7, #12]
 80004d0:	89f9      	ldrh	r1, [r7, #14]
 80004d2:	f04f 33ff 	mov.w	r3, #4294967295
 80004d6:	9302      	str	r3, [sp, #8]
 80004d8:	88fb      	ldrh	r3, [r7, #6]
 80004da:	9301      	str	r3, [sp, #4]
 80004dc:	68bb      	ldr	r3, [r7, #8]
 80004de:	9300      	str	r3, [sp, #0]
 80004e0:	2301      	movs	r3, #1
 80004e2:	4807      	ldr	r0, [pc, #28]	@ (8000500 <writeRTCRegisters+0x48>)
 80004e4:	f000 fdcc 	bl	8001080 <HAL_I2C_Mem_Write>
 80004e8:	4603      	mov	r3, r0
 80004ea:	75fb      	strb	r3, [r7, #23]
	return (status == HAL_OK) ? RTC_OK : RTC_ERROR_WRITE_FAILED;
 80004ec:	7dfb      	ldrb	r3, [r7, #23]
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	bf14      	ite	ne
 80004f2:	2301      	movne	r3, #1
 80004f4:	2300      	moveq	r3, #0
 80004f6:	b2db      	uxtb	r3, r3
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	3718      	adds	r7, #24
 80004fc:	46bd      	mov	sp, r7
 80004fe:	bd80      	pop	{r7, pc}
 8000500:	20000028 	.word	0x20000028

08000504 <readRTCRegisters>:



static tStatusRTC readRTCRegisters(uint16_t slaveAddress, uint16_t registerAddress, uint8_t *dataToRead, uint16_t dataSize){
 8000504:	b580      	push	{r7, lr}
 8000506:	b08a      	sub	sp, #40	@ 0x28
 8000508:	af04      	add	r7, sp, #16
 800050a:	60ba      	str	r2, [r7, #8]
 800050c:	461a      	mov	r2, r3
 800050e:	4603      	mov	r3, r0
 8000510:	81fb      	strh	r3, [r7, #14]
 8000512:	460b      	mov	r3, r1
 8000514:	81bb      	strh	r3, [r7, #12]
 8000516:	4613      	mov	r3, r2
 8000518:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	status = HAL_I2C_Mem_Read(&hi2c1, slaveAddress, registerAddress, I2C_MEMADD_SIZE_8BIT, dataToRead, dataSize, HAL_MAX_DELAY);
 800051a:	89ba      	ldrh	r2, [r7, #12]
 800051c:	89f9      	ldrh	r1, [r7, #14]
 800051e:	f04f 33ff 	mov.w	r3, #4294967295
 8000522:	9302      	str	r3, [sp, #8]
 8000524:	88fb      	ldrh	r3, [r7, #6]
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	68bb      	ldr	r3, [r7, #8]
 800052a:	9300      	str	r3, [sp, #0]
 800052c:	2301      	movs	r3, #1
 800052e:	4807      	ldr	r0, [pc, #28]	@ (800054c <readRTCRegisters+0x48>)
 8000530:	f000 fea0 	bl	8001274 <HAL_I2C_Mem_Read>
 8000534:	4603      	mov	r3, r0
 8000536:	75fb      	strb	r3, [r7, #23]
	return (status == HAL_OK) ? RTC_OK : RTC_ERROR_READ_FAILED;
 8000538:	7dfb      	ldrb	r3, [r7, #23]
 800053a:	2b00      	cmp	r3, #0
 800053c:	d101      	bne.n	8000542 <readRTCRegisters+0x3e>
 800053e:	2300      	movs	r3, #0
 8000540:	e000      	b.n	8000544 <readRTCRegisters+0x40>
 8000542:	2302      	movs	r3, #2
}
 8000544:	4618      	mov	r0, r3
 8000546:	3718      	adds	r7, #24
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20000028 	.word	0x20000028

08000550 <decimalToBCD>:
 * Convert a decimal number into its BCD representation
 *
 * @param Desired decimal number between 0 and 99.
 * @return BCD representation (4 bits per digit, 4 MSBs are tens, the other 4 bits are units).
 */
static uint8_t decimalToBCD(uint8_t decimal){
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]
	return ((decimal / 10) << 4) | (decimal % 10);
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	4a0d      	ldr	r2, [pc, #52]	@ (8000594 <decimalToBCD+0x44>)
 800055e:	fba2 2303 	umull	r2, r3, r2, r3
 8000562:	08db      	lsrs	r3, r3, #3
 8000564:	b2db      	uxtb	r3, r3
 8000566:	b25b      	sxtb	r3, r3
 8000568:	011b      	lsls	r3, r3, #4
 800056a:	b258      	sxtb	r0, r3
 800056c:	79fa      	ldrb	r2, [r7, #7]
 800056e:	4b09      	ldr	r3, [pc, #36]	@ (8000594 <decimalToBCD+0x44>)
 8000570:	fba3 1302 	umull	r1, r3, r3, r2
 8000574:	08d9      	lsrs	r1, r3, #3
 8000576:	460b      	mov	r3, r1
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	440b      	add	r3, r1
 800057c:	005b      	lsls	r3, r3, #1
 800057e:	1ad3      	subs	r3, r2, r3
 8000580:	b2db      	uxtb	r3, r3
 8000582:	b25b      	sxtb	r3, r3
 8000584:	4303      	orrs	r3, r0
 8000586:	b25b      	sxtb	r3, r3
 8000588:	b2db      	uxtb	r3, r3
}
 800058a:	4618      	mov	r0, r3
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	bc80      	pop	{r7}
 8000592:	4770      	bx	lr
 8000594:	cccccccd 	.word	0xcccccccd

08000598 <BCDToDecimal>:
 * Convert a BCD representation into its corresponding decimal number.
 *
 * @param BCD representation (4 bits per digit, 4 MSBs are tens, the other 4 bits are units).
 * @return Resulting decimal number between 0 and 99.
 */
static uint8_t BCDToDecimal(uint8_t bcd){
 8000598:	b480      	push	{r7}
 800059a:	b083      	sub	sp, #12
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
	return ((bcd >> 4) * 10) + (bcd & 0x0F);
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	091b      	lsrs	r3, r3, #4
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	461a      	mov	r2, r3
 80005aa:	0092      	lsls	r2, r2, #2
 80005ac:	4413      	add	r3, r2
 80005ae:	005b      	lsls	r3, r3, #1
 80005b0:	b2da      	uxtb	r2, r3
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	f003 030f 	and.w	r3, r3, #15
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	4413      	add	r3, r2
 80005bc:	b2db      	uxtb	r3, r3
}
 80005be:	4618      	mov	r0, r3
 80005c0:	370c      	adds	r7, #12
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bc80      	pop	{r7}
 80005c6:	4770      	bx	lr

080005c8 <isValidDate>:
 * not check for leap year or max days per month conditions.
 *
 * @param Pointer to a structure that contains the date.
 * @return RTC_OK if there is a valid date, RTC_INVALID_DATE_FORMAT otherwise.
 */
static tStatusRTC isValidDate(const sDate *date){
 80005c8:	b480      	push	{r7}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	tStatusRTC status = RTC_OK;
 80005d0:	2300      	movs	r3, #0
 80005d2:	73fb      	strb	r3, [r7, #15]
	if(date->day   > 7  || date->day   < 1 ||
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b07      	cmp	r3, #7
 80005da:	d817      	bhi.n	800060c <isValidDate+0x44>
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d013      	beq.n	800060c <isValidDate+0x44>
	   date->date  > 31 || date->date  < 1 ||
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	785b      	ldrb	r3, [r3, #1]
	if(date->day   > 7  || date->day   < 1 ||
 80005e8:	2b1f      	cmp	r3, #31
 80005ea:	d80f      	bhi.n	800060c <isValidDate+0x44>
	   date->date  > 31 || date->date  < 1 ||
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	785b      	ldrb	r3, [r3, #1]
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d00b      	beq.n	800060c <isValidDate+0x44>
	   date->month > 12 || date->month < 1 ||
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	789b      	ldrb	r3, [r3, #2]
	   date->date  > 31 || date->date  < 1 ||
 80005f8:	2b0c      	cmp	r3, #12
 80005fa:	d807      	bhi.n	800060c <isValidDate+0x44>
	   date->month > 12 || date->month < 1 ||
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	789b      	ldrb	r3, [r3, #2]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d003      	beq.n	800060c <isValidDate+0x44>
	   date->year  > 99)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	78db      	ldrb	r3, [r3, #3]
	   date->month > 12 || date->month < 1 ||
 8000608:	2b63      	cmp	r3, #99	@ 0x63
 800060a:	d901      	bls.n	8000610 <isValidDate+0x48>
	{
		status = RTC_INVALID_DATE_FORMAT;
 800060c:	2303      	movs	r3, #3
 800060e:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8000610:	7bfb      	ldrb	r3, [r7, #15]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	bc80      	pop	{r7}
 800061a:	4770      	bx	lr

0800061c <isValidTime>:
 * compatibility with the format of the DS3231's registers.
 *
 * @param Pointer to a structure that contains the time.
 * @return RTC_OK if there is a valid time, RTC_INVALID_TIME_FORMAT otherwise.
 */
static tStatusRTC isValidTime(const sTime *time){
 800061c:	b480      	push	{r7}
 800061e:	b085      	sub	sp, #20
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
	tStatusRTC status = RTC_OK;
 8000624:	2300      	movs	r3, #0
 8000626:	73fb      	strb	r3, [r7, #15]
	if(time->seconds > 59 ||
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b3b      	cmp	r3, #59	@ 0x3b
 800062e:	d807      	bhi.n	8000640 <isValidTime+0x24>
	   time->minutes > 59 ||
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	785b      	ldrb	r3, [r3, #1]
	if(time->seconds > 59 ||
 8000634:	2b3b      	cmp	r3, #59	@ 0x3b
 8000636:	d803      	bhi.n	8000640 <isValidTime+0x24>
	   time->hours   > 23)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	789b      	ldrb	r3, [r3, #2]
	   time->minutes > 59 ||
 800063c:	2b17      	cmp	r3, #23
 800063e:	d901      	bls.n	8000644 <isValidTime+0x28>
	{
		status = RTC_INVALID_TIME_FORMAT;
 8000640:	2304      	movs	r3, #4
 8000642:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 8000644:	7bfb      	ldrb	r3, [r7, #15]
}
 8000646:	4618      	mov	r0, r3
 8000648:	3714      	adds	r7, #20
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr

08000650 <isValidDateTime>:
 * @param Pointer to a structure that contains the date and time.
 * @return RTC_OK if there are a valid date and time, RTC_INVALID_DATE_FORMAT if
 *         there is an invalid date format, RTC_INVALID_TIME_FORMAT if there is
 *         an invalid time format.
 */
static tStatusRTC isValidDateTime(const sDateAndTime *dateTime){
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
	tStatusRTC status;

	//CHeck if date is valid
	status = isValidDate(&dateTime->date);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ffb4 	bl	80005c8 <isValidDate>
 8000660:	4603      	mov	r3, r0
 8000662:	73fb      	strb	r3, [r7, #15]
	if(status == RTC_OK){
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d106      	bne.n	8000678 <isValidDateTime+0x28>
		//Check if time is valid
		status = isValidTime(&dateTime->time);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	3304      	adds	r3, #4
 800066e:	4618      	mov	r0, r3
 8000670:	f7ff ffd4 	bl	800061c <isValidTime>
 8000674:	4603      	mov	r3, r0
 8000676:	73fb      	strb	r3, [r7, #15]
	}
	//else invalid date or time format
	return status;
 8000678:	7bfb      	ldrb	r3, [r7, #15]
}
 800067a:	4618      	mov	r0, r3
 800067c:	3710      	adds	r7, #16
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <RTCGetDateAndTime>:
 *
 * @param Pointer to a structure that will store the date and time read.
 * @return RTC_OK if the read operation was successful, RTC_ERROR_READ_FAILED
 * 		   if there was an error while reading the DS3231 registers.
 */
tStatusRTC RTCGetDateAndTime(sDateAndTime *dateTime){
 8000682:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000684:	b089      	sub	sp, #36	@ 0x24
 8000686:	af00      	add	r7, sp, #0
 8000688:	6078      	str	r0, [r7, #4]
	tStatusRTC status;
	uint8_t counter = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	77fb      	strb	r3, [r7, #31]
	uint8_t dataToRead[RTC_DATETIME_REGISTER_NUM];

	//Try to read date and time from DS3231 memory
	do{
		status = readRTCRegisters(RTC_SLAVE_ADDRESS, RTC_DATETIME_BASE_ADDRESS, dataToRead, RTC_DATETIME_REGISTER_NUM);
 800068e:	f107 0214 	add.w	r2, r7, #20
 8000692:	2307      	movs	r3, #7
 8000694:	2100      	movs	r1, #0
 8000696:	20d0      	movs	r0, #208	@ 0xd0
 8000698:	f7ff ff34 	bl	8000504 <readRTCRegisters>
 800069c:	4603      	mov	r3, r0
 800069e:	77bb      	strb	r3, [r7, #30]
		counter++;
 80006a0:	7ffb      	ldrb	r3, [r7, #31]
 80006a2:	3301      	adds	r3, #1
 80006a4:	77fb      	strb	r3, [r7, #31]
	}while(status != RTC_OK || counter < MAX_RETRIES);
 80006a6:	7fbb      	ldrb	r3, [r7, #30]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d1f0      	bne.n	800068e <RTCGetDateAndTime+0xc>
 80006ac:	7ffb      	ldrb	r3, [r7, #31]
 80006ae:	2b09      	cmp	r3, #9
 80006b0:	d9ed      	bls.n	800068e <RTCGetDateAndTime+0xc>

	if(status == RTC_OK){
 80006b2:	7fbb      	ldrb	r3, [r7, #30]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d144      	bne.n	8000742 <RTCGetDateAndTime+0xc0>
		//Pass time data into the structure
		dateTime->time = (sTime) {.seconds = BCDToDecimal(dataToRead[0]),
 80006b8:	7d3b      	ldrb	r3, [r7, #20]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f7ff ff6c 	bl	8000598 <BCDToDecimal>
 80006c0:	4603      	mov	r3, r0
 80006c2:	461d      	mov	r5, r3
								  .minutes = BCDToDecimal(dataToRead[1]),
 80006c4:	7d7b      	ldrb	r3, [r7, #21]
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ff66 	bl	8000598 <BCDToDecimal>
 80006cc:	4603      	mov	r3, r0
 80006ce:	461c      	mov	r4, r3
								  .hours   = BCDToDecimal(dataToRead[2] & 0x3F)};		//Ignore 12/~24 bit, keep hours only
 80006d0:	7dbb      	ldrb	r3, [r7, #22]
 80006d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	4618      	mov	r0, r3
 80006da:	f7ff ff5d 	bl	8000598 <BCDToDecimal>
 80006de:	4603      	mov	r3, r0
 80006e0:	4619      	mov	r1, r3
		dateTime->time = (sTime) {.seconds = BCDToDecimal(dataToRead[0]),
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	462a      	mov	r2, r5
 80006e6:	711a      	strb	r2, [r3, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	4622      	mov	r2, r4
 80006ec:	715a      	strb	r2, [r3, #5]
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	460a      	mov	r2, r1
 80006f2:	719a      	strb	r2, [r3, #6]

		//Pass date data into the structure
		dateTime->date = (sDate) {.day   = BCDToDecimal(dataToRead[3]),
 80006f4:	7dfb      	ldrb	r3, [r7, #23]
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff ff4e 	bl	8000598 <BCDToDecimal>
 80006fc:	4603      	mov	r3, r0
 80006fe:	461e      	mov	r6, r3
								  .date  = BCDToDecimal(dataToRead[4]),
 8000700:	7e3b      	ldrb	r3, [r7, #24]
 8000702:	4618      	mov	r0, r3
 8000704:	f7ff ff48 	bl	8000598 <BCDToDecimal>
 8000708:	4603      	mov	r3, r0
 800070a:	461d      	mov	r5, r3
								  .month = BCDToDecimal(dataToRead[5] & 0x1F),		//Ignore century bit, keep month only
 800070c:	7e7b      	ldrb	r3, [r7, #25]
 800070e:	f003 031f 	and.w	r3, r3, #31
 8000712:	b2db      	uxtb	r3, r3
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff3f 	bl	8000598 <BCDToDecimal>
 800071a:	4603      	mov	r3, r0
 800071c:	461c      	mov	r4, r3
								  .year  = BCDToDecimal(dataToRead[6])};
 800071e:	7ebb      	ldrb	r3, [r7, #26]
 8000720:	4618      	mov	r0, r3
 8000722:	f7ff ff39 	bl	8000598 <BCDToDecimal>
 8000726:	4603      	mov	r3, r0
 8000728:	4619      	mov	r1, r3
		dateTime->date = (sDate) {.day   = BCDToDecimal(dataToRead[3]),
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4632      	mov	r2, r6
 800072e:	701a      	strb	r2, [r3, #0]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	462a      	mov	r2, r5
 8000734:	705a      	strb	r2, [r3, #1]
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4622      	mov	r2, r4
 800073a:	709a      	strb	r2, [r3, #2]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	460a      	mov	r2, r1
 8000740:	70da      	strb	r2, [r3, #3]
	}
	//else read operation failed
	return status;
 8000742:	7fbb      	ldrb	r3, [r7, #30]
}
 8000744:	4618      	mov	r0, r3
 8000746:	3724      	adds	r7, #36	@ 0x24
 8000748:	46bd      	mov	sp, r7
 800074a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800074c <RTCSetDateAndTime>:
 * @return RTC_OK if the write operation was successful, RTC_ERROR_WRITE_FAILED
 * 		   if there was an error while writing the DS3231 registers,
 * 		   RTC_INVALID_DATE_FORMAT or RTC_INVALID_TIME_FORMAT if there is a format
 * 		   error on the date and time used.
 */
tStatusRTC RTCSetDateAndTime(const sDateAndTime *dateTime){
 800074c:	b580      	push	{r7, lr}
 800074e:	b086      	sub	sp, #24
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
	tStatusRTC status;
	uint8_t counter = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	75bb      	strb	r3, [r7, #22]
	uint8_t dataToWrite[RTC_DATETIME_REGISTER_NUM];

	status = isValidDateTime(dateTime);
 8000758:	6878      	ldr	r0, [r7, #4]
 800075a:	f7ff ff79 	bl	8000650 <isValidDateTime>
 800075e:	4603      	mov	r3, r0
 8000760:	75fb      	strb	r3, [r7, #23]
	//Check if there is a valid time format
	if(status == RTC_OK){
 8000762:	7dfb      	ldrb	r3, [r7, #23]
 8000764:	2b00      	cmp	r3, #0
 8000766:	d145      	bne.n	80007f4 <RTCSetDateAndTime+0xa8>
		//Convert time into BCD
		dataToWrite[0] = decimalToBCD(dateTime->time.seconds);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	791b      	ldrb	r3, [r3, #4]
 800076c:	4618      	mov	r0, r3
 800076e:	f7ff feef 	bl	8000550 <decimalToBCD>
 8000772:	4603      	mov	r3, r0
 8000774:	733b      	strb	r3, [r7, #12]
		dataToWrite[1] = decimalToBCD(dateTime->time.minutes);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	795b      	ldrb	r3, [r3, #5]
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff fee8 	bl	8000550 <decimalToBCD>
 8000780:	4603      	mov	r3, r0
 8000782:	737b      	strb	r3, [r7, #13]
		dataToWrite[2] = decimalToBCD(dateTime->time.hours) & 0x3F;		//Ensure that 12/~24 bit is low to select 24 hours format
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	799b      	ldrb	r3, [r3, #6]
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff fee1 	bl	8000550 <decimalToBCD>
 800078e:	4603      	mov	r3, r0
 8000790:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000794:	b2db      	uxtb	r3, r3
 8000796:	73bb      	strb	r3, [r7, #14]

		//Convert date into BCD
		dataToWrite[3] = decimalToBCD(dateTime->date.day);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fed7 	bl	8000550 <decimalToBCD>
 80007a2:	4603      	mov	r3, r0
 80007a4:	73fb      	strb	r3, [r7, #15]
		dataToWrite[4] = decimalToBCD(dateTime->date.date);
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	785b      	ldrb	r3, [r3, #1]
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fed0 	bl	8000550 <decimalToBCD>
 80007b0:	4603      	mov	r3, r0
 80007b2:	743b      	strb	r3, [r7, #16]
		dataToWrite[5] = decimalToBCD(dateTime->date.month);
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	789b      	ldrb	r3, [r3, #2]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff fec9 	bl	8000550 <decimalToBCD>
 80007be:	4603      	mov	r3, r0
 80007c0:	747b      	strb	r3, [r7, #17]
		dataToWrite[6] = decimalToBCD(dateTime->date.year);
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	78db      	ldrb	r3, [r3, #3]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff fec2 	bl	8000550 <decimalToBCD>
 80007cc:	4603      	mov	r3, r0
 80007ce:	74bb      	strb	r3, [r7, #18]

		//Write date and time on DS3231's memory
		do{
			status = writeRTCRegisters(RTC_SLAVE_ADDRESS, RTC_DATETIME_BASE_ADDRESS, dataToWrite, RTC_DATETIME_REGISTER_NUM);
 80007d0:	f107 020c 	add.w	r2, r7, #12
 80007d4:	2307      	movs	r3, #7
 80007d6:	2100      	movs	r1, #0
 80007d8:	20d0      	movs	r0, #208	@ 0xd0
 80007da:	f7ff fe6d 	bl	80004b8 <writeRTCRegisters>
 80007de:	4603      	mov	r3, r0
 80007e0:	75fb      	strb	r3, [r7, #23]
			counter++;
 80007e2:	7dbb      	ldrb	r3, [r7, #22]
 80007e4:	3301      	adds	r3, #1
 80007e6:	75bb      	strb	r3, [r7, #22]
		}while(status != RTC_OK|| counter < MAX_RETRIES);
 80007e8:	7dfb      	ldrb	r3, [r7, #23]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d1f0      	bne.n	80007d0 <RTCSetDateAndTime+0x84>
 80007ee:	7dbb      	ldrb	r3, [r7, #22]
 80007f0:	2b09      	cmp	r3, #9
 80007f2:	d9ed      	bls.n	80007d0 <RTCSetDateAndTime+0x84>
	}
	return status;
 80007f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3718      	adds	r7, #24
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000804:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <HAL_Init+0x28>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a07      	ldr	r2, [pc, #28]	@ (8000828 <HAL_Init+0x28>)
 800080a:	f043 0310 	orr.w	r3, r3, #16
 800080e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000810:	2003      	movs	r0, #3
 8000812:	f000 f907 	bl	8000a24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000816:	200f      	movs	r0, #15
 8000818:	f000 f808 	bl	800082c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800081c:	f7ff fd84 	bl	8000328 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000820:	2300      	movs	r3, #0
}
 8000822:	4618      	mov	r0, r3
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40022000 	.word	0x40022000

0800082c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000834:	4b12      	ldr	r3, [pc, #72]	@ (8000880 <HAL_InitTick+0x54>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b12      	ldr	r3, [pc, #72]	@ (8000884 <HAL_InitTick+0x58>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4619      	mov	r1, r3
 800083e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000842:	fbb3 f3f1 	udiv	r3, r3, r1
 8000846:	fbb2 f3f3 	udiv	r3, r2, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f911 	bl	8000a72 <HAL_SYSTICK_Config>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	e00e      	b.n	8000878 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b0f      	cmp	r3, #15
 800085e:	d80a      	bhi.n	8000876 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000860:	2200      	movs	r2, #0
 8000862:	6879      	ldr	r1, [r7, #4]
 8000864:	f04f 30ff 	mov.w	r0, #4294967295
 8000868:	f000 f8e7 	bl	8000a3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800086c:	4a06      	ldr	r2, [pc, #24]	@ (8000888 <HAL_InitTick+0x5c>)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000872:	2300      	movs	r3, #0
 8000874:	e000      	b.n	8000878 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000876:	2301      	movs	r3, #1
}
 8000878:	4618      	mov	r0, r3
 800087a:	3708      	adds	r7, #8
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000000 	.word	0x20000000
 8000884:	20000008 	.word	0x20000008
 8000888:	20000004 	.word	0x20000004

0800088c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000890:	4b05      	ldr	r3, [pc, #20]	@ (80008a8 <HAL_IncTick+0x1c>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	461a      	mov	r2, r3
 8000896:	4b05      	ldr	r3, [pc, #20]	@ (80008ac <HAL_IncTick+0x20>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4413      	add	r3, r2
 800089c:	4a03      	ldr	r2, [pc, #12]	@ (80008ac <HAL_IncTick+0x20>)
 800089e:	6013      	str	r3, [r2, #0]
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bc80      	pop	{r7}
 80008a6:	4770      	bx	lr
 80008a8:	20000008 	.word	0x20000008
 80008ac:	2000007c 	.word	0x2000007c

080008b0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  return uwTick;
 80008b4:	4b02      	ldr	r3, [pc, #8]	@ (80008c0 <HAL_GetTick+0x10>)
 80008b6:	681b      	ldr	r3, [r3, #0]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bc80      	pop	{r7}
 80008be:	4770      	bx	lr
 80008c0:	2000007c 	.word	0x2000007c

080008c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f003 0307 	and.w	r3, r3, #7
 80008d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000908 <__NVIC_SetPriorityGrouping+0x44>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008da:	68ba      	ldr	r2, [r7, #8]
 80008dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80008e0:	4013      	ands	r3, r2
 80008e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80008f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008f6:	4a04      	ldr	r2, [pc, #16]	@ (8000908 <__NVIC_SetPriorityGrouping+0x44>)
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	60d3      	str	r3, [r2, #12]
}
 80008fc:	bf00      	nop
 80008fe:	3714      	adds	r7, #20
 8000900:	46bd      	mov	sp, r7
 8000902:	bc80      	pop	{r7}
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	e000ed00 	.word	0xe000ed00

0800090c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000910:	4b04      	ldr	r3, [pc, #16]	@ (8000924 <__NVIC_GetPriorityGrouping+0x18>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	0a1b      	lsrs	r3, r3, #8
 8000916:	f003 0307 	and.w	r3, r3, #7
}
 800091a:	4618      	mov	r0, r3
 800091c:	46bd      	mov	sp, r7
 800091e:	bc80      	pop	{r7}
 8000920:	4770      	bx	lr
 8000922:	bf00      	nop
 8000924:	e000ed00 	.word	0xe000ed00

08000928 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000928:	b480      	push	{r7}
 800092a:	b083      	sub	sp, #12
 800092c:	af00      	add	r7, sp, #0
 800092e:	4603      	mov	r3, r0
 8000930:	6039      	str	r1, [r7, #0]
 8000932:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000934:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000938:	2b00      	cmp	r3, #0
 800093a:	db0a      	blt.n	8000952 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	b2da      	uxtb	r2, r3
 8000940:	490c      	ldr	r1, [pc, #48]	@ (8000974 <__NVIC_SetPriority+0x4c>)
 8000942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000946:	0112      	lsls	r2, r2, #4
 8000948:	b2d2      	uxtb	r2, r2
 800094a:	440b      	add	r3, r1
 800094c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000950:	e00a      	b.n	8000968 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	b2da      	uxtb	r2, r3
 8000956:	4908      	ldr	r1, [pc, #32]	@ (8000978 <__NVIC_SetPriority+0x50>)
 8000958:	79fb      	ldrb	r3, [r7, #7]
 800095a:	f003 030f 	and.w	r3, r3, #15
 800095e:	3b04      	subs	r3, #4
 8000960:	0112      	lsls	r2, r2, #4
 8000962:	b2d2      	uxtb	r2, r2
 8000964:	440b      	add	r3, r1
 8000966:	761a      	strb	r2, [r3, #24]
}
 8000968:	bf00      	nop
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000e100 	.word	0xe000e100
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800097c:	b480      	push	{r7}
 800097e:	b089      	sub	sp, #36	@ 0x24
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	f003 0307 	and.w	r3, r3, #7
 800098e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	f1c3 0307 	rsb	r3, r3, #7
 8000996:	2b04      	cmp	r3, #4
 8000998:	bf28      	it	cs
 800099a:	2304      	movcs	r3, #4
 800099c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	3304      	adds	r3, #4
 80009a2:	2b06      	cmp	r3, #6
 80009a4:	d902      	bls.n	80009ac <NVIC_EncodePriority+0x30>
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	3b03      	subs	r3, #3
 80009aa:	e000      	b.n	80009ae <NVIC_EncodePriority+0x32>
 80009ac:	2300      	movs	r3, #0
 80009ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009b0:	f04f 32ff 	mov.w	r2, #4294967295
 80009b4:	69bb      	ldr	r3, [r7, #24]
 80009b6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ba:	43da      	mvns	r2, r3
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	401a      	ands	r2, r3
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c4:	f04f 31ff 	mov.w	r1, #4294967295
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	fa01 f303 	lsl.w	r3, r1, r3
 80009ce:	43d9      	mvns	r1, r3
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d4:	4313      	orrs	r3, r2
         );
}
 80009d6:	4618      	mov	r0, r3
 80009d8:	3724      	adds	r7, #36	@ 0x24
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr

080009e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009f0:	d301      	bcc.n	80009f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009f2:	2301      	movs	r3, #1
 80009f4:	e00f      	b.n	8000a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009f6:	4a0a      	ldr	r2, [pc, #40]	@ (8000a20 <SysTick_Config+0x40>)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009fe:	210f      	movs	r1, #15
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	f7ff ff90 	bl	8000928 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a08:	4b05      	ldr	r3, [pc, #20]	@ (8000a20 <SysTick_Config+0x40>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a0e:	4b04      	ldr	r3, [pc, #16]	@ (8000a20 <SysTick_Config+0x40>)
 8000a10:	2207      	movs	r2, #7
 8000a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	e000e010 	.word	0xe000e010

08000a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff ff49 	bl	80008c4 <__NVIC_SetPriorityGrouping>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b086      	sub	sp, #24
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	4603      	mov	r3, r0
 8000a42:	60b9      	str	r1, [r7, #8]
 8000a44:	607a      	str	r2, [r7, #4]
 8000a46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a4c:	f7ff ff5e 	bl	800090c <__NVIC_GetPriorityGrouping>
 8000a50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	68b9      	ldr	r1, [r7, #8]
 8000a56:	6978      	ldr	r0, [r7, #20]
 8000a58:	f7ff ff90 	bl	800097c <NVIC_EncodePriority>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a62:	4611      	mov	r1, r2
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff5f 	bl	8000928 <__NVIC_SetPriority>
}
 8000a6a:	bf00      	nop
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff ffb0 	bl	80009e0 <SysTick_Config>
 8000a80:	4603      	mov	r3, r0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b08b      	sub	sp, #44	@ 0x2c
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
 8000a94:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a96:	2300      	movs	r3, #0
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a9e:	e169      	b.n	8000d74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000aa0:	2201      	movs	r2, #1
 8000aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000aaa:	683b      	ldr	r3, [r7, #0]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	69fa      	ldr	r2, [r7, #28]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000ab4:	69ba      	ldr	r2, [r7, #24]
 8000ab6:	69fb      	ldr	r3, [r7, #28]
 8000ab8:	429a      	cmp	r2, r3
 8000aba:	f040 8158 	bne.w	8000d6e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	685b      	ldr	r3, [r3, #4]
 8000ac2:	4a9a      	ldr	r2, [pc, #616]	@ (8000d2c <HAL_GPIO_Init+0x2a0>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d05e      	beq.n	8000b86 <HAL_GPIO_Init+0xfa>
 8000ac8:	4a98      	ldr	r2, [pc, #608]	@ (8000d2c <HAL_GPIO_Init+0x2a0>)
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d875      	bhi.n	8000bba <HAL_GPIO_Init+0x12e>
 8000ace:	4a98      	ldr	r2, [pc, #608]	@ (8000d30 <HAL_GPIO_Init+0x2a4>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d058      	beq.n	8000b86 <HAL_GPIO_Init+0xfa>
 8000ad4:	4a96      	ldr	r2, [pc, #600]	@ (8000d30 <HAL_GPIO_Init+0x2a4>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d86f      	bhi.n	8000bba <HAL_GPIO_Init+0x12e>
 8000ada:	4a96      	ldr	r2, [pc, #600]	@ (8000d34 <HAL_GPIO_Init+0x2a8>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d052      	beq.n	8000b86 <HAL_GPIO_Init+0xfa>
 8000ae0:	4a94      	ldr	r2, [pc, #592]	@ (8000d34 <HAL_GPIO_Init+0x2a8>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d869      	bhi.n	8000bba <HAL_GPIO_Init+0x12e>
 8000ae6:	4a94      	ldr	r2, [pc, #592]	@ (8000d38 <HAL_GPIO_Init+0x2ac>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d04c      	beq.n	8000b86 <HAL_GPIO_Init+0xfa>
 8000aec:	4a92      	ldr	r2, [pc, #584]	@ (8000d38 <HAL_GPIO_Init+0x2ac>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d863      	bhi.n	8000bba <HAL_GPIO_Init+0x12e>
 8000af2:	4a92      	ldr	r2, [pc, #584]	@ (8000d3c <HAL_GPIO_Init+0x2b0>)
 8000af4:	4293      	cmp	r3, r2
 8000af6:	d046      	beq.n	8000b86 <HAL_GPIO_Init+0xfa>
 8000af8:	4a90      	ldr	r2, [pc, #576]	@ (8000d3c <HAL_GPIO_Init+0x2b0>)
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d85d      	bhi.n	8000bba <HAL_GPIO_Init+0x12e>
 8000afe:	2b12      	cmp	r3, #18
 8000b00:	d82a      	bhi.n	8000b58 <HAL_GPIO_Init+0xcc>
 8000b02:	2b12      	cmp	r3, #18
 8000b04:	d859      	bhi.n	8000bba <HAL_GPIO_Init+0x12e>
 8000b06:	a201      	add	r2, pc, #4	@ (adr r2, 8000b0c <HAL_GPIO_Init+0x80>)
 8000b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b0c:	08000b87 	.word	0x08000b87
 8000b10:	08000b61 	.word	0x08000b61
 8000b14:	08000b73 	.word	0x08000b73
 8000b18:	08000bb5 	.word	0x08000bb5
 8000b1c:	08000bbb 	.word	0x08000bbb
 8000b20:	08000bbb 	.word	0x08000bbb
 8000b24:	08000bbb 	.word	0x08000bbb
 8000b28:	08000bbb 	.word	0x08000bbb
 8000b2c:	08000bbb 	.word	0x08000bbb
 8000b30:	08000bbb 	.word	0x08000bbb
 8000b34:	08000bbb 	.word	0x08000bbb
 8000b38:	08000bbb 	.word	0x08000bbb
 8000b3c:	08000bbb 	.word	0x08000bbb
 8000b40:	08000bbb 	.word	0x08000bbb
 8000b44:	08000bbb 	.word	0x08000bbb
 8000b48:	08000bbb 	.word	0x08000bbb
 8000b4c:	08000bbb 	.word	0x08000bbb
 8000b50:	08000b69 	.word	0x08000b69
 8000b54:	08000b7d 	.word	0x08000b7d
 8000b58:	4a79      	ldr	r2, [pc, #484]	@ (8000d40 <HAL_GPIO_Init+0x2b4>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d013      	beq.n	8000b86 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000b5e:	e02c      	b.n	8000bba <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b60:	683b      	ldr	r3, [r7, #0]
 8000b62:	68db      	ldr	r3, [r3, #12]
 8000b64:	623b      	str	r3, [r7, #32]
          break;
 8000b66:	e029      	b.n	8000bbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	3304      	adds	r3, #4
 8000b6e:	623b      	str	r3, [r7, #32]
          break;
 8000b70:	e024      	b.n	8000bbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	3308      	adds	r3, #8
 8000b78:	623b      	str	r3, [r7, #32]
          break;
 8000b7a:	e01f      	b.n	8000bbc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	330c      	adds	r3, #12
 8000b82:	623b      	str	r3, [r7, #32]
          break;
 8000b84:	e01a      	b.n	8000bbc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	689b      	ldr	r3, [r3, #8]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d102      	bne.n	8000b94 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b8e:	2304      	movs	r3, #4
 8000b90:	623b      	str	r3, [r7, #32]
          break;
 8000b92:	e013      	b.n	8000bbc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	689b      	ldr	r3, [r3, #8]
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d105      	bne.n	8000ba8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b9c:	2308      	movs	r3, #8
 8000b9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	69fa      	ldr	r2, [r7, #28]
 8000ba4:	611a      	str	r2, [r3, #16]
          break;
 8000ba6:	e009      	b.n	8000bbc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000ba8:	2308      	movs	r3, #8
 8000baa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	69fa      	ldr	r2, [r7, #28]
 8000bb0:	615a      	str	r2, [r3, #20]
          break;
 8000bb2:	e003      	b.n	8000bbc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
          break;
 8000bb8:	e000      	b.n	8000bbc <HAL_GPIO_Init+0x130>
          break;
 8000bba:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	2bff      	cmp	r3, #255	@ 0xff
 8000bc0:	d801      	bhi.n	8000bc6 <HAL_GPIO_Init+0x13a>
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	e001      	b.n	8000bca <HAL_GPIO_Init+0x13e>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	3304      	adds	r3, #4
 8000bca:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000bcc:	69bb      	ldr	r3, [r7, #24]
 8000bce:	2bff      	cmp	r3, #255	@ 0xff
 8000bd0:	d802      	bhi.n	8000bd8 <HAL_GPIO_Init+0x14c>
 8000bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd4:	009b      	lsls	r3, r3, #2
 8000bd6:	e002      	b.n	8000bde <HAL_GPIO_Init+0x152>
 8000bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bda:	3b08      	subs	r3, #8
 8000bdc:	009b      	lsls	r3, r3, #2
 8000bde:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	210f      	movs	r1, #15
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bec:	43db      	mvns	r3, r3
 8000bee:	401a      	ands	r2, r3
 8000bf0:	6a39      	ldr	r1, [r7, #32]
 8000bf2:	693b      	ldr	r3, [r7, #16]
 8000bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf8:	431a      	orrs	r2, r3
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	685b      	ldr	r3, [r3, #4]
 8000c02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	f000 80b1 	beq.w	8000d6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c0c:	4b4d      	ldr	r3, [pc, #308]	@ (8000d44 <HAL_GPIO_Init+0x2b8>)
 8000c0e:	699b      	ldr	r3, [r3, #24]
 8000c10:	4a4c      	ldr	r2, [pc, #304]	@ (8000d44 <HAL_GPIO_Init+0x2b8>)
 8000c12:	f043 0301 	orr.w	r3, r3, #1
 8000c16:	6193      	str	r3, [r2, #24]
 8000c18:	4b4a      	ldr	r3, [pc, #296]	@ (8000d44 <HAL_GPIO_Init+0x2b8>)
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	f003 0301 	and.w	r3, r3, #1
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c24:	4a48      	ldr	r2, [pc, #288]	@ (8000d48 <HAL_GPIO_Init+0x2bc>)
 8000c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c28:	089b      	lsrs	r3, r3, #2
 8000c2a:	3302      	adds	r3, #2
 8000c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c30:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c34:	f003 0303 	and.w	r3, r3, #3
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	220f      	movs	r2, #15
 8000c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c40:	43db      	mvns	r3, r3
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	4013      	ands	r3, r2
 8000c46:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4a40      	ldr	r2, [pc, #256]	@ (8000d4c <HAL_GPIO_Init+0x2c0>)
 8000c4c:	4293      	cmp	r3, r2
 8000c4e:	d013      	beq.n	8000c78 <HAL_GPIO_Init+0x1ec>
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4a3f      	ldr	r2, [pc, #252]	@ (8000d50 <HAL_GPIO_Init+0x2c4>)
 8000c54:	4293      	cmp	r3, r2
 8000c56:	d00d      	beq.n	8000c74 <HAL_GPIO_Init+0x1e8>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4a3e      	ldr	r2, [pc, #248]	@ (8000d54 <HAL_GPIO_Init+0x2c8>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d007      	beq.n	8000c70 <HAL_GPIO_Init+0x1e4>
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	4a3d      	ldr	r2, [pc, #244]	@ (8000d58 <HAL_GPIO_Init+0x2cc>)
 8000c64:	4293      	cmp	r3, r2
 8000c66:	d101      	bne.n	8000c6c <HAL_GPIO_Init+0x1e0>
 8000c68:	2303      	movs	r3, #3
 8000c6a:	e006      	b.n	8000c7a <HAL_GPIO_Init+0x1ee>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	e004      	b.n	8000c7a <HAL_GPIO_Init+0x1ee>
 8000c70:	2302      	movs	r3, #2
 8000c72:	e002      	b.n	8000c7a <HAL_GPIO_Init+0x1ee>
 8000c74:	2301      	movs	r3, #1
 8000c76:	e000      	b.n	8000c7a <HAL_GPIO_Init+0x1ee>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c7c:	f002 0203 	and.w	r2, r2, #3
 8000c80:	0092      	lsls	r2, r2, #2
 8000c82:	4093      	lsls	r3, r2
 8000c84:	68fa      	ldr	r2, [r7, #12]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c8a:	492f      	ldr	r1, [pc, #188]	@ (8000d48 <HAL_GPIO_Init+0x2bc>)
 8000c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c8e:	089b      	lsrs	r3, r3, #2
 8000c90:	3302      	adds	r3, #2
 8000c92:	68fa      	ldr	r2, [r7, #12]
 8000c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d006      	beq.n	8000cb2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ca4:	4b2d      	ldr	r3, [pc, #180]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000ca6:	689a      	ldr	r2, [r3, #8]
 8000ca8:	492c      	ldr	r1, [pc, #176]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000caa:	69bb      	ldr	r3, [r7, #24]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	608b      	str	r3, [r1, #8]
 8000cb0:	e006      	b.n	8000cc0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000cb2:	4b2a      	ldr	r3, [pc, #168]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000cb4:	689a      	ldr	r2, [r3, #8]
 8000cb6:	69bb      	ldr	r3, [r7, #24]
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	4928      	ldr	r1, [pc, #160]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d006      	beq.n	8000cda <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ccc:	4b23      	ldr	r3, [pc, #140]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000cce:	68da      	ldr	r2, [r3, #12]
 8000cd0:	4922      	ldr	r1, [pc, #136]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	60cb      	str	r3, [r1, #12]
 8000cd8:	e006      	b.n	8000ce8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000cda:	4b20      	ldr	r3, [pc, #128]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000cdc:	68da      	ldr	r2, [r3, #12]
 8000cde:	69bb      	ldr	r3, [r7, #24]
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	491e      	ldr	r1, [pc, #120]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685b      	ldr	r3, [r3, #4]
 8000cec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d006      	beq.n	8000d02 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000cf4:	4b19      	ldr	r3, [pc, #100]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000cf6:	685a      	ldr	r2, [r3, #4]
 8000cf8:	4918      	ldr	r1, [pc, #96]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	604b      	str	r3, [r1, #4]
 8000d00:	e006      	b.n	8000d10 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d02:	4b16      	ldr	r3, [pc, #88]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000d04:	685a      	ldr	r2, [r3, #4]
 8000d06:	69bb      	ldr	r3, [r7, #24]
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	4914      	ldr	r1, [pc, #80]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d021      	beq.n	8000d60 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	490e      	ldr	r1, [pc, #56]	@ (8000d5c <HAL_GPIO_Init+0x2d0>)
 8000d22:	69bb      	ldr	r3, [r7, #24]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	600b      	str	r3, [r1, #0]
 8000d28:	e021      	b.n	8000d6e <HAL_GPIO_Init+0x2e2>
 8000d2a:	bf00      	nop
 8000d2c:	10320000 	.word	0x10320000
 8000d30:	10310000 	.word	0x10310000
 8000d34:	10220000 	.word	0x10220000
 8000d38:	10210000 	.word	0x10210000
 8000d3c:	10120000 	.word	0x10120000
 8000d40:	10110000 	.word	0x10110000
 8000d44:	40021000 	.word	0x40021000
 8000d48:	40010000 	.word	0x40010000
 8000d4c:	40010800 	.word	0x40010800
 8000d50:	40010c00 	.word	0x40010c00
 8000d54:	40011000 	.word	0x40011000
 8000d58:	40011400 	.word	0x40011400
 8000d5c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d60:	4b0b      	ldr	r3, [pc, #44]	@ (8000d90 <HAL_GPIO_Init+0x304>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	43db      	mvns	r3, r3
 8000d68:	4909      	ldr	r1, [pc, #36]	@ (8000d90 <HAL_GPIO_Init+0x304>)
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d70:	3301      	adds	r3, #1
 8000d72:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	681a      	ldr	r2, [r3, #0]
 8000d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	f47f ae8e 	bne.w	8000aa0 <HAL_GPIO_Init+0x14>
  }
}
 8000d84:	bf00      	nop
 8000d86:	bf00      	nop
 8000d88:	372c      	adds	r7, #44	@ 0x2c
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr
 8000d90:	40010400 	.word	0x40010400

08000d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
 8000d9c:	460b      	mov	r3, r1
 8000d9e:	807b      	strh	r3, [r7, #2]
 8000da0:	4613      	mov	r3, r2
 8000da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000da4:	787b      	ldrb	r3, [r7, #1]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d003      	beq.n	8000db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000daa:	887a      	ldrh	r2, [r7, #2]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000db0:	e003      	b.n	8000dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000db2:	887b      	ldrh	r3, [r7, #2]
 8000db4:	041a      	lsls	r2, r3, #16
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	611a      	str	r2, [r3, #16]
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr

08000dc4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000dd6:	887a      	ldrh	r2, [r7, #2]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	041a      	lsls	r2, r3, #16
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	43d9      	mvns	r1, r3
 8000de2:	887b      	ldrh	r3, [r7, #2]
 8000de4:	400b      	ands	r3, r1
 8000de6:	431a      	orrs	r2, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	611a      	str	r2, [r3, #16]
}
 8000dec:	bf00      	nop
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bc80      	pop	{r7}
 8000df4:	4770      	bx	lr
	...

08000df8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b084      	sub	sp, #16
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d101      	bne.n	8000e0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	e12b      	b.n	8001062 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d106      	bne.n	8000e24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000e1e:	6878      	ldr	r0, [r7, #4]
 8000e20:	f7ff fab4 	bl	800038c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2224      	movs	r2, #36	@ 0x24
 8000e28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f022 0201 	bic.w	r2, r2, #1
 8000e3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000e4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000e5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000e5c:	f001 fbfc 	bl	8002658 <HAL_RCC_GetPCLK1Freq>
 8000e60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	4a81      	ldr	r2, [pc, #516]	@ (800106c <HAL_I2C_Init+0x274>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d807      	bhi.n	8000e7c <HAL_I2C_Init+0x84>
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	4a80      	ldr	r2, [pc, #512]	@ (8001070 <HAL_I2C_Init+0x278>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	bf94      	ite	ls
 8000e74:	2301      	movls	r3, #1
 8000e76:	2300      	movhi	r3, #0
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	e006      	b.n	8000e8a <HAL_I2C_Init+0x92>
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4a7d      	ldr	r2, [pc, #500]	@ (8001074 <HAL_I2C_Init+0x27c>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	bf94      	ite	ls
 8000e84:	2301      	movls	r3, #1
 8000e86:	2300      	movhi	r3, #0
 8000e88:	b2db      	uxtb	r3, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d001      	beq.n	8000e92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e0e7      	b.n	8001062 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4a78      	ldr	r2, [pc, #480]	@ (8001078 <HAL_I2C_Init+0x280>)
 8000e96:	fba2 2303 	umull	r2, r3, r2, r3
 8000e9a:	0c9b      	lsrs	r3, r3, #18
 8000e9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	68ba      	ldr	r2, [r7, #8]
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	6a1b      	ldr	r3, [r3, #32]
 8000eb8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	4a6a      	ldr	r2, [pc, #424]	@ (800106c <HAL_I2C_Init+0x274>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d802      	bhi.n	8000ecc <HAL_I2C_Init+0xd4>
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	e009      	b.n	8000ee0 <HAL_I2C_Init+0xe8>
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000ed2:	fb02 f303 	mul.w	r3, r2, r3
 8000ed6:	4a69      	ldr	r2, [pc, #420]	@ (800107c <HAL_I2C_Init+0x284>)
 8000ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8000edc:	099b      	lsrs	r3, r3, #6
 8000ede:	3301      	adds	r3, #1
 8000ee0:	687a      	ldr	r2, [r7, #4]
 8000ee2:	6812      	ldr	r2, [r2, #0]
 8000ee4:	430b      	orrs	r3, r1
 8000ee6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	69db      	ldr	r3, [r3, #28]
 8000eee:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000ef2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	495c      	ldr	r1, [pc, #368]	@ (800106c <HAL_I2C_Init+0x274>)
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d819      	bhi.n	8000f34 <HAL_I2C_Init+0x13c>
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	1e59      	subs	r1, r3, #1
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f0e:	1c59      	adds	r1, r3, #1
 8000f10:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000f14:	400b      	ands	r3, r1
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d00a      	beq.n	8000f30 <HAL_I2C_Init+0x138>
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	1e59      	subs	r1, r3, #1
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f28:	3301      	adds	r3, #1
 8000f2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f2e:	e051      	b.n	8000fd4 <HAL_I2C_Init+0x1dc>
 8000f30:	2304      	movs	r3, #4
 8000f32:	e04f      	b.n	8000fd4 <HAL_I2C_Init+0x1dc>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	689b      	ldr	r3, [r3, #8]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d111      	bne.n	8000f60 <HAL_I2C_Init+0x168>
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	1e58      	subs	r0, r3, #1
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	6859      	ldr	r1, [r3, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	440b      	add	r3, r1
 8000f4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f4e:	3301      	adds	r3, #1
 8000f50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	bf0c      	ite	eq
 8000f58:	2301      	moveq	r3, #1
 8000f5a:	2300      	movne	r3, #0
 8000f5c:	b2db      	uxtb	r3, r3
 8000f5e:	e012      	b.n	8000f86 <HAL_I2C_Init+0x18e>
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	1e58      	subs	r0, r3, #1
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6859      	ldr	r1, [r3, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	0099      	lsls	r1, r3, #2
 8000f70:	440b      	add	r3, r1
 8000f72:	fbb0 f3f3 	udiv	r3, r0, r3
 8000f76:	3301      	adds	r3, #1
 8000f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	bf0c      	ite	eq
 8000f80:	2301      	moveq	r3, #1
 8000f82:	2300      	movne	r3, #0
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d001      	beq.n	8000f8e <HAL_I2C_Init+0x196>
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e022      	b.n	8000fd4 <HAL_I2C_Init+0x1dc>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d10e      	bne.n	8000fb4 <HAL_I2C_Init+0x1bc>
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	1e58      	subs	r0, r3, #1
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6859      	ldr	r1, [r3, #4]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	440b      	add	r3, r1
 8000fa4:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fa8:	3301      	adds	r3, #1
 8000faa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000fb2:	e00f      	b.n	8000fd4 <HAL_I2C_Init+0x1dc>
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	1e58      	subs	r0, r3, #1
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6859      	ldr	r1, [r3, #4]
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	0099      	lsls	r1, r3, #2
 8000fc4:	440b      	add	r3, r1
 8000fc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8000fca:	3301      	adds	r3, #1
 8000fcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000fd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	6809      	ldr	r1, [r1, #0]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	69da      	ldr	r2, [r3, #28]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6a1b      	ldr	r3, [r3, #32]
 8000fee:	431a      	orrs	r2, r3
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	430a      	orrs	r2, r1
 8000ff6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001002:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001006:	687a      	ldr	r2, [r7, #4]
 8001008:	6911      	ldr	r1, [r2, #16]
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	68d2      	ldr	r2, [r2, #12]
 800100e:	4311      	orrs	r1, r2
 8001010:	687a      	ldr	r2, [r7, #4]
 8001012:	6812      	ldr	r2, [r2, #0]
 8001014:	430b      	orrs	r3, r1
 8001016:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	695a      	ldr	r2, [r3, #20]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	699b      	ldr	r3, [r3, #24]
 800102a:	431a      	orrs	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	430a      	orrs	r2, r1
 8001032:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f042 0201 	orr.w	r2, r2, #1
 8001042:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2220      	movs	r2, #32
 800104e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3710      	adds	r7, #16
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	000186a0 	.word	0x000186a0
 8001070:	001e847f 	.word	0x001e847f
 8001074:	003d08ff 	.word	0x003d08ff
 8001078:	431bde83 	.word	0x431bde83
 800107c:	10624dd3 	.word	0x10624dd3

08001080 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b088      	sub	sp, #32
 8001084:	af02      	add	r7, sp, #8
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	4608      	mov	r0, r1
 800108a:	4611      	mov	r1, r2
 800108c:	461a      	mov	r2, r3
 800108e:	4603      	mov	r3, r0
 8001090:	817b      	strh	r3, [r7, #10]
 8001092:	460b      	mov	r3, r1
 8001094:	813b      	strh	r3, [r7, #8]
 8001096:	4613      	mov	r3, r2
 8001098:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800109a:	f7ff fc09 	bl	80008b0 <HAL_GetTick>
 800109e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80010a6:	b2db      	uxtb	r3, r3
 80010a8:	2b20      	cmp	r3, #32
 80010aa:	f040 80d9 	bne.w	8001260 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80010ae:	697b      	ldr	r3, [r7, #20]
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	2319      	movs	r3, #25
 80010b4:	2201      	movs	r2, #1
 80010b6:	496d      	ldr	r1, [pc, #436]	@ (800126c <HAL_I2C_Mem_Write+0x1ec>)
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f000 fccd 	bl	8001a58 <I2C_WaitOnFlagUntilTimeout>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80010c4:	2302      	movs	r3, #2
 80010c6:	e0cc      	b.n	8001262 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80010ce:	2b01      	cmp	r3, #1
 80010d0:	d101      	bne.n	80010d6 <HAL_I2C_Mem_Write+0x56>
 80010d2:	2302      	movs	r3, #2
 80010d4:	e0c5      	b.n	8001262 <HAL_I2C_Mem_Write+0x1e2>
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 0301 	and.w	r3, r3, #1
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d007      	beq.n	80010fc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f042 0201 	orr.w	r2, r2, #1
 80010fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800110a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	2221      	movs	r2, #33	@ 0x21
 8001110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2240      	movs	r2, #64	@ 0x40
 8001118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	2200      	movs	r2, #0
 8001120:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	6a3a      	ldr	r2, [r7, #32]
 8001126:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800112c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001132:	b29a      	uxth	r2, r3
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4a4d      	ldr	r2, [pc, #308]	@ (8001270 <HAL_I2C_Mem_Write+0x1f0>)
 800113c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800113e:	88f8      	ldrh	r0, [r7, #6]
 8001140:	893a      	ldrh	r2, [r7, #8]
 8001142:	8979      	ldrh	r1, [r7, #10]
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	9301      	str	r3, [sp, #4]
 8001148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	4603      	mov	r3, r0
 800114e:	68f8      	ldr	r0, [r7, #12]
 8001150:	f000 fb04 	bl	800175c <I2C_RequestMemoryWrite>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d052      	beq.n	8001200 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e081      	b.n	8001262 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800115e:	697a      	ldr	r2, [r7, #20]
 8001160:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001162:	68f8      	ldr	r0, [r7, #12]
 8001164:	f000 fd92 	bl	8001c8c <I2C_WaitOnTXEFlagUntilTimeout>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d00d      	beq.n	800118a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001172:	2b04      	cmp	r3, #4
 8001174:	d107      	bne.n	8001186 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001184:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e06b      	b.n	8001262 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800118e:	781a      	ldrb	r2, [r3, #0]
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119a:	1c5a      	adds	r2, r3, #1
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011a4:	3b01      	subs	r3, #1
 80011a6:	b29a      	uxth	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011b0:	b29b      	uxth	r3, r3
 80011b2:	3b01      	subs	r3, #1
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	695b      	ldr	r3, [r3, #20]
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	2b04      	cmp	r3, #4
 80011c6:	d11b      	bne.n	8001200 <HAL_I2C_Mem_Write+0x180>
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d017      	beq.n	8001200 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011d4:	781a      	ldrb	r2, [r3, #0]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011e0:	1c5a      	adds	r2, r3, #1
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80011ea:	3b01      	subs	r3, #1
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80011f6:	b29b      	uxth	r3, r3
 80011f8:	3b01      	subs	r3, #1
 80011fa:	b29a      	uxth	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1aa      	bne.n	800115e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001208:	697a      	ldr	r2, [r7, #20]
 800120a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800120c:	68f8      	ldr	r0, [r7, #12]
 800120e:	f000 fd85 	bl	8001d1c <I2C_WaitOnBTFFlagUntilTimeout>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d00d      	beq.n	8001234 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800121c:	2b04      	cmp	r3, #4
 800121e:	d107      	bne.n	8001230 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800122e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e016      	b.n	8001262 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001242:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	2220      	movs	r2, #32
 8001248:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	2200      	movs	r2, #0
 8001250:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2200      	movs	r2, #0
 8001258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800125c:	2300      	movs	r3, #0
 800125e:	e000      	b.n	8001262 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001260:	2302      	movs	r3, #2
  }
}
 8001262:	4618      	mov	r0, r3
 8001264:	3718      	adds	r7, #24
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	00100002 	.word	0x00100002
 8001270:	ffff0000 	.word	0xffff0000

08001274 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08c      	sub	sp, #48	@ 0x30
 8001278:	af02      	add	r7, sp, #8
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	4608      	mov	r0, r1
 800127e:	4611      	mov	r1, r2
 8001280:	461a      	mov	r2, r3
 8001282:	4603      	mov	r3, r0
 8001284:	817b      	strh	r3, [r7, #10]
 8001286:	460b      	mov	r3, r1
 8001288:	813b      	strh	r3, [r7, #8]
 800128a:	4613      	mov	r3, r2
 800128c:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800128e:	2300      	movs	r3, #0
 8001290:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001292:	f7ff fb0d 	bl	80008b0 <HAL_GetTick>
 8001296:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	2b20      	cmp	r3, #32
 80012a2:	f040 8250 	bne.w	8001746 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80012a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2319      	movs	r3, #25
 80012ac:	2201      	movs	r2, #1
 80012ae:	4982      	ldr	r1, [pc, #520]	@ (80014b8 <HAL_I2C_Mem_Read+0x244>)
 80012b0:	68f8      	ldr	r0, [r7, #12]
 80012b2:	f000 fbd1 	bl	8001a58 <I2C_WaitOnFlagUntilTimeout>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80012bc:	2302      	movs	r3, #2
 80012be:	e243      	b.n	8001748 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d101      	bne.n	80012ce <HAL_I2C_Mem_Read+0x5a>
 80012ca:	2302      	movs	r3, #2
 80012cc:	e23c      	b.n	8001748 <HAL_I2C_Mem_Read+0x4d4>
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2201      	movs	r2, #1
 80012d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d007      	beq.n	80012f4 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f042 0201 	orr.w	r2, r2, #1
 80012f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001302:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2222      	movs	r2, #34	@ 0x22
 8001308:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	2240      	movs	r2, #64	@ 0x40
 8001310:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	2200      	movs	r2, #0
 8001318:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800131e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8001324:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800132a:	b29a      	uxth	r2, r3
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	4a62      	ldr	r2, [pc, #392]	@ (80014bc <HAL_I2C_Mem_Read+0x248>)
 8001334:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001336:	88f8      	ldrh	r0, [r7, #6]
 8001338:	893a      	ldrh	r2, [r7, #8]
 800133a:	8979      	ldrh	r1, [r7, #10]
 800133c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800133e:	9301      	str	r3, [sp, #4]
 8001340:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	4603      	mov	r3, r0
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f000 fa9e 	bl	8001888 <I2C_RequestMemoryRead>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e1f8      	b.n	8001748 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800135a:	2b00      	cmp	r3, #0
 800135c:	d113      	bne.n	8001386 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	695b      	ldr	r3, [r3, #20]
 8001368:	61fb      	str	r3, [r7, #28]
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	699b      	ldr	r3, [r3, #24]
 8001370:	61fb      	str	r3, [r7, #28]
 8001372:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001382:	601a      	str	r2, [r3, #0]
 8001384:	e1cc      	b.n	8001720 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800138a:	2b01      	cmp	r3, #1
 800138c:	d11e      	bne.n	80013cc <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800139c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800139e:	b672      	cpsid	i
}
 80013a0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013a2:	2300      	movs	r3, #0
 80013a4:	61bb      	str	r3, [r7, #24]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	695b      	ldr	r3, [r3, #20]
 80013ac:	61bb      	str	r3, [r7, #24]
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	61bb      	str	r3, [r7, #24]
 80013b6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80013c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80013c8:	b662      	cpsie	i
}
 80013ca:	e035      	b.n	8001438 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d11e      	bne.n	8001412 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80013e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80013e4:	b672      	cpsid	i
}
 80013e6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	695b      	ldr	r3, [r3, #20]
 80013f2:	617b      	str	r3, [r7, #20]
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800140c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800140e:	b662      	cpsie	i
}
 8001410:	e012      	b.n	8001438 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001420:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	695b      	ldr	r3, [r3, #20]
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	699b      	ldr	r3, [r3, #24]
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001438:	e172      	b.n	8001720 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800143e:	2b03      	cmp	r3, #3
 8001440:	f200 811f 	bhi.w	8001682 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001448:	2b01      	cmp	r3, #1
 800144a:	d123      	bne.n	8001494 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800144c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800144e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001450:	68f8      	ldr	r0, [r7, #12]
 8001452:	f000 fcab 	bl	8001dac <I2C_WaitOnRXNEFlagUntilTimeout>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800145c:	2301      	movs	r3, #1
 800145e:	e173      	b.n	8001748 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	691a      	ldr	r2, [r3, #16]
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800146a:	b2d2      	uxtb	r2, r2
 800146c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001472:	1c5a      	adds	r2, r3, #1
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800147c:	3b01      	subs	r3, #1
 800147e:	b29a      	uxth	r2, r3
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001488:	b29b      	uxth	r3, r3
 800148a:	3b01      	subs	r3, #1
 800148c:	b29a      	uxth	r2, r3
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001492:	e145      	b.n	8001720 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001498:	2b02      	cmp	r3, #2
 800149a:	d152      	bne.n	8001542 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800149c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014a2:	2200      	movs	r2, #0
 80014a4:	4906      	ldr	r1, [pc, #24]	@ (80014c0 <HAL_I2C_Mem_Read+0x24c>)
 80014a6:	68f8      	ldr	r0, [r7, #12]
 80014a8:	f000 fad6 	bl	8001a58 <I2C_WaitOnFlagUntilTimeout>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d008      	beq.n	80014c4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e148      	b.n	8001748 <HAL_I2C_Mem_Read+0x4d4>
 80014b6:	bf00      	nop
 80014b8:	00100002 	.word	0x00100002
 80014bc:	ffff0000 	.word	0xffff0000
 80014c0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 80014c4:	b672      	cpsid	i
}
 80014c6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681a      	ldr	r2, [r3, #0]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	691a      	ldr	r2, [r3, #16]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014e2:	b2d2      	uxtb	r2, r2
 80014e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ea:	1c5a      	adds	r2, r3, #1
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80014f4:	3b01      	subs	r3, #1
 80014f6:	b29a      	uxth	r2, r3
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001500:	b29b      	uxth	r3, r3
 8001502:	3b01      	subs	r3, #1
 8001504:	b29a      	uxth	r2, r3
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800150a:	b662      	cpsie	i
}
 800150c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	691a      	ldr	r2, [r3, #16]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001520:	1c5a      	adds	r2, r3, #1
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800152a:	3b01      	subs	r3, #1
 800152c:	b29a      	uxth	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001536:	b29b      	uxth	r3, r3
 8001538:	3b01      	subs	r3, #1
 800153a:	b29a      	uxth	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001540:	e0ee      	b.n	8001720 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001542:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001548:	2200      	movs	r2, #0
 800154a:	4981      	ldr	r1, [pc, #516]	@ (8001750 <HAL_I2C_Mem_Read+0x4dc>)
 800154c:	68f8      	ldr	r0, [r7, #12]
 800154e:	f000 fa83 	bl	8001a58 <I2C_WaitOnFlagUntilTimeout>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e0f5      	b.n	8001748 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800156a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800156c:	b672      	cpsid	i
}
 800156e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	691a      	ldr	r2, [r3, #16]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157a:	b2d2      	uxtb	r2, r2
 800157c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001582:	1c5a      	adds	r2, r3, #1
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800158c:	3b01      	subs	r3, #1
 800158e:	b29a      	uxth	r2, r3
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001598:	b29b      	uxth	r3, r3
 800159a:	3b01      	subs	r3, #1
 800159c:	b29a      	uxth	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80015a2:	4b6c      	ldr	r3, [pc, #432]	@ (8001754 <HAL_I2C_Mem_Read+0x4e0>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	08db      	lsrs	r3, r3, #3
 80015a8:	4a6b      	ldr	r2, [pc, #428]	@ (8001758 <HAL_I2C_Mem_Read+0x4e4>)
 80015aa:	fba2 2303 	umull	r2, r3, r2, r3
 80015ae:	0a1a      	lsrs	r2, r3, #8
 80015b0:	4613      	mov	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	00da      	lsls	r2, r3, #3
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 80015bc:	6a3b      	ldr	r3, [r7, #32]
 80015be:	3b01      	subs	r3, #1
 80015c0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 80015c2:	6a3b      	ldr	r3, [r7, #32]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d118      	bne.n	80015fa <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	2200      	movs	r2, #0
 80015cc:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2220      	movs	r2, #32
 80015d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2200      	movs	r2, #0
 80015da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e2:	f043 0220 	orr.w	r2, r3, #32
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80015ea:	b662      	cpsie	i
}
 80015ec:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e0a6      	b.n	8001748 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	2b04      	cmp	r3, #4
 8001606:	d1d9      	bne.n	80015bc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001616:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	691a      	ldr	r2, [r3, #16]
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001622:	b2d2      	uxtb	r2, r2
 8001624:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162a:	1c5a      	adds	r2, r3, #1
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001634:	3b01      	subs	r3, #1
 8001636:	b29a      	uxth	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001640:	b29b      	uxth	r3, r3
 8001642:	3b01      	subs	r3, #1
 8001644:	b29a      	uxth	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800164a:	b662      	cpsie	i
}
 800164c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	691a      	ldr	r2, [r3, #16]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001658:	b2d2      	uxtb	r2, r2
 800165a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001660:	1c5a      	adds	r2, r3, #1
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800166a:	3b01      	subs	r3, #1
 800166c:	b29a      	uxth	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001676:	b29b      	uxth	r3, r3
 8001678:	3b01      	subs	r3, #1
 800167a:	b29a      	uxth	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001680:	e04e      	b.n	8001720 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001682:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001684:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001686:	68f8      	ldr	r0, [r7, #12]
 8001688:	f000 fb90 	bl	8001dac <I2C_WaitOnRXNEFlagUntilTimeout>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e058      	b.n	8001748 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	691a      	ldr	r2, [r3, #16]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a0:	b2d2      	uxtb	r2, r2
 80016a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a8:	1c5a      	adds	r2, r3, #1
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016b2:	3b01      	subs	r3, #1
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016be:	b29b      	uxth	r3, r3
 80016c0:	3b01      	subs	r3, #1
 80016c2:	b29a      	uxth	r2, r3
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	695b      	ldr	r3, [r3, #20]
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	d124      	bne.n	8001720 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016da:	2b03      	cmp	r3, #3
 80016dc:	d107      	bne.n	80016ee <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80016ec:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	691a      	ldr	r2, [r3, #16]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016f8:	b2d2      	uxtb	r2, r2
 80016fa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001700:	1c5a      	adds	r2, r3, #1
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800170a:	3b01      	subs	r3, #1
 800170c:	b29a      	uxth	r2, r3
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001716:	b29b      	uxth	r3, r3
 8001718:	3b01      	subs	r3, #1
 800171a:	b29a      	uxth	r2, r3
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001724:	2b00      	cmp	r3, #0
 8001726:	f47f ae88 	bne.w	800143a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2220      	movs	r2, #32
 800172e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2200      	movs	r2, #0
 8001736:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	2200      	movs	r2, #0
 800173e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001742:	2300      	movs	r3, #0
 8001744:	e000      	b.n	8001748 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8001746:	2302      	movs	r3, #2
  }
}
 8001748:	4618      	mov	r0, r3
 800174a:	3728      	adds	r7, #40	@ 0x28
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	00010004 	.word	0x00010004
 8001754:	20000000 	.word	0x20000000
 8001758:	14f8b589 	.word	0x14f8b589

0800175c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b088      	sub	sp, #32
 8001760:	af02      	add	r7, sp, #8
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	4608      	mov	r0, r1
 8001766:	4611      	mov	r1, r2
 8001768:	461a      	mov	r2, r3
 800176a:	4603      	mov	r3, r0
 800176c:	817b      	strh	r3, [r7, #10]
 800176e:	460b      	mov	r3, r1
 8001770:	813b      	strh	r3, [r7, #8]
 8001772:	4613      	mov	r3, r2
 8001774:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001784:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	6a3b      	ldr	r3, [r7, #32]
 800178c:	2200      	movs	r2, #0
 800178e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001792:	68f8      	ldr	r0, [r7, #12]
 8001794:	f000 f960 	bl	8001a58 <I2C_WaitOnFlagUntilTimeout>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d00d      	beq.n	80017ba <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017ac:	d103      	bne.n	80017b6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80017b6:	2303      	movs	r3, #3
 80017b8:	e05f      	b.n	800187a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017ba:	897b      	ldrh	r3, [r7, #10]
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	461a      	mov	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80017c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017cc:	6a3a      	ldr	r2, [r7, #32]
 80017ce:	492d      	ldr	r1, [pc, #180]	@ (8001884 <I2C_RequestMemoryWrite+0x128>)
 80017d0:	68f8      	ldr	r0, [r7, #12]
 80017d2:	f000 f9bb 	bl	8001b4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e04c      	b.n	800187a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017e0:	2300      	movs	r3, #0
 80017e2:	617b      	str	r3, [r7, #20]
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	695b      	ldr	r3, [r3, #20]
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	699b      	ldr	r3, [r3, #24]
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80017f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80017f8:	6a39      	ldr	r1, [r7, #32]
 80017fa:	68f8      	ldr	r0, [r7, #12]
 80017fc:	f000 fa46 	bl	8001c8c <I2C_WaitOnTXEFlagUntilTimeout>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d00d      	beq.n	8001822 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800180a:	2b04      	cmp	r3, #4
 800180c:	d107      	bne.n	800181e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800181c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e02b      	b.n	800187a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001822:	88fb      	ldrh	r3, [r7, #6]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d105      	bne.n	8001834 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001828:	893b      	ldrh	r3, [r7, #8]
 800182a:	b2da      	uxtb	r2, r3
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	611a      	str	r2, [r3, #16]
 8001832:	e021      	b.n	8001878 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001834:	893b      	ldrh	r3, [r7, #8]
 8001836:	0a1b      	lsrs	r3, r3, #8
 8001838:	b29b      	uxth	r3, r3
 800183a:	b2da      	uxtb	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001842:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001844:	6a39      	ldr	r1, [r7, #32]
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f000 fa20 	bl	8001c8c <I2C_WaitOnTXEFlagUntilTimeout>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d00d      	beq.n	800186e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001856:	2b04      	cmp	r3, #4
 8001858:	d107      	bne.n	800186a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001868:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e005      	b.n	800187a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800186e:	893b      	ldrh	r3, [r7, #8]
 8001870:	b2da      	uxtb	r2, r3
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	00010002 	.word	0x00010002

08001888 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b088      	sub	sp, #32
 800188c:	af02      	add	r7, sp, #8
 800188e:	60f8      	str	r0, [r7, #12]
 8001890:	4608      	mov	r0, r1
 8001892:	4611      	mov	r1, r2
 8001894:	461a      	mov	r2, r3
 8001896:	4603      	mov	r3, r0
 8001898:	817b      	strh	r3, [r7, #10]
 800189a:	460b      	mov	r3, r1
 800189c:	813b      	strh	r3, [r7, #8]
 800189e:	4613      	mov	r3, r2
 80018a0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80018b0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80018c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80018c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	6a3b      	ldr	r3, [r7, #32]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80018ce:	68f8      	ldr	r0, [r7, #12]
 80018d0:	f000 f8c2 	bl	8001a58 <I2C_WaitOnFlagUntilTimeout>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00d      	beq.n	80018f6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018e8:	d103      	bne.n	80018f2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80018f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e0aa      	b.n	8001a4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018f6:	897b      	ldrh	r3, [r7, #10]
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	461a      	mov	r2, r3
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001904:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001908:	6a3a      	ldr	r2, [r7, #32]
 800190a:	4952      	ldr	r1, [pc, #328]	@ (8001a54 <I2C_RequestMemoryRead+0x1cc>)
 800190c:	68f8      	ldr	r0, [r7, #12]
 800190e:	f000 f91d 	bl	8001b4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001918:	2301      	movs	r3, #1
 800191a:	e097      	b.n	8001a4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	699b      	ldr	r3, [r3, #24]
 800192e:	617b      	str	r3, [r7, #20]
 8001930:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001932:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001934:	6a39      	ldr	r1, [r7, #32]
 8001936:	68f8      	ldr	r0, [r7, #12]
 8001938:	f000 f9a8 	bl	8001c8c <I2C_WaitOnTXEFlagUntilTimeout>
 800193c:	4603      	mov	r3, r0
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00d      	beq.n	800195e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001946:	2b04      	cmp	r3, #4
 8001948:	d107      	bne.n	800195a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001958:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e076      	b.n	8001a4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800195e:	88fb      	ldrh	r3, [r7, #6]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d105      	bne.n	8001970 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001964:	893b      	ldrh	r3, [r7, #8]
 8001966:	b2da      	uxtb	r2, r3
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	611a      	str	r2, [r3, #16]
 800196e:	e021      	b.n	80019b4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001970:	893b      	ldrh	r3, [r7, #8]
 8001972:	0a1b      	lsrs	r3, r3, #8
 8001974:	b29b      	uxth	r3, r3
 8001976:	b2da      	uxtb	r2, r3
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800197e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001980:	6a39      	ldr	r1, [r7, #32]
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f000 f982 	bl	8001c8c <I2C_WaitOnTXEFlagUntilTimeout>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d00d      	beq.n	80019aa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001992:	2b04      	cmp	r3, #4
 8001994:	d107      	bne.n	80019a6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	681a      	ldr	r2, [r3, #0]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e050      	b.n	8001a4c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80019aa:	893b      	ldrh	r3, [r7, #8]
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80019b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019b6:	6a39      	ldr	r1, [r7, #32]
 80019b8:	68f8      	ldr	r0, [r7, #12]
 80019ba:	f000 f967 	bl	8001c8c <I2C_WaitOnTXEFlagUntilTimeout>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d00d      	beq.n	80019e0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	d107      	bne.n	80019dc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019da:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e035      	b.n	8001a4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80019ee:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80019f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019f2:	9300      	str	r3, [sp, #0]
 80019f4:	6a3b      	ldr	r3, [r7, #32]
 80019f6:	2200      	movs	r2, #0
 80019f8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80019fc:	68f8      	ldr	r0, [r7, #12]
 80019fe:	f000 f82b 	bl	8001a58 <I2C_WaitOnFlagUntilTimeout>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00d      	beq.n	8001a24 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a16:	d103      	bne.n	8001a20 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a1e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e013      	b.n	8001a4c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001a24:	897b      	ldrh	r3, [r7, #10]
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	b2da      	uxtb	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a36:	6a3a      	ldr	r2, [r7, #32]
 8001a38:	4906      	ldr	r1, [pc, #24]	@ (8001a54 <I2C_RequestMemoryRead+0x1cc>)
 8001a3a:	68f8      	ldr	r0, [r7, #12]
 8001a3c:	f000 f886 	bl	8001b4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e000      	b.n	8001a4c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3718      	adds	r7, #24
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	00010002 	.word	0x00010002

08001a58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b084      	sub	sp, #16
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	603b      	str	r3, [r7, #0]
 8001a64:	4613      	mov	r3, r2
 8001a66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a68:	e048      	b.n	8001afc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a70:	d044      	beq.n	8001afc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a72:	f7fe ff1d 	bl	80008b0 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	429a      	cmp	r2, r3
 8001a80:	d302      	bcc.n	8001a88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d139      	bne.n	8001afc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	0c1b      	lsrs	r3, r3, #16
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d10d      	bne.n	8001aae <I2C_WaitOnFlagUntilTimeout+0x56>
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	695b      	ldr	r3, [r3, #20]
 8001a98:	43da      	mvns	r2, r3
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	bf0c      	ite	eq
 8001aa4:	2301      	moveq	r3, #1
 8001aa6:	2300      	movne	r3, #0
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	461a      	mov	r2, r3
 8001aac:	e00c      	b.n	8001ac8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	699b      	ldr	r3, [r3, #24]
 8001ab4:	43da      	mvns	r2, r3
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	bf0c      	ite	eq
 8001ac0:	2301      	moveq	r3, #1
 8001ac2:	2300      	movne	r3, #0
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	79fb      	ldrb	r3, [r7, #7]
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d116      	bne.n	8001afc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2220      	movs	r2, #32
 8001ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae8:	f043 0220 	orr.w	r2, r3, #32
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e023      	b.n	8001b44 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	0c1b      	lsrs	r3, r3, #16
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d10d      	bne.n	8001b22 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	43da      	mvns	r2, r3
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	4013      	ands	r3, r2
 8001b12:	b29b      	uxth	r3, r3
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	bf0c      	ite	eq
 8001b18:	2301      	moveq	r3, #1
 8001b1a:	2300      	movne	r3, #0
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	461a      	mov	r2, r3
 8001b20:	e00c      	b.n	8001b3c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	699b      	ldr	r3, [r3, #24]
 8001b28:	43da      	mvns	r2, r3
 8001b2a:	68bb      	ldr	r3, [r7, #8]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	bf0c      	ite	eq
 8001b34:	2301      	moveq	r3, #1
 8001b36:	2300      	movne	r3, #0
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	461a      	mov	r2, r3
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	429a      	cmp	r2, r3
 8001b40:	d093      	beq.n	8001a6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001b42:	2300      	movs	r3, #0
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	3710      	adds	r7, #16
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
 8001b58:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b5a:	e071      	b.n	8001c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b6a:	d123      	bne.n	8001bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b7a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001b84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	2200      	movs	r2, #0
 8001b8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ba0:	f043 0204 	orr.w	r2, r3, #4
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2200      	movs	r2, #0
 8001bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e067      	b.n	8001c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bba:	d041      	beq.n	8001c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bbc:	f7fe fe78 	bl	80008b0 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	d302      	bcc.n	8001bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d136      	bne.n	8001c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	0c1b      	lsrs	r3, r3, #16
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d10c      	bne.n	8001bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	695b      	ldr	r3, [r3, #20]
 8001be2:	43da      	mvns	r2, r3
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	4013      	ands	r3, r2
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	bf14      	ite	ne
 8001bee:	2301      	movne	r3, #1
 8001bf0:	2300      	moveq	r3, #0
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	e00b      	b.n	8001c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	43da      	mvns	r2, r3
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	4013      	ands	r3, r2
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	bf14      	ite	ne
 8001c08:	2301      	movne	r3, #1
 8001c0a:	2300      	moveq	r3, #0
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d016      	beq.n	8001c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2200      	movs	r2, #0
 8001c16:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2c:	f043 0220 	orr.w	r2, r3, #32
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e021      	b.n	8001c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	0c1b      	lsrs	r3, r3, #16
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d10c      	bne.n	8001c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	43da      	mvns	r2, r3
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	4013      	ands	r3, r2
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	bf14      	ite	ne
 8001c5c:	2301      	movne	r3, #1
 8001c5e:	2300      	moveq	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	e00b      	b.n	8001c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	699b      	ldr	r3, [r3, #24]
 8001c6a:	43da      	mvns	r2, r3
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	bf14      	ite	ne
 8001c76:	2301      	movne	r3, #1
 8001c78:	2300      	moveq	r3, #0
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f47f af6d 	bne.w	8001b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	3710      	adds	r7, #16
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b084      	sub	sp, #16
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c98:	e034      	b.n	8001d04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f000 f8e3 	bl	8001e66 <I2C_IsAcknowledgeFailed>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e034      	b.n	8001d14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001caa:	68bb      	ldr	r3, [r7, #8]
 8001cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb0:	d028      	beq.n	8001d04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cb2:	f7fe fdfd 	bl	80008b0 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	68ba      	ldr	r2, [r7, #8]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d302      	bcc.n	8001cc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d11d      	bne.n	8001d04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	695b      	ldr	r3, [r3, #20]
 8001cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001cd2:	2b80      	cmp	r3, #128	@ 0x80
 8001cd4:	d016      	beq.n	8001d04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2220      	movs	r2, #32
 8001ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf0:	f043 0220 	orr.w	r2, r3, #32
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e007      	b.n	8001d14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	695b      	ldr	r3, [r3, #20]
 8001d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d0e:	2b80      	cmp	r3, #128	@ 0x80
 8001d10:	d1c3      	bne.n	8001c9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3710      	adds	r7, #16
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b084      	sub	sp, #16
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	60b9      	str	r1, [r7, #8]
 8001d26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d28:	e034      	b.n	8001d94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 f89b 	bl	8001e66 <I2C_IsAcknowledgeFailed>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e034      	b.n	8001da4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d40:	d028      	beq.n	8001d94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d42:	f7fe fdb5 	bl	80008b0 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	68ba      	ldr	r2, [r7, #8]
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d302      	bcc.n	8001d58 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d11d      	bne.n	8001d94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	f003 0304 	and.w	r3, r3, #4
 8001d62:	2b04      	cmp	r3, #4
 8001d64:	d016      	beq.n	8001d94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2220      	movs	r2, #32
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d80:	f043 0220 	orr.w	r2, r3, #32
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e007      	b.n	8001da4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	f003 0304 	and.w	r3, r3, #4
 8001d9e:	2b04      	cmp	r3, #4
 8001da0:	d1c3      	bne.n	8001d2a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	60f8      	str	r0, [r7, #12]
 8001db4:	60b9      	str	r1, [r7, #8]
 8001db6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001db8:	e049      	b.n	8001e4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	695b      	ldr	r3, [r3, #20]
 8001dc0:	f003 0310 	and.w	r3, r3, #16
 8001dc4:	2b10      	cmp	r3, #16
 8001dc6:	d119      	bne.n	8001dfc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f06f 0210 	mvn.w	r2, #16
 8001dd0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2220      	movs	r2, #32
 8001ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e030      	b.n	8001e5e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dfc:	f7fe fd58 	bl	80008b0 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d302      	bcc.n	8001e12 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d11d      	bne.n	8001e4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e1c:	2b40      	cmp	r3, #64	@ 0x40
 8001e1e:	d016      	beq.n	8001e4e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2200      	movs	r2, #0
 8001e24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2220      	movs	r2, #32
 8001e2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2200      	movs	r2, #0
 8001e32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3a:	f043 0220 	orr.w	r2, r3, #32
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2200      	movs	r2, #0
 8001e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e007      	b.n	8001e5e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e58:	2b40      	cmp	r3, #64	@ 0x40
 8001e5a:	d1ae      	bne.n	8001dba <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001e5c:	2300      	movs	r3, #0
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	695b      	ldr	r3, [r3, #20]
 8001e74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e7c:	d11b      	bne.n	8001eb6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001e86:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2220      	movs	r2, #32
 8001e92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ea2:	f043 0204 	orr.w	r2, r3, #4
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e000      	b.n	8001eb8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	370c      	adds	r7, #12
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bc80      	pop	{r7}
 8001ec0:	4770      	bx	lr
	...

08001ec4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d101      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e272      	b.n	80023bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f003 0301 	and.w	r3, r3, #1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 8087 	beq.w	8001ff2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ee4:	4b92      	ldr	r3, [pc, #584]	@ (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f003 030c 	and.w	r3, r3, #12
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d00c      	beq.n	8001f0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ef0:	4b8f      	ldr	r3, [pc, #572]	@ (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d112      	bne.n	8001f22 <HAL_RCC_OscConfig+0x5e>
 8001efc:	4b8c      	ldr	r3, [pc, #560]	@ (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f08:	d10b      	bne.n	8001f22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f0a:	4b89      	ldr	r3, [pc, #548]	@ (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d06c      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x12c>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d168      	bne.n	8001ff0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e24c      	b.n	80023bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f2a:	d106      	bne.n	8001f3a <HAL_RCC_OscConfig+0x76>
 8001f2c:	4b80      	ldr	r3, [pc, #512]	@ (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a7f      	ldr	r2, [pc, #508]	@ (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001f32:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f36:	6013      	str	r3, [r2, #0]
 8001f38:	e02e      	b.n	8001f98 <HAL_RCC_OscConfig+0xd4>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d10c      	bne.n	8001f5c <HAL_RCC_OscConfig+0x98>
 8001f42:	4b7b      	ldr	r3, [pc, #492]	@ (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a7a      	ldr	r2, [pc, #488]	@ (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001f48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	4b78      	ldr	r3, [pc, #480]	@ (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a77      	ldr	r2, [pc, #476]	@ (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001f54:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f58:	6013      	str	r3, [r2, #0]
 8001f5a:	e01d      	b.n	8001f98 <HAL_RCC_OscConfig+0xd4>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f64:	d10c      	bne.n	8001f80 <HAL_RCC_OscConfig+0xbc>
 8001f66:	4b72      	ldr	r3, [pc, #456]	@ (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a71      	ldr	r2, [pc, #452]	@ (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001f6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f70:	6013      	str	r3, [r2, #0]
 8001f72:	4b6f      	ldr	r3, [pc, #444]	@ (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a6e      	ldr	r2, [pc, #440]	@ (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001f78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	e00b      	b.n	8001f98 <HAL_RCC_OscConfig+0xd4>
 8001f80:	4b6b      	ldr	r3, [pc, #428]	@ (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a6a      	ldr	r2, [pc, #424]	@ (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001f86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f8a:	6013      	str	r3, [r2, #0]
 8001f8c:	4b68      	ldr	r3, [pc, #416]	@ (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a67      	ldr	r2, [pc, #412]	@ (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001f92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d013      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa0:	f7fe fc86 	bl	80008b0 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa8:	f7fe fc82 	bl	80008b0 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b64      	cmp	r3, #100	@ 0x64
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e200      	b.n	80023bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fba:	4b5d      	ldr	r3, [pc, #372]	@ (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0xe4>
 8001fc6:	e014      	b.n	8001ff2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fc8:	f7fe fc72 	bl	80008b0 <HAL_GetTick>
 8001fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd0:	f7fe fc6e 	bl	80008b0 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b64      	cmp	r3, #100	@ 0x64
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e1ec      	b.n	80023bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fe2:	4b53      	ldr	r3, [pc, #332]	@ (8002130 <HAL_RCC_OscConfig+0x26c>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f0      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x10c>
 8001fee:	e000      	b.n	8001ff2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ff0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d063      	beq.n	80020c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ffe:	4b4c      	ldr	r3, [pc, #304]	@ (8002130 <HAL_RCC_OscConfig+0x26c>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 030c 	and.w	r3, r3, #12
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00b      	beq.n	8002022 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800200a:	4b49      	ldr	r3, [pc, #292]	@ (8002130 <HAL_RCC_OscConfig+0x26c>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f003 030c 	and.w	r3, r3, #12
 8002012:	2b08      	cmp	r3, #8
 8002014:	d11c      	bne.n	8002050 <HAL_RCC_OscConfig+0x18c>
 8002016:	4b46      	ldr	r3, [pc, #280]	@ (8002130 <HAL_RCC_OscConfig+0x26c>)
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d116      	bne.n	8002050 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002022:	4b43      	ldr	r3, [pc, #268]	@ (8002130 <HAL_RCC_OscConfig+0x26c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0302 	and.w	r3, r3, #2
 800202a:	2b00      	cmp	r3, #0
 800202c:	d005      	beq.n	800203a <HAL_RCC_OscConfig+0x176>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d001      	beq.n	800203a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002036:	2301      	movs	r3, #1
 8002038:	e1c0      	b.n	80023bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800203a:	4b3d      	ldr	r3, [pc, #244]	@ (8002130 <HAL_RCC_OscConfig+0x26c>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	00db      	lsls	r3, r3, #3
 8002048:	4939      	ldr	r1, [pc, #228]	@ (8002130 <HAL_RCC_OscConfig+0x26c>)
 800204a:	4313      	orrs	r3, r2
 800204c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800204e:	e03a      	b.n	80020c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691b      	ldr	r3, [r3, #16]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d020      	beq.n	800209a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002058:	4b36      	ldr	r3, [pc, #216]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 800205a:	2201      	movs	r2, #1
 800205c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800205e:	f7fe fc27 	bl	80008b0 <HAL_GetTick>
 8002062:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002066:	f7fe fc23 	bl	80008b0 <HAL_GetTick>
 800206a:	4602      	mov	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e1a1      	b.n	80023bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002078:	4b2d      	ldr	r3, [pc, #180]	@ (8002130 <HAL_RCC_OscConfig+0x26c>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f003 0302 	and.w	r3, r3, #2
 8002080:	2b00      	cmp	r3, #0
 8002082:	d0f0      	beq.n	8002066 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002084:	4b2a      	ldr	r3, [pc, #168]	@ (8002130 <HAL_RCC_OscConfig+0x26c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	4927      	ldr	r1, [pc, #156]	@ (8002130 <HAL_RCC_OscConfig+0x26c>)
 8002094:	4313      	orrs	r3, r2
 8002096:	600b      	str	r3, [r1, #0]
 8002098:	e015      	b.n	80020c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800209a:	4b26      	ldr	r3, [pc, #152]	@ (8002134 <HAL_RCC_OscConfig+0x270>)
 800209c:	2200      	movs	r2, #0
 800209e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a0:	f7fe fc06 	bl	80008b0 <HAL_GetTick>
 80020a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a6:	e008      	b.n	80020ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020a8:	f7fe fc02 	bl	80008b0 <HAL_GetTick>
 80020ac:	4602      	mov	r2, r0
 80020ae:	693b      	ldr	r3, [r7, #16]
 80020b0:	1ad3      	subs	r3, r2, r3
 80020b2:	2b02      	cmp	r3, #2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e180      	b.n	80023bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002130 <HAL_RCC_OscConfig+0x26c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f0      	bne.n	80020a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d03a      	beq.n	8002148 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d019      	beq.n	800210e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020da:	4b17      	ldr	r3, [pc, #92]	@ (8002138 <HAL_RCC_OscConfig+0x274>)
 80020dc:	2201      	movs	r2, #1
 80020de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e0:	f7fe fbe6 	bl	80008b0 <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e6:	e008      	b.n	80020fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020e8:	f7fe fbe2 	bl	80008b0 <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	2b02      	cmp	r3, #2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e160      	b.n	80023bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002130 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d0f0      	beq.n	80020e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002106:	2001      	movs	r0, #1
 8002108:	f000 faba 	bl	8002680 <RCC_Delay>
 800210c:	e01c      	b.n	8002148 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800210e:	4b0a      	ldr	r3, [pc, #40]	@ (8002138 <HAL_RCC_OscConfig+0x274>)
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002114:	f7fe fbcc 	bl	80008b0 <HAL_GetTick>
 8002118:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800211a:	e00f      	b.n	800213c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800211c:	f7fe fbc8 	bl	80008b0 <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b02      	cmp	r3, #2
 8002128:	d908      	bls.n	800213c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e146      	b.n	80023bc <HAL_RCC_OscConfig+0x4f8>
 800212e:	bf00      	nop
 8002130:	40021000 	.word	0x40021000
 8002134:	42420000 	.word	0x42420000
 8002138:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800213c:	4b92      	ldr	r3, [pc, #584]	@ (8002388 <HAL_RCC_OscConfig+0x4c4>)
 800213e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002140:	f003 0302 	and.w	r3, r3, #2
 8002144:	2b00      	cmp	r3, #0
 8002146:	d1e9      	bne.n	800211c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 0304 	and.w	r3, r3, #4
 8002150:	2b00      	cmp	r3, #0
 8002152:	f000 80a6 	beq.w	80022a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002156:	2300      	movs	r3, #0
 8002158:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800215a:	4b8b      	ldr	r3, [pc, #556]	@ (8002388 <HAL_RCC_OscConfig+0x4c4>)
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d10d      	bne.n	8002182 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002166:	4b88      	ldr	r3, [pc, #544]	@ (8002388 <HAL_RCC_OscConfig+0x4c4>)
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	4a87      	ldr	r2, [pc, #540]	@ (8002388 <HAL_RCC_OscConfig+0x4c4>)
 800216c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002170:	61d3      	str	r3, [r2, #28]
 8002172:	4b85      	ldr	r3, [pc, #532]	@ (8002388 <HAL_RCC_OscConfig+0x4c4>)
 8002174:	69db      	ldr	r3, [r3, #28]
 8002176:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800217a:	60bb      	str	r3, [r7, #8]
 800217c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800217e:	2301      	movs	r3, #1
 8002180:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002182:	4b82      	ldr	r3, [pc, #520]	@ (800238c <HAL_RCC_OscConfig+0x4c8>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800218a:	2b00      	cmp	r3, #0
 800218c:	d118      	bne.n	80021c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800218e:	4b7f      	ldr	r3, [pc, #508]	@ (800238c <HAL_RCC_OscConfig+0x4c8>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a7e      	ldr	r2, [pc, #504]	@ (800238c <HAL_RCC_OscConfig+0x4c8>)
 8002194:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002198:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800219a:	f7fe fb89 	bl	80008b0 <HAL_GetTick>
 800219e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a0:	e008      	b.n	80021b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021a2:	f7fe fb85 	bl	80008b0 <HAL_GetTick>
 80021a6:	4602      	mov	r2, r0
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b64      	cmp	r3, #100	@ 0x64
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e103      	b.n	80023bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b4:	4b75      	ldr	r3, [pc, #468]	@ (800238c <HAL_RCC_OscConfig+0x4c8>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d0f0      	beq.n	80021a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	68db      	ldr	r3, [r3, #12]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d106      	bne.n	80021d6 <HAL_RCC_OscConfig+0x312>
 80021c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002388 <HAL_RCC_OscConfig+0x4c4>)
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	4a6e      	ldr	r2, [pc, #440]	@ (8002388 <HAL_RCC_OscConfig+0x4c4>)
 80021ce:	f043 0301 	orr.w	r3, r3, #1
 80021d2:	6213      	str	r3, [r2, #32]
 80021d4:	e02d      	b.n	8002232 <HAL_RCC_OscConfig+0x36e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10c      	bne.n	80021f8 <HAL_RCC_OscConfig+0x334>
 80021de:	4b6a      	ldr	r3, [pc, #424]	@ (8002388 <HAL_RCC_OscConfig+0x4c4>)
 80021e0:	6a1b      	ldr	r3, [r3, #32]
 80021e2:	4a69      	ldr	r2, [pc, #420]	@ (8002388 <HAL_RCC_OscConfig+0x4c4>)
 80021e4:	f023 0301 	bic.w	r3, r3, #1
 80021e8:	6213      	str	r3, [r2, #32]
 80021ea:	4b67      	ldr	r3, [pc, #412]	@ (8002388 <HAL_RCC_OscConfig+0x4c4>)
 80021ec:	6a1b      	ldr	r3, [r3, #32]
 80021ee:	4a66      	ldr	r2, [pc, #408]	@ (8002388 <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	f023 0304 	bic.w	r3, r3, #4
 80021f4:	6213      	str	r3, [r2, #32]
 80021f6:	e01c      	b.n	8002232 <HAL_RCC_OscConfig+0x36e>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	2b05      	cmp	r3, #5
 80021fe:	d10c      	bne.n	800221a <HAL_RCC_OscConfig+0x356>
 8002200:	4b61      	ldr	r3, [pc, #388]	@ (8002388 <HAL_RCC_OscConfig+0x4c4>)
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	4a60      	ldr	r2, [pc, #384]	@ (8002388 <HAL_RCC_OscConfig+0x4c4>)
 8002206:	f043 0304 	orr.w	r3, r3, #4
 800220a:	6213      	str	r3, [r2, #32]
 800220c:	4b5e      	ldr	r3, [pc, #376]	@ (8002388 <HAL_RCC_OscConfig+0x4c4>)
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	4a5d      	ldr	r2, [pc, #372]	@ (8002388 <HAL_RCC_OscConfig+0x4c4>)
 8002212:	f043 0301 	orr.w	r3, r3, #1
 8002216:	6213      	str	r3, [r2, #32]
 8002218:	e00b      	b.n	8002232 <HAL_RCC_OscConfig+0x36e>
 800221a:	4b5b      	ldr	r3, [pc, #364]	@ (8002388 <HAL_RCC_OscConfig+0x4c4>)
 800221c:	6a1b      	ldr	r3, [r3, #32]
 800221e:	4a5a      	ldr	r2, [pc, #360]	@ (8002388 <HAL_RCC_OscConfig+0x4c4>)
 8002220:	f023 0301 	bic.w	r3, r3, #1
 8002224:	6213      	str	r3, [r2, #32]
 8002226:	4b58      	ldr	r3, [pc, #352]	@ (8002388 <HAL_RCC_OscConfig+0x4c4>)
 8002228:	6a1b      	ldr	r3, [r3, #32]
 800222a:	4a57      	ldr	r2, [pc, #348]	@ (8002388 <HAL_RCC_OscConfig+0x4c4>)
 800222c:	f023 0304 	bic.w	r3, r3, #4
 8002230:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d015      	beq.n	8002266 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800223a:	f7fe fb39 	bl	80008b0 <HAL_GetTick>
 800223e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002240:	e00a      	b.n	8002258 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002242:	f7fe fb35 	bl	80008b0 <HAL_GetTick>
 8002246:	4602      	mov	r2, r0
 8002248:	693b      	ldr	r3, [r7, #16]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002250:	4293      	cmp	r3, r2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e0b1      	b.n	80023bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002258:	4b4b      	ldr	r3, [pc, #300]	@ (8002388 <HAL_RCC_OscConfig+0x4c4>)
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0ee      	beq.n	8002242 <HAL_RCC_OscConfig+0x37e>
 8002264:	e014      	b.n	8002290 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002266:	f7fe fb23 	bl	80008b0 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800226c:	e00a      	b.n	8002284 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800226e:	f7fe fb1f 	bl	80008b0 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	f241 3288 	movw	r2, #5000	@ 0x1388
 800227c:	4293      	cmp	r3, r2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e09b      	b.n	80023bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002284:	4b40      	ldr	r3, [pc, #256]	@ (8002388 <HAL_RCC_OscConfig+0x4c4>)
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1ee      	bne.n	800226e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002290:	7dfb      	ldrb	r3, [r7, #23]
 8002292:	2b01      	cmp	r3, #1
 8002294:	d105      	bne.n	80022a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002296:	4b3c      	ldr	r3, [pc, #240]	@ (8002388 <HAL_RCC_OscConfig+0x4c4>)
 8002298:	69db      	ldr	r3, [r3, #28]
 800229a:	4a3b      	ldr	r2, [pc, #236]	@ (8002388 <HAL_RCC_OscConfig+0x4c4>)
 800229c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 8087 	beq.w	80023ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022ac:	4b36      	ldr	r3, [pc, #216]	@ (8002388 <HAL_RCC_OscConfig+0x4c4>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f003 030c 	and.w	r3, r3, #12
 80022b4:	2b08      	cmp	r3, #8
 80022b6:	d061      	beq.n	800237c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d146      	bne.n	800234e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c0:	4b33      	ldr	r3, [pc, #204]	@ (8002390 <HAL_RCC_OscConfig+0x4cc>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c6:	f7fe faf3 	bl	80008b0 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ce:	f7fe faef 	bl	80008b0 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e06d      	b.n	80023bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022e0:	4b29      	ldr	r3, [pc, #164]	@ (8002388 <HAL_RCC_OscConfig+0x4c4>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1f0      	bne.n	80022ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a1b      	ldr	r3, [r3, #32]
 80022f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022f4:	d108      	bne.n	8002308 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022f6:	4b24      	ldr	r3, [pc, #144]	@ (8002388 <HAL_RCC_OscConfig+0x4c4>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	4921      	ldr	r1, [pc, #132]	@ (8002388 <HAL_RCC_OscConfig+0x4c4>)
 8002304:	4313      	orrs	r3, r2
 8002306:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002308:	4b1f      	ldr	r3, [pc, #124]	@ (8002388 <HAL_RCC_OscConfig+0x4c4>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6a19      	ldr	r1, [r3, #32]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002318:	430b      	orrs	r3, r1
 800231a:	491b      	ldr	r1, [pc, #108]	@ (8002388 <HAL_RCC_OscConfig+0x4c4>)
 800231c:	4313      	orrs	r3, r2
 800231e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002320:	4b1b      	ldr	r3, [pc, #108]	@ (8002390 <HAL_RCC_OscConfig+0x4cc>)
 8002322:	2201      	movs	r2, #1
 8002324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002326:	f7fe fac3 	bl	80008b0 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800232e:	f7fe fabf 	bl	80008b0 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e03d      	b.n	80023bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002340:	4b11      	ldr	r3, [pc, #68]	@ (8002388 <HAL_RCC_OscConfig+0x4c4>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0f0      	beq.n	800232e <HAL_RCC_OscConfig+0x46a>
 800234c:	e035      	b.n	80023ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234e:	4b10      	ldr	r3, [pc, #64]	@ (8002390 <HAL_RCC_OscConfig+0x4cc>)
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002354:	f7fe faac 	bl	80008b0 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800235c:	f7fe faa8 	bl	80008b0 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b02      	cmp	r3, #2
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e026      	b.n	80023bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800236e:	4b06      	ldr	r3, [pc, #24]	@ (8002388 <HAL_RCC_OscConfig+0x4c4>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0x498>
 800237a:	e01e      	b.n	80023ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	69db      	ldr	r3, [r3, #28]
 8002380:	2b01      	cmp	r3, #1
 8002382:	d107      	bne.n	8002394 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e019      	b.n	80023bc <HAL_RCC_OscConfig+0x4f8>
 8002388:	40021000 	.word	0x40021000
 800238c:	40007000 	.word	0x40007000
 8002390:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002394:	4b0b      	ldr	r3, [pc, #44]	@ (80023c4 <HAL_RCC_OscConfig+0x500>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6a1b      	ldr	r3, [r3, #32]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d106      	bne.n	80023b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d001      	beq.n	80023ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e000      	b.n	80023bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3718      	adds	r7, #24
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40021000 	.word	0x40021000

080023c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d101      	bne.n	80023dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e0d0      	b.n	800257e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023dc:	4b6a      	ldr	r3, [pc, #424]	@ (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0307 	and.w	r3, r3, #7
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d910      	bls.n	800240c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ea:	4b67      	ldr	r3, [pc, #412]	@ (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f023 0207 	bic.w	r2, r3, #7
 80023f2:	4965      	ldr	r1, [pc, #404]	@ (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fa:	4b63      	ldr	r3, [pc, #396]	@ (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0307 	and.w	r3, r3, #7
 8002402:	683a      	ldr	r2, [r7, #0]
 8002404:	429a      	cmp	r2, r3
 8002406:	d001      	beq.n	800240c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e0b8      	b.n	800257e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d020      	beq.n	800245a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 0304 	and.w	r3, r3, #4
 8002420:	2b00      	cmp	r3, #0
 8002422:	d005      	beq.n	8002430 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002424:	4b59      	ldr	r3, [pc, #356]	@ (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	4a58      	ldr	r2, [pc, #352]	@ (800258c <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800242e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	2b00      	cmp	r3, #0
 800243a:	d005      	beq.n	8002448 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800243c:	4b53      	ldr	r3, [pc, #332]	@ (800258c <HAL_RCC_ClockConfig+0x1c4>)
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	4a52      	ldr	r2, [pc, #328]	@ (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002442:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002446:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002448:	4b50      	ldr	r3, [pc, #320]	@ (800258c <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	494d      	ldr	r1, [pc, #308]	@ (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	4313      	orrs	r3, r2
 8002458:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d040      	beq.n	80024e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d107      	bne.n	800247e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246e:	4b47      	ldr	r3, [pc, #284]	@ (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d115      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e07f      	b.n	800257e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d107      	bne.n	8002496 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002486:	4b41      	ldr	r3, [pc, #260]	@ (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d109      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e073      	b.n	800257e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002496:	4b3d      	ldr	r3, [pc, #244]	@ (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d101      	bne.n	80024a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e06b      	b.n	800257e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024a6:	4b39      	ldr	r3, [pc, #228]	@ (800258c <HAL_RCC_ClockConfig+0x1c4>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f023 0203 	bic.w	r2, r3, #3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	4936      	ldr	r1, [pc, #216]	@ (800258c <HAL_RCC_ClockConfig+0x1c4>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024b8:	f7fe f9fa 	bl	80008b0 <HAL_GetTick>
 80024bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024be:	e00a      	b.n	80024d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024c0:	f7fe f9f6 	bl	80008b0 <HAL_GetTick>
 80024c4:	4602      	mov	r2, r0
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	1ad3      	subs	r3, r2, r3
 80024ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d901      	bls.n	80024d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e053      	b.n	800257e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d6:	4b2d      	ldr	r3, [pc, #180]	@ (800258c <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 020c 	and.w	r2, r3, #12
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d1eb      	bne.n	80024c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024e8:	4b27      	ldr	r3, [pc, #156]	@ (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	683a      	ldr	r2, [r7, #0]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d210      	bcs.n	8002518 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f6:	4b24      	ldr	r3, [pc, #144]	@ (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 0207 	bic.w	r2, r3, #7
 80024fe:	4922      	ldr	r1, [pc, #136]	@ (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	4313      	orrs	r3, r2
 8002504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002506:	4b20      	ldr	r3, [pc, #128]	@ (8002588 <HAL_RCC_ClockConfig+0x1c0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0307 	and.w	r3, r3, #7
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	429a      	cmp	r2, r3
 8002512:	d001      	beq.n	8002518 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e032      	b.n	800257e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0304 	and.w	r3, r3, #4
 8002520:	2b00      	cmp	r3, #0
 8002522:	d008      	beq.n	8002536 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002524:	4b19      	ldr	r3, [pc, #100]	@ (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	4916      	ldr	r1, [pc, #88]	@ (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	4313      	orrs	r3, r2
 8002534:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	d009      	beq.n	8002556 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002542:	4b12      	ldr	r3, [pc, #72]	@ (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	691b      	ldr	r3, [r3, #16]
 800254e:	00db      	lsls	r3, r3, #3
 8002550:	490e      	ldr	r1, [pc, #56]	@ (800258c <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	4313      	orrs	r3, r2
 8002554:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002556:	f000 f821 	bl	800259c <HAL_RCC_GetSysClockFreq>
 800255a:	4602      	mov	r2, r0
 800255c:	4b0b      	ldr	r3, [pc, #44]	@ (800258c <HAL_RCC_ClockConfig+0x1c4>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	091b      	lsrs	r3, r3, #4
 8002562:	f003 030f 	and.w	r3, r3, #15
 8002566:	490a      	ldr	r1, [pc, #40]	@ (8002590 <HAL_RCC_ClockConfig+0x1c8>)
 8002568:	5ccb      	ldrb	r3, [r1, r3]
 800256a:	fa22 f303 	lsr.w	r3, r2, r3
 800256e:	4a09      	ldr	r2, [pc, #36]	@ (8002594 <HAL_RCC_ClockConfig+0x1cc>)
 8002570:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002572:	4b09      	ldr	r3, [pc, #36]	@ (8002598 <HAL_RCC_ClockConfig+0x1d0>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4618      	mov	r0, r3
 8002578:	f7fe f958 	bl	800082c <HAL_InitTick>

  return HAL_OK;
 800257c:	2300      	movs	r3, #0
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40022000 	.word	0x40022000
 800258c:	40021000 	.word	0x40021000
 8002590:	08002734 	.word	0x08002734
 8002594:	20000000 	.word	0x20000000
 8002598:	20000004 	.word	0x20000004

0800259c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800259c:	b480      	push	{r7}
 800259e:	b087      	sub	sp, #28
 80025a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	2300      	movs	r3, #0
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	2300      	movs	r3, #0
 80025b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x94>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	2b04      	cmp	r3, #4
 80025c4:	d002      	beq.n	80025cc <HAL_RCC_GetSysClockFreq+0x30>
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d003      	beq.n	80025d2 <HAL_RCC_GetSysClockFreq+0x36>
 80025ca:	e027      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025cc:	4b19      	ldr	r3, [pc, #100]	@ (8002634 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ce:	613b      	str	r3, [r7, #16]
      break;
 80025d0:	e027      	b.n	8002622 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	0c9b      	lsrs	r3, r3, #18
 80025d6:	f003 030f 	and.w	r3, r3, #15
 80025da:	4a17      	ldr	r2, [pc, #92]	@ (8002638 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025dc:	5cd3      	ldrb	r3, [r2, r3]
 80025de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d010      	beq.n	800260c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025ea:	4b11      	ldr	r3, [pc, #68]	@ (8002630 <HAL_RCC_GetSysClockFreq+0x94>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	0c5b      	lsrs	r3, r3, #17
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	4a11      	ldr	r2, [pc, #68]	@ (800263c <HAL_RCC_GetSysClockFreq+0xa0>)
 80025f6:	5cd3      	ldrb	r3, [r2, r3]
 80025f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002634 <HAL_RCC_GetSysClockFreq+0x98>)
 80025fe:	fb03 f202 	mul.w	r2, r3, r2
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	fbb2 f3f3 	udiv	r3, r2, r3
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	e004      	b.n	8002616 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4a0c      	ldr	r2, [pc, #48]	@ (8002640 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002610:	fb02 f303 	mul.w	r3, r2, r3
 8002614:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	613b      	str	r3, [r7, #16]
      break;
 800261a:	e002      	b.n	8002622 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800261c:	4b05      	ldr	r3, [pc, #20]	@ (8002634 <HAL_RCC_GetSysClockFreq+0x98>)
 800261e:	613b      	str	r3, [r7, #16]
      break;
 8002620:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002622:	693b      	ldr	r3, [r7, #16]
}
 8002624:	4618      	mov	r0, r3
 8002626:	371c      	adds	r7, #28
 8002628:	46bd      	mov	sp, r7
 800262a:	bc80      	pop	{r7}
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40021000 	.word	0x40021000
 8002634:	007a1200 	.word	0x007a1200
 8002638:	0800274c 	.word	0x0800274c
 800263c:	0800275c 	.word	0x0800275c
 8002640:	003d0900 	.word	0x003d0900

08002644 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002648:	4b02      	ldr	r3, [pc, #8]	@ (8002654 <HAL_RCC_GetHCLKFreq+0x10>)
 800264a:	681b      	ldr	r3, [r3, #0]
}
 800264c:	4618      	mov	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	bc80      	pop	{r7}
 8002652:	4770      	bx	lr
 8002654:	20000000 	.word	0x20000000

08002658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800265c:	f7ff fff2 	bl	8002644 <HAL_RCC_GetHCLKFreq>
 8002660:	4602      	mov	r2, r0
 8002662:	4b05      	ldr	r3, [pc, #20]	@ (8002678 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	0a1b      	lsrs	r3, r3, #8
 8002668:	f003 0307 	and.w	r3, r3, #7
 800266c:	4903      	ldr	r1, [pc, #12]	@ (800267c <HAL_RCC_GetPCLK1Freq+0x24>)
 800266e:	5ccb      	ldrb	r3, [r1, r3]
 8002670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002674:	4618      	mov	r0, r3
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40021000 	.word	0x40021000
 800267c:	08002744 	.word	0x08002744

08002680 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002688:	4b0a      	ldr	r3, [pc, #40]	@ (80026b4 <RCC_Delay+0x34>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a0a      	ldr	r2, [pc, #40]	@ (80026b8 <RCC_Delay+0x38>)
 800268e:	fba2 2303 	umull	r2, r3, r2, r3
 8002692:	0a5b      	lsrs	r3, r3, #9
 8002694:	687a      	ldr	r2, [r7, #4]
 8002696:	fb02 f303 	mul.w	r3, r2, r3
 800269a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800269c:	bf00      	nop
  }
  while (Delay --);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	1e5a      	subs	r2, r3, #1
 80026a2:	60fa      	str	r2, [r7, #12]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d1f9      	bne.n	800269c <RCC_Delay+0x1c>
}
 80026a8:	bf00      	nop
 80026aa:	bf00      	nop
 80026ac:	3714      	adds	r7, #20
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bc80      	pop	{r7}
 80026b2:	4770      	bx	lr
 80026b4:	20000000 	.word	0x20000000
 80026b8:	10624dd3 	.word	0x10624dd3

080026bc <memset>:
 80026bc:	4603      	mov	r3, r0
 80026be:	4402      	add	r2, r0
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d100      	bne.n	80026c6 <memset+0xa>
 80026c4:	4770      	bx	lr
 80026c6:	f803 1b01 	strb.w	r1, [r3], #1
 80026ca:	e7f9      	b.n	80026c0 <memset+0x4>

080026cc <__libc_init_array>:
 80026cc:	b570      	push	{r4, r5, r6, lr}
 80026ce:	2600      	movs	r6, #0
 80026d0:	4d0c      	ldr	r5, [pc, #48]	@ (8002704 <__libc_init_array+0x38>)
 80026d2:	4c0d      	ldr	r4, [pc, #52]	@ (8002708 <__libc_init_array+0x3c>)
 80026d4:	1b64      	subs	r4, r4, r5
 80026d6:	10a4      	asrs	r4, r4, #2
 80026d8:	42a6      	cmp	r6, r4
 80026da:	d109      	bne.n	80026f0 <__libc_init_array+0x24>
 80026dc:	f000 f81a 	bl	8002714 <_init>
 80026e0:	2600      	movs	r6, #0
 80026e2:	4d0a      	ldr	r5, [pc, #40]	@ (800270c <__libc_init_array+0x40>)
 80026e4:	4c0a      	ldr	r4, [pc, #40]	@ (8002710 <__libc_init_array+0x44>)
 80026e6:	1b64      	subs	r4, r4, r5
 80026e8:	10a4      	asrs	r4, r4, #2
 80026ea:	42a6      	cmp	r6, r4
 80026ec:	d105      	bne.n	80026fa <__libc_init_array+0x2e>
 80026ee:	bd70      	pop	{r4, r5, r6, pc}
 80026f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80026f4:	4798      	blx	r3
 80026f6:	3601      	adds	r6, #1
 80026f8:	e7ee      	b.n	80026d8 <__libc_init_array+0xc>
 80026fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80026fe:	4798      	blx	r3
 8002700:	3601      	adds	r6, #1
 8002702:	e7f2      	b.n	80026ea <__libc_init_array+0x1e>
 8002704:	08002760 	.word	0x08002760
 8002708:	08002760 	.word	0x08002760
 800270c:	08002760 	.word	0x08002760
 8002710:	08002764 	.word	0x08002764

08002714 <_init>:
 8002714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002716:	bf00      	nop
 8002718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800271a:	bc08      	pop	{r3}
 800271c:	469e      	mov	lr, r3
 800271e:	4770      	bx	lr

08002720 <_fini>:
 8002720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002722:	bf00      	nop
 8002724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002726:	bc08      	pop	{r3}
 8002728:	469e      	mov	lr, r3
 800272a:	4770      	bx	lr
