
PFI_Dendro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001454  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08001560  08001560  00002560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800158c  0800158c  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800158c  0800158c  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800158c  0800158c  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800158c  0800158c  0000258c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001590  08001590  00002590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001594  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  080015a0  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  080015a0  00003080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000059af  00000000  00000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000011bd  00000000  00000000  000089e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000690  00000000  00000000  00009ba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000506  00000000  00000000  0000a238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e30  00000000  00000000  0000a73e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007f9e  00000000  00000000  0002056e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e5ec  00000000  00000000  0002850c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a6af8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a14  00000000  00000000  000a6b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000a8550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001548 	.word	0x08001548

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001548 	.word	0x08001548

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 f992 	bl	8000478 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80c 	bl	8000170 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f874 	bl	8000244 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015c:	f000 f844 	bl	80001e8 <MX_I2C1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000160:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000164:	4801      	ldr	r0, [pc, #4]	@ (800016c <main+0x20>)
 8000166:	f000 fc69 	bl	8000a3c <HAL_GPIO_TogglePin>
 800016a:	e7f9      	b.n	8000160 <main+0x14>
 800016c:	40011000 	.word	0x40011000

08000170 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b090      	sub	sp, #64	@ 0x40
 8000174:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000176:	f107 0318 	add.w	r3, r7, #24
 800017a:	2228      	movs	r2, #40	@ 0x28
 800017c:	2100      	movs	r1, #0
 800017e:	4618      	mov	r0, r3
 8000180:	f001 f9b6 	bl	80014f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000184:	1d3b      	adds	r3, r7, #4
 8000186:	2200      	movs	r2, #0
 8000188:	601a      	str	r2, [r3, #0]
 800018a:	605a      	str	r2, [r3, #4]
 800018c:	609a      	str	r2, [r3, #8]
 800018e:	60da      	str	r2, [r3, #12]
 8000190:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000192:	2302      	movs	r3, #2
 8000194:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000196:	2301      	movs	r3, #1
 8000198:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800019a:	2310      	movs	r3, #16
 800019c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800019e:	2300      	movs	r3, #0
 80001a0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001a2:	f107 0318 	add.w	r3, r7, #24
 80001a6:	4618      	mov	r0, r3
 80001a8:	f000 fda6 	bl	8000cf8 <HAL_RCC_OscConfig>
 80001ac:	4603      	mov	r3, r0
 80001ae:	2b00      	cmp	r3, #0
 80001b0:	d001      	beq.n	80001b6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001b2:	f000 f893 	bl	80002dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001b6:	230f      	movs	r3, #15
 80001b8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001ba:	2300      	movs	r3, #0
 80001bc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001be:	2300      	movs	r3, #0
 80001c0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001c2:	2300      	movs	r3, #0
 80001c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001c6:	2300      	movs	r3, #0
 80001c8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001ca:	1d3b      	adds	r3, r7, #4
 80001cc:	2100      	movs	r1, #0
 80001ce:	4618      	mov	r0, r3
 80001d0:	f001 f814 	bl	80011fc <HAL_RCC_ClockConfig>
 80001d4:	4603      	mov	r3, r0
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	d001      	beq.n	80001de <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001da:	f000 f87f 	bl	80002dc <Error_Handler>
  }
}
 80001de:	bf00      	nop
 80001e0:	3740      	adds	r7, #64	@ 0x40
 80001e2:	46bd      	mov	sp, r7
 80001e4:	bd80      	pop	{r7, pc}
	...

080001e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80001e8:	b580      	push	{r7, lr}
 80001ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80001ec:	4b12      	ldr	r3, [pc, #72]	@ (8000238 <MX_I2C1_Init+0x50>)
 80001ee:	4a13      	ldr	r2, [pc, #76]	@ (800023c <MX_I2C1_Init+0x54>)
 80001f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80001f2:	4b11      	ldr	r3, [pc, #68]	@ (8000238 <MX_I2C1_Init+0x50>)
 80001f4:	4a12      	ldr	r2, [pc, #72]	@ (8000240 <MX_I2C1_Init+0x58>)
 80001f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80001f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000238 <MX_I2C1_Init+0x50>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80001fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000238 <MX_I2C1_Init+0x50>)
 8000200:	2200      	movs	r2, #0
 8000202:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000204:	4b0c      	ldr	r3, [pc, #48]	@ (8000238 <MX_I2C1_Init+0x50>)
 8000206:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800020a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800020c:	4b0a      	ldr	r3, [pc, #40]	@ (8000238 <MX_I2C1_Init+0x50>)
 800020e:	2200      	movs	r2, #0
 8000210:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000212:	4b09      	ldr	r3, [pc, #36]	@ (8000238 <MX_I2C1_Init+0x50>)
 8000214:	2200      	movs	r2, #0
 8000216:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000218:	4b07      	ldr	r3, [pc, #28]	@ (8000238 <MX_I2C1_Init+0x50>)
 800021a:	2200      	movs	r2, #0
 800021c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800021e:	4b06      	ldr	r3, [pc, #24]	@ (8000238 <MX_I2C1_Init+0x50>)
 8000220:	2200      	movs	r2, #0
 8000222:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000224:	4804      	ldr	r0, [pc, #16]	@ (8000238 <MX_I2C1_Init+0x50>)
 8000226:	f000 fc23 	bl	8000a70 <HAL_I2C_Init>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000230:	f000 f854 	bl	80002dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000234:	bf00      	nop
 8000236:	bd80      	pop	{r7, pc}
 8000238:	20000028 	.word	0x20000028
 800023c:	40005400 	.word	0x40005400
 8000240:	000186a0 	.word	0x000186a0

08000244 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b088      	sub	sp, #32
 8000248:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024a:	f107 0310 	add.w	r3, r7, #16
 800024e:	2200      	movs	r2, #0
 8000250:	601a      	str	r2, [r3, #0]
 8000252:	605a      	str	r2, [r3, #4]
 8000254:	609a      	str	r2, [r3, #8]
 8000256:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000258:	4b1e      	ldr	r3, [pc, #120]	@ (80002d4 <MX_GPIO_Init+0x90>)
 800025a:	699b      	ldr	r3, [r3, #24]
 800025c:	4a1d      	ldr	r2, [pc, #116]	@ (80002d4 <MX_GPIO_Init+0x90>)
 800025e:	f043 0310 	orr.w	r3, r3, #16
 8000262:	6193      	str	r3, [r2, #24]
 8000264:	4b1b      	ldr	r3, [pc, #108]	@ (80002d4 <MX_GPIO_Init+0x90>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	f003 0310 	and.w	r3, r3, #16
 800026c:	60fb      	str	r3, [r7, #12]
 800026e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000270:	4b18      	ldr	r3, [pc, #96]	@ (80002d4 <MX_GPIO_Init+0x90>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	4a17      	ldr	r2, [pc, #92]	@ (80002d4 <MX_GPIO_Init+0x90>)
 8000276:	f043 0304 	orr.w	r3, r3, #4
 800027a:	6193      	str	r3, [r2, #24]
 800027c:	4b15      	ldr	r3, [pc, #84]	@ (80002d4 <MX_GPIO_Init+0x90>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	f003 0304 	and.w	r3, r3, #4
 8000284:	60bb      	str	r3, [r7, #8]
 8000286:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000288:	4b12      	ldr	r3, [pc, #72]	@ (80002d4 <MX_GPIO_Init+0x90>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	4a11      	ldr	r2, [pc, #68]	@ (80002d4 <MX_GPIO_Init+0x90>)
 800028e:	f043 0308 	orr.w	r3, r3, #8
 8000292:	6193      	str	r3, [r2, #24]
 8000294:	4b0f      	ldr	r3, [pc, #60]	@ (80002d4 <MX_GPIO_Init+0x90>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	f003 0308 	and.w	r3, r3, #8
 800029c:	607b      	str	r3, [r7, #4]
 800029e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002a0:	2200      	movs	r2, #0
 80002a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002a6:	480c      	ldr	r0, [pc, #48]	@ (80002d8 <MX_GPIO_Init+0x94>)
 80002a8:	f000 fbb0 	bl	8000a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80002ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b2:	2301      	movs	r3, #1
 80002b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b6:	2300      	movs	r3, #0
 80002b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ba:	2302      	movs	r3, #2
 80002bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80002be:	f107 0310 	add.w	r3, r7, #16
 80002c2:	4619      	mov	r1, r3
 80002c4:	4804      	ldr	r0, [pc, #16]	@ (80002d8 <MX_GPIO_Init+0x94>)
 80002c6:	f000 fa1d 	bl	8000704 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80002ca:	bf00      	nop
 80002cc:	3720      	adds	r7, #32
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	bf00      	nop
 80002d4:	40021000 	.word	0x40021000
 80002d8:	40011000 	.word	0x40011000

080002dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002e0:	b672      	cpsid	i
}
 80002e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002e4:	bf00      	nop
 80002e6:	e7fd      	b.n	80002e4 <Error_Handler+0x8>

080002e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002e8:	b480      	push	{r7}
 80002ea:	b085      	sub	sp, #20
 80002ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002ee:	4b15      	ldr	r3, [pc, #84]	@ (8000344 <HAL_MspInit+0x5c>)
 80002f0:	699b      	ldr	r3, [r3, #24]
 80002f2:	4a14      	ldr	r2, [pc, #80]	@ (8000344 <HAL_MspInit+0x5c>)
 80002f4:	f043 0301 	orr.w	r3, r3, #1
 80002f8:	6193      	str	r3, [r2, #24]
 80002fa:	4b12      	ldr	r3, [pc, #72]	@ (8000344 <HAL_MspInit+0x5c>)
 80002fc:	699b      	ldr	r3, [r3, #24]
 80002fe:	f003 0301 	and.w	r3, r3, #1
 8000302:	60bb      	str	r3, [r7, #8]
 8000304:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000306:	4b0f      	ldr	r3, [pc, #60]	@ (8000344 <HAL_MspInit+0x5c>)
 8000308:	69db      	ldr	r3, [r3, #28]
 800030a:	4a0e      	ldr	r2, [pc, #56]	@ (8000344 <HAL_MspInit+0x5c>)
 800030c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000310:	61d3      	str	r3, [r2, #28]
 8000312:	4b0c      	ldr	r3, [pc, #48]	@ (8000344 <HAL_MspInit+0x5c>)
 8000314:	69db      	ldr	r3, [r3, #28]
 8000316:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800031a:	607b      	str	r3, [r7, #4]
 800031c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800031e:	4b0a      	ldr	r3, [pc, #40]	@ (8000348 <HAL_MspInit+0x60>)
 8000320:	685b      	ldr	r3, [r3, #4]
 8000322:	60fb      	str	r3, [r7, #12]
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	68fb      	ldr	r3, [r7, #12]
 800032e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000332:	60fb      	str	r3, [r7, #12]
 8000334:	4a04      	ldr	r2, [pc, #16]	@ (8000348 <HAL_MspInit+0x60>)
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800033a:	bf00      	nop
 800033c:	3714      	adds	r7, #20
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr
 8000344:	40021000 	.word	0x40021000
 8000348:	40010000 	.word	0x40010000

0800034c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b088      	sub	sp, #32
 8000350:	af00      	add	r7, sp, #0
 8000352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000354:	f107 0310 	add.w	r3, r7, #16
 8000358:	2200      	movs	r2, #0
 800035a:	601a      	str	r2, [r3, #0]
 800035c:	605a      	str	r2, [r3, #4]
 800035e:	609a      	str	r2, [r3, #8]
 8000360:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	681b      	ldr	r3, [r3, #0]
 8000366:	4a15      	ldr	r2, [pc, #84]	@ (80003bc <HAL_I2C_MspInit+0x70>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d123      	bne.n	80003b4 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800036c:	4b14      	ldr	r3, [pc, #80]	@ (80003c0 <HAL_I2C_MspInit+0x74>)
 800036e:	699b      	ldr	r3, [r3, #24]
 8000370:	4a13      	ldr	r2, [pc, #76]	@ (80003c0 <HAL_I2C_MspInit+0x74>)
 8000372:	f043 0308 	orr.w	r3, r3, #8
 8000376:	6193      	str	r3, [r2, #24]
 8000378:	4b11      	ldr	r3, [pc, #68]	@ (80003c0 <HAL_I2C_MspInit+0x74>)
 800037a:	699b      	ldr	r3, [r3, #24]
 800037c:	f003 0308 	and.w	r3, r3, #8
 8000380:	60fb      	str	r3, [r7, #12]
 8000382:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000384:	23c0      	movs	r3, #192	@ 0xc0
 8000386:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000388:	2312      	movs	r3, #18
 800038a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800038c:	2303      	movs	r3, #3
 800038e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000390:	f107 0310 	add.w	r3, r7, #16
 8000394:	4619      	mov	r1, r3
 8000396:	480b      	ldr	r0, [pc, #44]	@ (80003c4 <HAL_I2C_MspInit+0x78>)
 8000398:	f000 f9b4 	bl	8000704 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800039c:	4b08      	ldr	r3, [pc, #32]	@ (80003c0 <HAL_I2C_MspInit+0x74>)
 800039e:	69db      	ldr	r3, [r3, #28]
 80003a0:	4a07      	ldr	r2, [pc, #28]	@ (80003c0 <HAL_I2C_MspInit+0x74>)
 80003a2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80003a6:	61d3      	str	r3, [r2, #28]
 80003a8:	4b05      	ldr	r3, [pc, #20]	@ (80003c0 <HAL_I2C_MspInit+0x74>)
 80003aa:	69db      	ldr	r3, [r3, #28]
 80003ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80003b0:	60bb      	str	r3, [r7, #8]
 80003b2:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80003b4:	bf00      	nop
 80003b6:	3720      	adds	r7, #32
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	40005400 	.word	0x40005400
 80003c0:	40021000 	.word	0x40021000
 80003c4:	40010c00 	.word	0x40010c00

080003c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80003cc:	bf00      	nop
 80003ce:	e7fd      	b.n	80003cc <NMI_Handler+0x4>

080003d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003d0:	b480      	push	{r7}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003d4:	bf00      	nop
 80003d6:	e7fd      	b.n	80003d4 <HardFault_Handler+0x4>

080003d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003d8:	b480      	push	{r7}
 80003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003dc:	bf00      	nop
 80003de:	e7fd      	b.n	80003dc <MemManage_Handler+0x4>

080003e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003e4:	bf00      	nop
 80003e6:	e7fd      	b.n	80003e4 <BusFault_Handler+0x4>

080003e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003ec:	bf00      	nop
 80003ee:	e7fd      	b.n	80003ec <UsageFault_Handler+0x4>

080003f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003f0:	b480      	push	{r7}
 80003f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003f4:	bf00      	nop
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bc80      	pop	{r7}
 80003fa:	4770      	bx	lr

080003fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000400:	bf00      	nop
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr

08000408 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800040c:	bf00      	nop
 800040e:	46bd      	mov	sp, r7
 8000410:	bc80      	pop	{r7}
 8000412:	4770      	bx	lr

08000414 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000418:	f000 f874 	bl	8000504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800041c:	bf00      	nop
 800041e:	bd80      	pop	{r7, pc}

08000420 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr

0800042c <Reset_Handler>:
 800042c:	f7ff fff8 	bl	8000420 <SystemInit>
 8000430:	480b      	ldr	r0, [pc, #44]	@ (8000460 <LoopFillZerobss+0xe>)
 8000432:	490c      	ldr	r1, [pc, #48]	@ (8000464 <LoopFillZerobss+0x12>)
 8000434:	4a0c      	ldr	r2, [pc, #48]	@ (8000468 <LoopFillZerobss+0x16>)
 8000436:	2300      	movs	r3, #0
 8000438:	e002      	b.n	8000440 <LoopCopyDataInit>

0800043a <CopyDataInit>:
 800043a:	58d4      	ldr	r4, [r2, r3]
 800043c:	50c4      	str	r4, [r0, r3]
 800043e:	3304      	adds	r3, #4

08000440 <LoopCopyDataInit>:
 8000440:	18c4      	adds	r4, r0, r3
 8000442:	428c      	cmp	r4, r1
 8000444:	d3f9      	bcc.n	800043a <CopyDataInit>
 8000446:	4a09      	ldr	r2, [pc, #36]	@ (800046c <LoopFillZerobss+0x1a>)
 8000448:	4c09      	ldr	r4, [pc, #36]	@ (8000470 <LoopFillZerobss+0x1e>)
 800044a:	2300      	movs	r3, #0
 800044c:	e001      	b.n	8000452 <LoopFillZerobss>

0800044e <FillZerobss>:
 800044e:	6013      	str	r3, [r2, #0]
 8000450:	3204      	adds	r2, #4

08000452 <LoopFillZerobss>:
 8000452:	42a2      	cmp	r2, r4
 8000454:	d3fb      	bcc.n	800044e <FillZerobss>
 8000456:	f001 f853 	bl	8001500 <__libc_init_array>
 800045a:	f7ff fe77 	bl	800014c <main>
 800045e:	4770      	bx	lr
 8000460:	20000000 	.word	0x20000000
 8000464:	2000000c 	.word	0x2000000c
 8000468:	08001594 	.word	0x08001594
 800046c:	2000000c 	.word	0x2000000c
 8000470:	20000080 	.word	0x20000080

08000474 <ADC1_2_IRQHandler>:
 8000474:	e7fe      	b.n	8000474 <ADC1_2_IRQHandler>
	...

08000478 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800047c:	4b08      	ldr	r3, [pc, #32]	@ (80004a0 <HAL_Init+0x28>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a07      	ldr	r2, [pc, #28]	@ (80004a0 <HAL_Init+0x28>)
 8000482:	f043 0310 	orr.w	r3, r3, #16
 8000486:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000488:	2003      	movs	r0, #3
 800048a:	f000 f907 	bl	800069c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800048e:	200f      	movs	r0, #15
 8000490:	f000 f808 	bl	80004a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000494:	f7ff ff28 	bl	80002e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000498:	2300      	movs	r3, #0
}
 800049a:	4618      	mov	r0, r3
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40022000 	.word	0x40022000

080004a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004a4:	b580      	push	{r7, lr}
 80004a6:	b082      	sub	sp, #8
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004ac:	4b12      	ldr	r3, [pc, #72]	@ (80004f8 <HAL_InitTick+0x54>)
 80004ae:	681a      	ldr	r2, [r3, #0]
 80004b0:	4b12      	ldr	r3, [pc, #72]	@ (80004fc <HAL_InitTick+0x58>)
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	4619      	mov	r1, r3
 80004b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80004ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80004be:	fbb2 f3f3 	udiv	r3, r2, r3
 80004c2:	4618      	mov	r0, r3
 80004c4:	f000 f911 	bl	80006ea <HAL_SYSTICK_Config>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80004ce:	2301      	movs	r3, #1
 80004d0:	e00e      	b.n	80004f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	2b0f      	cmp	r3, #15
 80004d6:	d80a      	bhi.n	80004ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004d8:	2200      	movs	r2, #0
 80004da:	6879      	ldr	r1, [r7, #4]
 80004dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80004e0:	f000 f8e7 	bl	80006b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004e4:	4a06      	ldr	r2, [pc, #24]	@ (8000500 <HAL_InitTick+0x5c>)
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80004ea:	2300      	movs	r3, #0
 80004ec:	e000      	b.n	80004f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004ee:	2301      	movs	r3, #1
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000000 	.word	0x20000000
 80004fc:	20000008 	.word	0x20000008
 8000500:	20000004 	.word	0x20000004

08000504 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000508:	4b05      	ldr	r3, [pc, #20]	@ (8000520 <HAL_IncTick+0x1c>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	461a      	mov	r2, r3
 800050e:	4b05      	ldr	r3, [pc, #20]	@ (8000524 <HAL_IncTick+0x20>)
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	4413      	add	r3, r2
 8000514:	4a03      	ldr	r2, [pc, #12]	@ (8000524 <HAL_IncTick+0x20>)
 8000516:	6013      	str	r3, [r2, #0]
}
 8000518:	bf00      	nop
 800051a:	46bd      	mov	sp, r7
 800051c:	bc80      	pop	{r7}
 800051e:	4770      	bx	lr
 8000520:	20000008 	.word	0x20000008
 8000524:	2000007c 	.word	0x2000007c

08000528 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  return uwTick;
 800052c:	4b02      	ldr	r3, [pc, #8]	@ (8000538 <HAL_GetTick+0x10>)
 800052e:	681b      	ldr	r3, [r3, #0]
}
 8000530:	4618      	mov	r0, r3
 8000532:	46bd      	mov	sp, r7
 8000534:	bc80      	pop	{r7}
 8000536:	4770      	bx	lr
 8000538:	2000007c 	.word	0x2000007c

0800053c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f003 0307 	and.w	r3, r3, #7
 800054a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800054c:	4b0c      	ldr	r3, [pc, #48]	@ (8000580 <__NVIC_SetPriorityGrouping+0x44>)
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000552:	68ba      	ldr	r2, [r7, #8]
 8000554:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000558:	4013      	ands	r3, r2
 800055a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000564:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000568:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800056c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800056e:	4a04      	ldr	r2, [pc, #16]	@ (8000580 <__NVIC_SetPriorityGrouping+0x44>)
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	60d3      	str	r3, [r2, #12]
}
 8000574:	bf00      	nop
 8000576:	3714      	adds	r7, #20
 8000578:	46bd      	mov	sp, r7
 800057a:	bc80      	pop	{r7}
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	e000ed00 	.word	0xe000ed00

08000584 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000588:	4b04      	ldr	r3, [pc, #16]	@ (800059c <__NVIC_GetPriorityGrouping+0x18>)
 800058a:	68db      	ldr	r3, [r3, #12]
 800058c:	0a1b      	lsrs	r3, r3, #8
 800058e:	f003 0307 	and.w	r3, r3, #7
}
 8000592:	4618      	mov	r0, r3
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	e000ed00 	.word	0xe000ed00

080005a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	4603      	mov	r3, r0
 80005a8:	6039      	str	r1, [r7, #0]
 80005aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80005ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	db0a      	blt.n	80005ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	b2da      	uxtb	r2, r3
 80005b8:	490c      	ldr	r1, [pc, #48]	@ (80005ec <__NVIC_SetPriority+0x4c>)
 80005ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80005be:	0112      	lsls	r2, r2, #4
 80005c0:	b2d2      	uxtb	r2, r2
 80005c2:	440b      	add	r3, r1
 80005c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80005c8:	e00a      	b.n	80005e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	b2da      	uxtb	r2, r3
 80005ce:	4908      	ldr	r1, [pc, #32]	@ (80005f0 <__NVIC_SetPriority+0x50>)
 80005d0:	79fb      	ldrb	r3, [r7, #7]
 80005d2:	f003 030f 	and.w	r3, r3, #15
 80005d6:	3b04      	subs	r3, #4
 80005d8:	0112      	lsls	r2, r2, #4
 80005da:	b2d2      	uxtb	r2, r2
 80005dc:	440b      	add	r3, r1
 80005de:	761a      	strb	r2, [r3, #24]
}
 80005e0:	bf00      	nop
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bc80      	pop	{r7}
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	e000e100 	.word	0xe000e100
 80005f0:	e000ed00 	.word	0xe000ed00

080005f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b089      	sub	sp, #36	@ 0x24
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	f003 0307 	and.w	r3, r3, #7
 8000606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000608:	69fb      	ldr	r3, [r7, #28]
 800060a:	f1c3 0307 	rsb	r3, r3, #7
 800060e:	2b04      	cmp	r3, #4
 8000610:	bf28      	it	cs
 8000612:	2304      	movcs	r3, #4
 8000614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000616:	69fb      	ldr	r3, [r7, #28]
 8000618:	3304      	adds	r3, #4
 800061a:	2b06      	cmp	r3, #6
 800061c:	d902      	bls.n	8000624 <NVIC_EncodePriority+0x30>
 800061e:	69fb      	ldr	r3, [r7, #28]
 8000620:	3b03      	subs	r3, #3
 8000622:	e000      	b.n	8000626 <NVIC_EncodePriority+0x32>
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000628:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800062c:	69bb      	ldr	r3, [r7, #24]
 800062e:	fa02 f303 	lsl.w	r3, r2, r3
 8000632:	43da      	mvns	r2, r3
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	401a      	ands	r2, r3
 8000638:	697b      	ldr	r3, [r7, #20]
 800063a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800063c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000640:	697b      	ldr	r3, [r7, #20]
 8000642:	fa01 f303 	lsl.w	r3, r1, r3
 8000646:	43d9      	mvns	r1, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800064c:	4313      	orrs	r3, r2
         );
}
 800064e:	4618      	mov	r0, r3
 8000650:	3724      	adds	r7, #36	@ 0x24
 8000652:	46bd      	mov	sp, r7
 8000654:	bc80      	pop	{r7}
 8000656:	4770      	bx	lr

08000658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3b01      	subs	r3, #1
 8000664:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000668:	d301      	bcc.n	800066e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800066a:	2301      	movs	r3, #1
 800066c:	e00f      	b.n	800068e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800066e:	4a0a      	ldr	r2, [pc, #40]	@ (8000698 <SysTick_Config+0x40>)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	3b01      	subs	r3, #1
 8000674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000676:	210f      	movs	r1, #15
 8000678:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800067c:	f7ff ff90 	bl	80005a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000680:	4b05      	ldr	r3, [pc, #20]	@ (8000698 <SysTick_Config+0x40>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000686:	4b04      	ldr	r3, [pc, #16]	@ (8000698 <SysTick_Config+0x40>)
 8000688:	2207      	movs	r2, #7
 800068a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800068c:	2300      	movs	r3, #0
}
 800068e:	4618      	mov	r0, r3
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	e000e010 	.word	0xe000e010

0800069c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f7ff ff49 	bl	800053c <__NVIC_SetPriorityGrouping>
}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b086      	sub	sp, #24
 80006b6:	af00      	add	r7, sp, #0
 80006b8:	4603      	mov	r3, r0
 80006ba:	60b9      	str	r1, [r7, #8]
 80006bc:	607a      	str	r2, [r7, #4]
 80006be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80006c0:	2300      	movs	r3, #0
 80006c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006c4:	f7ff ff5e 	bl	8000584 <__NVIC_GetPriorityGrouping>
 80006c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	68b9      	ldr	r1, [r7, #8]
 80006ce:	6978      	ldr	r0, [r7, #20]
 80006d0:	f7ff ff90 	bl	80005f4 <NVIC_EncodePriority>
 80006d4:	4602      	mov	r2, r0
 80006d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006da:	4611      	mov	r1, r2
 80006dc:	4618      	mov	r0, r3
 80006de:	f7ff ff5f 	bl	80005a0 <__NVIC_SetPriority>
}
 80006e2:	bf00      	nop
 80006e4:	3718      	adds	r7, #24
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}

080006ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006ea:	b580      	push	{r7, lr}
 80006ec:	b082      	sub	sp, #8
 80006ee:	af00      	add	r7, sp, #0
 80006f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006f2:	6878      	ldr	r0, [r7, #4]
 80006f4:	f7ff ffb0 	bl	8000658 <SysTick_Config>
 80006f8:	4603      	mov	r3, r0
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
	...

08000704 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000704:	b480      	push	{r7}
 8000706:	b08b      	sub	sp, #44	@ 0x2c
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800070e:	2300      	movs	r3, #0
 8000710:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000712:	2300      	movs	r3, #0
 8000714:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000716:	e169      	b.n	80009ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000718:	2201      	movs	r2, #1
 800071a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800071c:	fa02 f303 	lsl.w	r3, r2, r3
 8000720:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	69fa      	ldr	r2, [r7, #28]
 8000728:	4013      	ands	r3, r2
 800072a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800072c:	69ba      	ldr	r2, [r7, #24]
 800072e:	69fb      	ldr	r3, [r7, #28]
 8000730:	429a      	cmp	r2, r3
 8000732:	f040 8158 	bne.w	80009e6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	685b      	ldr	r3, [r3, #4]
 800073a:	4a9a      	ldr	r2, [pc, #616]	@ (80009a4 <HAL_GPIO_Init+0x2a0>)
 800073c:	4293      	cmp	r3, r2
 800073e:	d05e      	beq.n	80007fe <HAL_GPIO_Init+0xfa>
 8000740:	4a98      	ldr	r2, [pc, #608]	@ (80009a4 <HAL_GPIO_Init+0x2a0>)
 8000742:	4293      	cmp	r3, r2
 8000744:	d875      	bhi.n	8000832 <HAL_GPIO_Init+0x12e>
 8000746:	4a98      	ldr	r2, [pc, #608]	@ (80009a8 <HAL_GPIO_Init+0x2a4>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d058      	beq.n	80007fe <HAL_GPIO_Init+0xfa>
 800074c:	4a96      	ldr	r2, [pc, #600]	@ (80009a8 <HAL_GPIO_Init+0x2a4>)
 800074e:	4293      	cmp	r3, r2
 8000750:	d86f      	bhi.n	8000832 <HAL_GPIO_Init+0x12e>
 8000752:	4a96      	ldr	r2, [pc, #600]	@ (80009ac <HAL_GPIO_Init+0x2a8>)
 8000754:	4293      	cmp	r3, r2
 8000756:	d052      	beq.n	80007fe <HAL_GPIO_Init+0xfa>
 8000758:	4a94      	ldr	r2, [pc, #592]	@ (80009ac <HAL_GPIO_Init+0x2a8>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d869      	bhi.n	8000832 <HAL_GPIO_Init+0x12e>
 800075e:	4a94      	ldr	r2, [pc, #592]	@ (80009b0 <HAL_GPIO_Init+0x2ac>)
 8000760:	4293      	cmp	r3, r2
 8000762:	d04c      	beq.n	80007fe <HAL_GPIO_Init+0xfa>
 8000764:	4a92      	ldr	r2, [pc, #584]	@ (80009b0 <HAL_GPIO_Init+0x2ac>)
 8000766:	4293      	cmp	r3, r2
 8000768:	d863      	bhi.n	8000832 <HAL_GPIO_Init+0x12e>
 800076a:	4a92      	ldr	r2, [pc, #584]	@ (80009b4 <HAL_GPIO_Init+0x2b0>)
 800076c:	4293      	cmp	r3, r2
 800076e:	d046      	beq.n	80007fe <HAL_GPIO_Init+0xfa>
 8000770:	4a90      	ldr	r2, [pc, #576]	@ (80009b4 <HAL_GPIO_Init+0x2b0>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d85d      	bhi.n	8000832 <HAL_GPIO_Init+0x12e>
 8000776:	2b12      	cmp	r3, #18
 8000778:	d82a      	bhi.n	80007d0 <HAL_GPIO_Init+0xcc>
 800077a:	2b12      	cmp	r3, #18
 800077c:	d859      	bhi.n	8000832 <HAL_GPIO_Init+0x12e>
 800077e:	a201      	add	r2, pc, #4	@ (adr r2, 8000784 <HAL_GPIO_Init+0x80>)
 8000780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000784:	080007ff 	.word	0x080007ff
 8000788:	080007d9 	.word	0x080007d9
 800078c:	080007eb 	.word	0x080007eb
 8000790:	0800082d 	.word	0x0800082d
 8000794:	08000833 	.word	0x08000833
 8000798:	08000833 	.word	0x08000833
 800079c:	08000833 	.word	0x08000833
 80007a0:	08000833 	.word	0x08000833
 80007a4:	08000833 	.word	0x08000833
 80007a8:	08000833 	.word	0x08000833
 80007ac:	08000833 	.word	0x08000833
 80007b0:	08000833 	.word	0x08000833
 80007b4:	08000833 	.word	0x08000833
 80007b8:	08000833 	.word	0x08000833
 80007bc:	08000833 	.word	0x08000833
 80007c0:	08000833 	.word	0x08000833
 80007c4:	08000833 	.word	0x08000833
 80007c8:	080007e1 	.word	0x080007e1
 80007cc:	080007f5 	.word	0x080007f5
 80007d0:	4a79      	ldr	r2, [pc, #484]	@ (80009b8 <HAL_GPIO_Init+0x2b4>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d013      	beq.n	80007fe <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80007d6:	e02c      	b.n	8000832 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80007d8:	683b      	ldr	r3, [r7, #0]
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	623b      	str	r3, [r7, #32]
          break;
 80007de:	e029      	b.n	8000834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	68db      	ldr	r3, [r3, #12]
 80007e4:	3304      	adds	r3, #4
 80007e6:	623b      	str	r3, [r7, #32]
          break;
 80007e8:	e024      	b.n	8000834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	68db      	ldr	r3, [r3, #12]
 80007ee:	3308      	adds	r3, #8
 80007f0:	623b      	str	r3, [r7, #32]
          break;
 80007f2:	e01f      	b.n	8000834 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	68db      	ldr	r3, [r3, #12]
 80007f8:	330c      	adds	r3, #12
 80007fa:	623b      	str	r3, [r7, #32]
          break;
 80007fc:	e01a      	b.n	8000834 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	689b      	ldr	r3, [r3, #8]
 8000802:	2b00      	cmp	r3, #0
 8000804:	d102      	bne.n	800080c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000806:	2304      	movs	r3, #4
 8000808:	623b      	str	r3, [r7, #32]
          break;
 800080a:	e013      	b.n	8000834 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800080c:	683b      	ldr	r3, [r7, #0]
 800080e:	689b      	ldr	r3, [r3, #8]
 8000810:	2b01      	cmp	r3, #1
 8000812:	d105      	bne.n	8000820 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000814:	2308      	movs	r3, #8
 8000816:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	69fa      	ldr	r2, [r7, #28]
 800081c:	611a      	str	r2, [r3, #16]
          break;
 800081e:	e009      	b.n	8000834 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000820:	2308      	movs	r3, #8
 8000822:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	69fa      	ldr	r2, [r7, #28]
 8000828:	615a      	str	r2, [r3, #20]
          break;
 800082a:	e003      	b.n	8000834 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800082c:	2300      	movs	r3, #0
 800082e:	623b      	str	r3, [r7, #32]
          break;
 8000830:	e000      	b.n	8000834 <HAL_GPIO_Init+0x130>
          break;
 8000832:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000834:	69bb      	ldr	r3, [r7, #24]
 8000836:	2bff      	cmp	r3, #255	@ 0xff
 8000838:	d801      	bhi.n	800083e <HAL_GPIO_Init+0x13a>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	e001      	b.n	8000842 <HAL_GPIO_Init+0x13e>
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	3304      	adds	r3, #4
 8000842:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	2bff      	cmp	r3, #255	@ 0xff
 8000848:	d802      	bhi.n	8000850 <HAL_GPIO_Init+0x14c>
 800084a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800084c:	009b      	lsls	r3, r3, #2
 800084e:	e002      	b.n	8000856 <HAL_GPIO_Init+0x152>
 8000850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000852:	3b08      	subs	r3, #8
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	210f      	movs	r1, #15
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	fa01 f303 	lsl.w	r3, r1, r3
 8000864:	43db      	mvns	r3, r3
 8000866:	401a      	ands	r2, r3
 8000868:	6a39      	ldr	r1, [r7, #32]
 800086a:	693b      	ldr	r3, [r7, #16]
 800086c:	fa01 f303 	lsl.w	r3, r1, r3
 8000870:	431a      	orrs	r2, r3
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800087e:	2b00      	cmp	r3, #0
 8000880:	f000 80b1 	beq.w	80009e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000884:	4b4d      	ldr	r3, [pc, #308]	@ (80009bc <HAL_GPIO_Init+0x2b8>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a4c      	ldr	r2, [pc, #304]	@ (80009bc <HAL_GPIO_Init+0x2b8>)
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	6193      	str	r3, [r2, #24]
 8000890:	4b4a      	ldr	r3, [pc, #296]	@ (80009bc <HAL_GPIO_Init+0x2b8>)
 8000892:	699b      	ldr	r3, [r3, #24]
 8000894:	f003 0301 	and.w	r3, r3, #1
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800089c:	4a48      	ldr	r2, [pc, #288]	@ (80009c0 <HAL_GPIO_Init+0x2bc>)
 800089e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008a0:	089b      	lsrs	r3, r3, #2
 80008a2:	3302      	adds	r3, #2
 80008a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80008aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008ac:	f003 0303 	and.w	r3, r3, #3
 80008b0:	009b      	lsls	r3, r3, #2
 80008b2:	220f      	movs	r2, #15
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	43db      	mvns	r3, r3
 80008ba:	68fa      	ldr	r2, [r7, #12]
 80008bc:	4013      	ands	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	4a40      	ldr	r2, [pc, #256]	@ (80009c4 <HAL_GPIO_Init+0x2c0>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d013      	beq.n	80008f0 <HAL_GPIO_Init+0x1ec>
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	4a3f      	ldr	r2, [pc, #252]	@ (80009c8 <HAL_GPIO_Init+0x2c4>)
 80008cc:	4293      	cmp	r3, r2
 80008ce:	d00d      	beq.n	80008ec <HAL_GPIO_Init+0x1e8>
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4a3e      	ldr	r2, [pc, #248]	@ (80009cc <HAL_GPIO_Init+0x2c8>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d007      	beq.n	80008e8 <HAL_GPIO_Init+0x1e4>
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a3d      	ldr	r2, [pc, #244]	@ (80009d0 <HAL_GPIO_Init+0x2cc>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d101      	bne.n	80008e4 <HAL_GPIO_Init+0x1e0>
 80008e0:	2303      	movs	r3, #3
 80008e2:	e006      	b.n	80008f2 <HAL_GPIO_Init+0x1ee>
 80008e4:	2304      	movs	r3, #4
 80008e6:	e004      	b.n	80008f2 <HAL_GPIO_Init+0x1ee>
 80008e8:	2302      	movs	r3, #2
 80008ea:	e002      	b.n	80008f2 <HAL_GPIO_Init+0x1ee>
 80008ec:	2301      	movs	r3, #1
 80008ee:	e000      	b.n	80008f2 <HAL_GPIO_Init+0x1ee>
 80008f0:	2300      	movs	r3, #0
 80008f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80008f4:	f002 0203 	and.w	r2, r2, #3
 80008f8:	0092      	lsls	r2, r2, #2
 80008fa:	4093      	lsls	r3, r2
 80008fc:	68fa      	ldr	r2, [r7, #12]
 80008fe:	4313      	orrs	r3, r2
 8000900:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000902:	492f      	ldr	r1, [pc, #188]	@ (80009c0 <HAL_GPIO_Init+0x2bc>)
 8000904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000906:	089b      	lsrs	r3, r3, #2
 8000908:	3302      	adds	r3, #2
 800090a:	68fa      	ldr	r2, [r7, #12]
 800090c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	685b      	ldr	r3, [r3, #4]
 8000914:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000918:	2b00      	cmp	r3, #0
 800091a:	d006      	beq.n	800092a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800091c:	4b2d      	ldr	r3, [pc, #180]	@ (80009d4 <HAL_GPIO_Init+0x2d0>)
 800091e:	689a      	ldr	r2, [r3, #8]
 8000920:	492c      	ldr	r1, [pc, #176]	@ (80009d4 <HAL_GPIO_Init+0x2d0>)
 8000922:	69bb      	ldr	r3, [r7, #24]
 8000924:	4313      	orrs	r3, r2
 8000926:	608b      	str	r3, [r1, #8]
 8000928:	e006      	b.n	8000938 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800092a:	4b2a      	ldr	r3, [pc, #168]	@ (80009d4 <HAL_GPIO_Init+0x2d0>)
 800092c:	689a      	ldr	r2, [r3, #8]
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	43db      	mvns	r3, r3
 8000932:	4928      	ldr	r1, [pc, #160]	@ (80009d4 <HAL_GPIO_Init+0x2d0>)
 8000934:	4013      	ands	r3, r2
 8000936:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	685b      	ldr	r3, [r3, #4]
 800093c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000940:	2b00      	cmp	r3, #0
 8000942:	d006      	beq.n	8000952 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000944:	4b23      	ldr	r3, [pc, #140]	@ (80009d4 <HAL_GPIO_Init+0x2d0>)
 8000946:	68da      	ldr	r2, [r3, #12]
 8000948:	4922      	ldr	r1, [pc, #136]	@ (80009d4 <HAL_GPIO_Init+0x2d0>)
 800094a:	69bb      	ldr	r3, [r7, #24]
 800094c:	4313      	orrs	r3, r2
 800094e:	60cb      	str	r3, [r1, #12]
 8000950:	e006      	b.n	8000960 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000952:	4b20      	ldr	r3, [pc, #128]	@ (80009d4 <HAL_GPIO_Init+0x2d0>)
 8000954:	68da      	ldr	r2, [r3, #12]
 8000956:	69bb      	ldr	r3, [r7, #24]
 8000958:	43db      	mvns	r3, r3
 800095a:	491e      	ldr	r1, [pc, #120]	@ (80009d4 <HAL_GPIO_Init+0x2d0>)
 800095c:	4013      	ands	r3, r2
 800095e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	685b      	ldr	r3, [r3, #4]
 8000964:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000968:	2b00      	cmp	r3, #0
 800096a:	d006      	beq.n	800097a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800096c:	4b19      	ldr	r3, [pc, #100]	@ (80009d4 <HAL_GPIO_Init+0x2d0>)
 800096e:	685a      	ldr	r2, [r3, #4]
 8000970:	4918      	ldr	r1, [pc, #96]	@ (80009d4 <HAL_GPIO_Init+0x2d0>)
 8000972:	69bb      	ldr	r3, [r7, #24]
 8000974:	4313      	orrs	r3, r2
 8000976:	604b      	str	r3, [r1, #4]
 8000978:	e006      	b.n	8000988 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800097a:	4b16      	ldr	r3, [pc, #88]	@ (80009d4 <HAL_GPIO_Init+0x2d0>)
 800097c:	685a      	ldr	r2, [r3, #4]
 800097e:	69bb      	ldr	r3, [r7, #24]
 8000980:	43db      	mvns	r3, r3
 8000982:	4914      	ldr	r1, [pc, #80]	@ (80009d4 <HAL_GPIO_Init+0x2d0>)
 8000984:	4013      	ands	r3, r2
 8000986:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	685b      	ldr	r3, [r3, #4]
 800098c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000990:	2b00      	cmp	r3, #0
 8000992:	d021      	beq.n	80009d8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000994:	4b0f      	ldr	r3, [pc, #60]	@ (80009d4 <HAL_GPIO_Init+0x2d0>)
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	490e      	ldr	r1, [pc, #56]	@ (80009d4 <HAL_GPIO_Init+0x2d0>)
 800099a:	69bb      	ldr	r3, [r7, #24]
 800099c:	4313      	orrs	r3, r2
 800099e:	600b      	str	r3, [r1, #0]
 80009a0:	e021      	b.n	80009e6 <HAL_GPIO_Init+0x2e2>
 80009a2:	bf00      	nop
 80009a4:	10320000 	.word	0x10320000
 80009a8:	10310000 	.word	0x10310000
 80009ac:	10220000 	.word	0x10220000
 80009b0:	10210000 	.word	0x10210000
 80009b4:	10120000 	.word	0x10120000
 80009b8:	10110000 	.word	0x10110000
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40010000 	.word	0x40010000
 80009c4:	40010800 	.word	0x40010800
 80009c8:	40010c00 	.word	0x40010c00
 80009cc:	40011000 	.word	0x40011000
 80009d0:	40011400 	.word	0x40011400
 80009d4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80009d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000a08 <HAL_GPIO_Init+0x304>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	69bb      	ldr	r3, [r7, #24]
 80009de:	43db      	mvns	r3, r3
 80009e0:	4909      	ldr	r1, [pc, #36]	@ (8000a08 <HAL_GPIO_Init+0x304>)
 80009e2:	4013      	ands	r3, r2
 80009e4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80009e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009e8:	3301      	adds	r3, #1
 80009ea:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80009ec:	683b      	ldr	r3, [r7, #0]
 80009ee:	681a      	ldr	r2, [r3, #0]
 80009f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009f2:	fa22 f303 	lsr.w	r3, r2, r3
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	f47f ae8e 	bne.w	8000718 <HAL_GPIO_Init+0x14>
  }
}
 80009fc:	bf00      	nop
 80009fe:	bf00      	nop
 8000a00:	372c      	adds	r7, #44	@ 0x2c
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	40010400 	.word	0x40010400

08000a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	460b      	mov	r3, r1
 8000a16:	807b      	strh	r3, [r7, #2]
 8000a18:	4613      	mov	r3, r2
 8000a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000a1c:	787b      	ldrb	r3, [r7, #1]
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d003      	beq.n	8000a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000a22:	887a      	ldrh	r2, [r7, #2]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000a28:	e003      	b.n	8000a32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000a2a:	887b      	ldrh	r3, [r7, #2]
 8000a2c:	041a      	lsls	r2, r3, #16
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	611a      	str	r2, [r3, #16]
}
 8000a32:	bf00      	nop
 8000a34:	370c      	adds	r7, #12
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr

08000a3c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	460b      	mov	r3, r1
 8000a46:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000a4e:	887a      	ldrh	r2, [r7, #2]
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	4013      	ands	r3, r2
 8000a54:	041a      	lsls	r2, r3, #16
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	43d9      	mvns	r1, r3
 8000a5a:	887b      	ldrh	r3, [r7, #2]
 8000a5c:	400b      	ands	r3, r1
 8000a5e:	431a      	orrs	r2, r3
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	611a      	str	r2, [r3, #16]
}
 8000a64:	bf00      	nop
 8000a66:	3714      	adds	r7, #20
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
	...

08000a70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d101      	bne.n	8000a82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	e12b      	b.n	8000cda <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d106      	bne.n	8000a9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2200      	movs	r2, #0
 8000a92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8000a96:	6878      	ldr	r0, [r7, #4]
 8000a98:	f7ff fc58 	bl	800034c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	2224      	movs	r2, #36	@ 0x24
 8000aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f022 0201 	bic.w	r2, r2, #1
 8000ab2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000ac2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000ad2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000ad4:	f000 fcda 	bl	800148c <HAL_RCC_GetPCLK1Freq>
 8000ad8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	4a81      	ldr	r2, [pc, #516]	@ (8000ce4 <HAL_I2C_Init+0x274>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d807      	bhi.n	8000af4 <HAL_I2C_Init+0x84>
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	4a80      	ldr	r2, [pc, #512]	@ (8000ce8 <HAL_I2C_Init+0x278>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	bf94      	ite	ls
 8000aec:	2301      	movls	r3, #1
 8000aee:	2300      	movhi	r3, #0
 8000af0:	b2db      	uxtb	r3, r3
 8000af2:	e006      	b.n	8000b02 <HAL_I2C_Init+0x92>
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	4a7d      	ldr	r2, [pc, #500]	@ (8000cec <HAL_I2C_Init+0x27c>)
 8000af8:	4293      	cmp	r3, r2
 8000afa:	bf94      	ite	ls
 8000afc:	2301      	movls	r3, #1
 8000afe:	2300      	movhi	r3, #0
 8000b00:	b2db      	uxtb	r3, r3
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8000b06:	2301      	movs	r3, #1
 8000b08:	e0e7      	b.n	8000cda <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	4a78      	ldr	r2, [pc, #480]	@ (8000cf0 <HAL_I2C_Init+0x280>)
 8000b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b12:	0c9b      	lsrs	r3, r3, #18
 8000b14:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
 8000b1c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	68ba      	ldr	r2, [r7, #8]
 8000b26:	430a      	orrs	r2, r1
 8000b28:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	6a1b      	ldr	r3, [r3, #32]
 8000b30:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	4a6a      	ldr	r2, [pc, #424]	@ (8000ce4 <HAL_I2C_Init+0x274>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d802      	bhi.n	8000b44 <HAL_I2C_Init+0xd4>
 8000b3e:	68bb      	ldr	r3, [r7, #8]
 8000b40:	3301      	adds	r3, #1
 8000b42:	e009      	b.n	8000b58 <HAL_I2C_Init+0xe8>
 8000b44:	68bb      	ldr	r3, [r7, #8]
 8000b46:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000b4a:	fb02 f303 	mul.w	r3, r2, r3
 8000b4e:	4a69      	ldr	r2, [pc, #420]	@ (8000cf4 <HAL_I2C_Init+0x284>)
 8000b50:	fba2 2303 	umull	r2, r3, r2, r3
 8000b54:	099b      	lsrs	r3, r3, #6
 8000b56:	3301      	adds	r3, #1
 8000b58:	687a      	ldr	r2, [r7, #4]
 8000b5a:	6812      	ldr	r2, [r2, #0]
 8000b5c:	430b      	orrs	r3, r1
 8000b5e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	69db      	ldr	r3, [r3, #28]
 8000b66:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8000b6a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	495c      	ldr	r1, [pc, #368]	@ (8000ce4 <HAL_I2C_Init+0x274>)
 8000b74:	428b      	cmp	r3, r1
 8000b76:	d819      	bhi.n	8000bac <HAL_I2C_Init+0x13c>
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	1e59      	subs	r1, r3, #1
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	fbb1 f3f3 	udiv	r3, r1, r3
 8000b86:	1c59      	adds	r1, r3, #1
 8000b88:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8000b8c:	400b      	ands	r3, r1
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d00a      	beq.n	8000ba8 <HAL_I2C_Init+0x138>
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	1e59      	subs	r1, r3, #1
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ba0:	3301      	adds	r3, #1
 8000ba2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ba6:	e051      	b.n	8000c4c <HAL_I2C_Init+0x1dc>
 8000ba8:	2304      	movs	r3, #4
 8000baa:	e04f      	b.n	8000c4c <HAL_I2C_Init+0x1dc>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	689b      	ldr	r3, [r3, #8]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d111      	bne.n	8000bd8 <HAL_I2C_Init+0x168>
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	1e58      	subs	r0, r3, #1
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6859      	ldr	r1, [r3, #4]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	440b      	add	r3, r1
 8000bc2:	fbb0 f3f3 	udiv	r3, r0, r3
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	bf0c      	ite	eq
 8000bd0:	2301      	moveq	r3, #1
 8000bd2:	2300      	movne	r3, #0
 8000bd4:	b2db      	uxtb	r3, r3
 8000bd6:	e012      	b.n	8000bfe <HAL_I2C_Init+0x18e>
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	1e58      	subs	r0, r3, #1
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	6859      	ldr	r1, [r3, #4]
 8000be0:	460b      	mov	r3, r1
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	440b      	add	r3, r1
 8000be6:	0099      	lsls	r1, r3, #2
 8000be8:	440b      	add	r3, r1
 8000bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8000bee:	3301      	adds	r3, #1
 8000bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	bf0c      	ite	eq
 8000bf8:	2301      	moveq	r3, #1
 8000bfa:	2300      	movne	r3, #0
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <HAL_I2C_Init+0x196>
 8000c02:	2301      	movs	r3, #1
 8000c04:	e022      	b.n	8000c4c <HAL_I2C_Init+0x1dc>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d10e      	bne.n	8000c2c <HAL_I2C_Init+0x1bc>
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	1e58      	subs	r0, r3, #1
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	6859      	ldr	r1, [r3, #4]
 8000c16:	460b      	mov	r3, r1
 8000c18:	005b      	lsls	r3, r3, #1
 8000c1a:	440b      	add	r3, r1
 8000c1c:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c20:	3301      	adds	r3, #1
 8000c22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c26:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000c2a:	e00f      	b.n	8000c4c <HAL_I2C_Init+0x1dc>
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	1e58      	subs	r0, r3, #1
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6859      	ldr	r1, [r3, #4]
 8000c34:	460b      	mov	r3, r1
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	440b      	add	r3, r1
 8000c3a:	0099      	lsls	r1, r3, #2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	fbb0 f3f3 	udiv	r3, r0, r3
 8000c42:	3301      	adds	r3, #1
 8000c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000c48:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c4c:	6879      	ldr	r1, [r7, #4]
 8000c4e:	6809      	ldr	r1, [r1, #0]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	69da      	ldr	r2, [r3, #28]
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	6a1b      	ldr	r3, [r3, #32]
 8000c66:	431a      	orrs	r2, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	430a      	orrs	r2, r1
 8000c6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8000c7a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8000c7e:	687a      	ldr	r2, [r7, #4]
 8000c80:	6911      	ldr	r1, [r2, #16]
 8000c82:	687a      	ldr	r2, [r7, #4]
 8000c84:	68d2      	ldr	r2, [r2, #12]
 8000c86:	4311      	orrs	r1, r2
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	6812      	ldr	r2, [r2, #0]
 8000c8c:	430b      	orrs	r3, r1
 8000c8e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	68db      	ldr	r3, [r3, #12]
 8000c96:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	695a      	ldr	r2, [r3, #20]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	699b      	ldr	r3, [r3, #24]
 8000ca2:	431a      	orrs	r2, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	430a      	orrs	r2, r1
 8000caa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f042 0201 	orr.w	r2, r2, #1
 8000cba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2220      	movs	r2, #32
 8000cc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	4618      	mov	r0, r3
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	000186a0 	.word	0x000186a0
 8000ce8:	001e847f 	.word	0x001e847f
 8000cec:	003d08ff 	.word	0x003d08ff
 8000cf0:	431bde83 	.word	0x431bde83
 8000cf4:	10624dd3 	.word	0x10624dd3

08000cf8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d101      	bne.n	8000d0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d06:	2301      	movs	r3, #1
 8000d08:	e272      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	f000 8087 	beq.w	8000e26 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d18:	4b92      	ldr	r3, [pc, #584]	@ (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 030c 	and.w	r3, r3, #12
 8000d20:	2b04      	cmp	r3, #4
 8000d22:	d00c      	beq.n	8000d3e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d24:	4b8f      	ldr	r3, [pc, #572]	@ (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	f003 030c 	and.w	r3, r3, #12
 8000d2c:	2b08      	cmp	r3, #8
 8000d2e:	d112      	bne.n	8000d56 <HAL_RCC_OscConfig+0x5e>
 8000d30:	4b8c      	ldr	r3, [pc, #560]	@ (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d3c:	d10b      	bne.n	8000d56 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d3e:	4b89      	ldr	r3, [pc, #548]	@ (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d06c      	beq.n	8000e24 <HAL_RCC_OscConfig+0x12c>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d168      	bne.n	8000e24 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e24c      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d5e:	d106      	bne.n	8000d6e <HAL_RCC_OscConfig+0x76>
 8000d60:	4b80      	ldr	r3, [pc, #512]	@ (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a7f      	ldr	r2, [pc, #508]	@ (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000d66:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d6a:	6013      	str	r3, [r2, #0]
 8000d6c:	e02e      	b.n	8000dcc <HAL_RCC_OscConfig+0xd4>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d10c      	bne.n	8000d90 <HAL_RCC_OscConfig+0x98>
 8000d76:	4b7b      	ldr	r3, [pc, #492]	@ (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4a7a      	ldr	r2, [pc, #488]	@ (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000d7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d80:	6013      	str	r3, [r2, #0]
 8000d82:	4b78      	ldr	r3, [pc, #480]	@ (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a77      	ldr	r2, [pc, #476]	@ (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000d88:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d8c:	6013      	str	r3, [r2, #0]
 8000d8e:	e01d      	b.n	8000dcc <HAL_RCC_OscConfig+0xd4>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	685b      	ldr	r3, [r3, #4]
 8000d94:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d98:	d10c      	bne.n	8000db4 <HAL_RCC_OscConfig+0xbc>
 8000d9a:	4b72      	ldr	r3, [pc, #456]	@ (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	4a71      	ldr	r2, [pc, #452]	@ (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000da0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000da4:	6013      	str	r3, [r2, #0]
 8000da6:	4b6f      	ldr	r3, [pc, #444]	@ (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	4a6e      	ldr	r2, [pc, #440]	@ (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000dac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000db0:	6013      	str	r3, [r2, #0]
 8000db2:	e00b      	b.n	8000dcc <HAL_RCC_OscConfig+0xd4>
 8000db4:	4b6b      	ldr	r3, [pc, #428]	@ (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a6a      	ldr	r2, [pc, #424]	@ (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000dba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dbe:	6013      	str	r3, [r2, #0]
 8000dc0:	4b68      	ldr	r3, [pc, #416]	@ (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a67      	ldr	r2, [pc, #412]	@ (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000dc6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dca:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d013      	beq.n	8000dfc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dd4:	f7ff fba8 	bl	8000528 <HAL_GetTick>
 8000dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dda:	e008      	b.n	8000dee <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ddc:	f7ff fba4 	bl	8000528 <HAL_GetTick>
 8000de0:	4602      	mov	r2, r0
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	1ad3      	subs	r3, r2, r3
 8000de6:	2b64      	cmp	r3, #100	@ 0x64
 8000de8:	d901      	bls.n	8000dee <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dea:	2303      	movs	r3, #3
 8000dec:	e200      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dee:	4b5d      	ldr	r3, [pc, #372]	@ (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d0f0      	beq.n	8000ddc <HAL_RCC_OscConfig+0xe4>
 8000dfa:	e014      	b.n	8000e26 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dfc:	f7ff fb94 	bl	8000528 <HAL_GetTick>
 8000e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e02:	e008      	b.n	8000e16 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e04:	f7ff fb90 	bl	8000528 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	2b64      	cmp	r3, #100	@ 0x64
 8000e10:	d901      	bls.n	8000e16 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e1ec      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e16:	4b53      	ldr	r3, [pc, #332]	@ (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d1f0      	bne.n	8000e04 <HAL_RCC_OscConfig+0x10c>
 8000e22:	e000      	b.n	8000e26 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d063      	beq.n	8000efa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e32:	4b4c      	ldr	r3, [pc, #304]	@ (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 030c 	and.w	r3, r3, #12
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d00b      	beq.n	8000e56 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e3e:	4b49      	ldr	r3, [pc, #292]	@ (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 030c 	and.w	r3, r3, #12
 8000e46:	2b08      	cmp	r3, #8
 8000e48:	d11c      	bne.n	8000e84 <HAL_RCC_OscConfig+0x18c>
 8000e4a:	4b46      	ldr	r3, [pc, #280]	@ (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d116      	bne.n	8000e84 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e56:	4b43      	ldr	r3, [pc, #268]	@ (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d005      	beq.n	8000e6e <HAL_RCC_OscConfig+0x176>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	691b      	ldr	r3, [r3, #16]
 8000e66:	2b01      	cmp	r3, #1
 8000e68:	d001      	beq.n	8000e6e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	e1c0      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e6e:	4b3d      	ldr	r3, [pc, #244]	@ (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	695b      	ldr	r3, [r3, #20]
 8000e7a:	00db      	lsls	r3, r3, #3
 8000e7c:	4939      	ldr	r1, [pc, #228]	@ (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000e7e:	4313      	orrs	r3, r2
 8000e80:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e82:	e03a      	b.n	8000efa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	691b      	ldr	r3, [r3, #16]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d020      	beq.n	8000ece <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e8c:	4b36      	ldr	r3, [pc, #216]	@ (8000f68 <HAL_RCC_OscConfig+0x270>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e92:	f7ff fb49 	bl	8000528 <HAL_GetTick>
 8000e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e98:	e008      	b.n	8000eac <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e9a:	f7ff fb45 	bl	8000528 <HAL_GetTick>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d901      	bls.n	8000eac <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e1a1      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000eac:	4b2d      	ldr	r3, [pc, #180]	@ (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f003 0302 	and.w	r3, r3, #2
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d0f0      	beq.n	8000e9a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eb8:	4b2a      	ldr	r3, [pc, #168]	@ (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	695b      	ldr	r3, [r3, #20]
 8000ec4:	00db      	lsls	r3, r3, #3
 8000ec6:	4927      	ldr	r1, [pc, #156]	@ (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000ec8:	4313      	orrs	r3, r2
 8000eca:	600b      	str	r3, [r1, #0]
 8000ecc:	e015      	b.n	8000efa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ece:	4b26      	ldr	r3, [pc, #152]	@ (8000f68 <HAL_RCC_OscConfig+0x270>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ed4:	f7ff fb28 	bl	8000528 <HAL_GetTick>
 8000ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eda:	e008      	b.n	8000eee <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000edc:	f7ff fb24 	bl	8000528 <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d901      	bls.n	8000eee <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e180      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eee:	4b1d      	ldr	r3, [pc, #116]	@ (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 0302 	and.w	r3, r3, #2
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d1f0      	bne.n	8000edc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f003 0308 	and.w	r3, r3, #8
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d03a      	beq.n	8000f7c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	699b      	ldr	r3, [r3, #24]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d019      	beq.n	8000f42 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f0e:	4b17      	ldr	r3, [pc, #92]	@ (8000f6c <HAL_RCC_OscConfig+0x274>)
 8000f10:	2201      	movs	r2, #1
 8000f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f14:	f7ff fb08 	bl	8000528 <HAL_GetTick>
 8000f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f1a:	e008      	b.n	8000f2e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f1c:	f7ff fb04 	bl	8000528 <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d901      	bls.n	8000f2e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	e160      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8000f64 <HAL_RCC_OscConfig+0x26c>)
 8000f30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f32:	f003 0302 	and.w	r3, r3, #2
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d0f0      	beq.n	8000f1c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	f000 faba 	bl	80014b4 <RCC_Delay>
 8000f40:	e01c      	b.n	8000f7c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f42:	4b0a      	ldr	r3, [pc, #40]	@ (8000f6c <HAL_RCC_OscConfig+0x274>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f48:	f7ff faee 	bl	8000528 <HAL_GetTick>
 8000f4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f4e:	e00f      	b.n	8000f70 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f50:	f7ff faea 	bl	8000528 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d908      	bls.n	8000f70 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e146      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
 8000f62:	bf00      	nop
 8000f64:	40021000 	.word	0x40021000
 8000f68:	42420000 	.word	0x42420000
 8000f6c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f70:	4b92      	ldr	r3, [pc, #584]	@ (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8000f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f74:	f003 0302 	and.w	r3, r3, #2
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d1e9      	bne.n	8000f50 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f003 0304 	and.w	r3, r3, #4
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	f000 80a6 	beq.w	80010d6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f8e:	4b8b      	ldr	r3, [pc, #556]	@ (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8000f90:	69db      	ldr	r3, [r3, #28]
 8000f92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d10d      	bne.n	8000fb6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f9a:	4b88      	ldr	r3, [pc, #544]	@ (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8000f9c:	69db      	ldr	r3, [r3, #28]
 8000f9e:	4a87      	ldr	r2, [pc, #540]	@ (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8000fa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fa4:	61d3      	str	r3, [r2, #28]
 8000fa6:	4b85      	ldr	r3, [pc, #532]	@ (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fb6:	4b82      	ldr	r3, [pc, #520]	@ (80011c0 <HAL_RCC_OscConfig+0x4c8>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d118      	bne.n	8000ff4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fc2:	4b7f      	ldr	r3, [pc, #508]	@ (80011c0 <HAL_RCC_OscConfig+0x4c8>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a7e      	ldr	r2, [pc, #504]	@ (80011c0 <HAL_RCC_OscConfig+0x4c8>)
 8000fc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fce:	f7ff faab 	bl	8000528 <HAL_GetTick>
 8000fd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd4:	e008      	b.n	8000fe8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fd6:	f7ff faa7 	bl	8000528 <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	2b64      	cmp	r3, #100	@ 0x64
 8000fe2:	d901      	bls.n	8000fe8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fe4:	2303      	movs	r3, #3
 8000fe6:	e103      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fe8:	4b75      	ldr	r3, [pc, #468]	@ (80011c0 <HAL_RCC_OscConfig+0x4c8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d0f0      	beq.n	8000fd6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	68db      	ldr	r3, [r3, #12]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	d106      	bne.n	800100a <HAL_RCC_OscConfig+0x312>
 8000ffc:	4b6f      	ldr	r3, [pc, #444]	@ (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	4a6e      	ldr	r2, [pc, #440]	@ (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	6213      	str	r3, [r2, #32]
 8001008:	e02d      	b.n	8001066 <HAL_RCC_OscConfig+0x36e>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	68db      	ldr	r3, [r3, #12]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10c      	bne.n	800102c <HAL_RCC_OscConfig+0x334>
 8001012:	4b6a      	ldr	r3, [pc, #424]	@ (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8001014:	6a1b      	ldr	r3, [r3, #32]
 8001016:	4a69      	ldr	r2, [pc, #420]	@ (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8001018:	f023 0301 	bic.w	r3, r3, #1
 800101c:	6213      	str	r3, [r2, #32]
 800101e:	4b67      	ldr	r3, [pc, #412]	@ (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8001020:	6a1b      	ldr	r3, [r3, #32]
 8001022:	4a66      	ldr	r2, [pc, #408]	@ (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8001024:	f023 0304 	bic.w	r3, r3, #4
 8001028:	6213      	str	r3, [r2, #32]
 800102a:	e01c      	b.n	8001066 <HAL_RCC_OscConfig+0x36e>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	2b05      	cmp	r3, #5
 8001032:	d10c      	bne.n	800104e <HAL_RCC_OscConfig+0x356>
 8001034:	4b61      	ldr	r3, [pc, #388]	@ (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8001036:	6a1b      	ldr	r3, [r3, #32]
 8001038:	4a60      	ldr	r2, [pc, #384]	@ (80011bc <HAL_RCC_OscConfig+0x4c4>)
 800103a:	f043 0304 	orr.w	r3, r3, #4
 800103e:	6213      	str	r3, [r2, #32]
 8001040:	4b5e      	ldr	r3, [pc, #376]	@ (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8001042:	6a1b      	ldr	r3, [r3, #32]
 8001044:	4a5d      	ldr	r2, [pc, #372]	@ (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8001046:	f043 0301 	orr.w	r3, r3, #1
 800104a:	6213      	str	r3, [r2, #32]
 800104c:	e00b      	b.n	8001066 <HAL_RCC_OscConfig+0x36e>
 800104e:	4b5b      	ldr	r3, [pc, #364]	@ (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8001050:	6a1b      	ldr	r3, [r3, #32]
 8001052:	4a5a      	ldr	r2, [pc, #360]	@ (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8001054:	f023 0301 	bic.w	r3, r3, #1
 8001058:	6213      	str	r3, [r2, #32]
 800105a:	4b58      	ldr	r3, [pc, #352]	@ (80011bc <HAL_RCC_OscConfig+0x4c4>)
 800105c:	6a1b      	ldr	r3, [r3, #32]
 800105e:	4a57      	ldr	r2, [pc, #348]	@ (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8001060:	f023 0304 	bic.w	r3, r3, #4
 8001064:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	68db      	ldr	r3, [r3, #12]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d015      	beq.n	800109a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800106e:	f7ff fa5b 	bl	8000528 <HAL_GetTick>
 8001072:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001074:	e00a      	b.n	800108c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001076:	f7ff fa57 	bl	8000528 <HAL_GetTick>
 800107a:	4602      	mov	r2, r0
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	1ad3      	subs	r3, r2, r3
 8001080:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001084:	4293      	cmp	r3, r2
 8001086:	d901      	bls.n	800108c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001088:	2303      	movs	r3, #3
 800108a:	e0b1      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800108c:	4b4b      	ldr	r3, [pc, #300]	@ (80011bc <HAL_RCC_OscConfig+0x4c4>)
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	f003 0302 	and.w	r3, r3, #2
 8001094:	2b00      	cmp	r3, #0
 8001096:	d0ee      	beq.n	8001076 <HAL_RCC_OscConfig+0x37e>
 8001098:	e014      	b.n	80010c4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800109a:	f7ff fa45 	bl	8000528 <HAL_GetTick>
 800109e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a0:	e00a      	b.n	80010b8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010a2:	f7ff fa41 	bl	8000528 <HAL_GetTick>
 80010a6:	4602      	mov	r2, r0
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	1ad3      	subs	r3, r2, r3
 80010ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d901      	bls.n	80010b8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010b4:	2303      	movs	r3, #3
 80010b6:	e09b      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010b8:	4b40      	ldr	r3, [pc, #256]	@ (80011bc <HAL_RCC_OscConfig+0x4c4>)
 80010ba:	6a1b      	ldr	r3, [r3, #32]
 80010bc:	f003 0302 	and.w	r3, r3, #2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1ee      	bne.n	80010a2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010c4:	7dfb      	ldrb	r3, [r7, #23]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d105      	bne.n	80010d6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010ca:	4b3c      	ldr	r3, [pc, #240]	@ (80011bc <HAL_RCC_OscConfig+0x4c4>)
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	4a3b      	ldr	r2, [pc, #236]	@ (80011bc <HAL_RCC_OscConfig+0x4c4>)
 80010d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010d4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	69db      	ldr	r3, [r3, #28]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 8087 	beq.w	80011ee <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010e0:	4b36      	ldr	r3, [pc, #216]	@ (80011bc <HAL_RCC_OscConfig+0x4c4>)
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f003 030c 	and.w	r3, r3, #12
 80010e8:	2b08      	cmp	r3, #8
 80010ea:	d061      	beq.n	80011b0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d146      	bne.n	8001182 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010f4:	4b33      	ldr	r3, [pc, #204]	@ (80011c4 <HAL_RCC_OscConfig+0x4cc>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010fa:	f7ff fa15 	bl	8000528 <HAL_GetTick>
 80010fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001100:	e008      	b.n	8001114 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001102:	f7ff fa11 	bl	8000528 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d901      	bls.n	8001114 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e06d      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001114:	4b29      	ldr	r3, [pc, #164]	@ (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d1f0      	bne.n	8001102 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a1b      	ldr	r3, [r3, #32]
 8001124:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001128:	d108      	bne.n	800113c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800112a:	4b24      	ldr	r3, [pc, #144]	@ (80011bc <HAL_RCC_OscConfig+0x4c4>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	4921      	ldr	r1, [pc, #132]	@ (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8001138:	4313      	orrs	r3, r2
 800113a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800113c:	4b1f      	ldr	r3, [pc, #124]	@ (80011bc <HAL_RCC_OscConfig+0x4c4>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6a19      	ldr	r1, [r3, #32]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800114c:	430b      	orrs	r3, r1
 800114e:	491b      	ldr	r1, [pc, #108]	@ (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8001150:	4313      	orrs	r3, r2
 8001152:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001154:	4b1b      	ldr	r3, [pc, #108]	@ (80011c4 <HAL_RCC_OscConfig+0x4cc>)
 8001156:	2201      	movs	r2, #1
 8001158:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800115a:	f7ff f9e5 	bl	8000528 <HAL_GetTick>
 800115e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001160:	e008      	b.n	8001174 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001162:	f7ff f9e1 	bl	8000528 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	2b02      	cmp	r3, #2
 800116e:	d901      	bls.n	8001174 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e03d      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001174:	4b11      	ldr	r3, [pc, #68]	@ (80011bc <HAL_RCC_OscConfig+0x4c4>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d0f0      	beq.n	8001162 <HAL_RCC_OscConfig+0x46a>
 8001180:	e035      	b.n	80011ee <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001182:	4b10      	ldr	r3, [pc, #64]	@ (80011c4 <HAL_RCC_OscConfig+0x4cc>)
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001188:	f7ff f9ce 	bl	8000528 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001190:	f7ff f9ca 	bl	8000528 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e026      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011a2:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <HAL_RCC_OscConfig+0x4c4>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d1f0      	bne.n	8001190 <HAL_RCC_OscConfig+0x498>
 80011ae:	e01e      	b.n	80011ee <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	69db      	ldr	r3, [r3, #28]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d107      	bne.n	80011c8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e019      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
 80011bc:	40021000 	.word	0x40021000
 80011c0:	40007000 	.word	0x40007000
 80011c4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011c8:	4b0b      	ldr	r3, [pc, #44]	@ (80011f8 <HAL_RCC_OscConfig+0x500>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a1b      	ldr	r3, [r3, #32]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d106      	bne.n	80011ea <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d001      	beq.n	80011ee <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e000      	b.n	80011f0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	40021000 	.word	0x40021000

080011fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d101      	bne.n	8001210 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e0d0      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001210:	4b6a      	ldr	r3, [pc, #424]	@ (80013bc <HAL_RCC_ClockConfig+0x1c0>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0307 	and.w	r3, r3, #7
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	429a      	cmp	r2, r3
 800121c:	d910      	bls.n	8001240 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800121e:	4b67      	ldr	r3, [pc, #412]	@ (80013bc <HAL_RCC_ClockConfig+0x1c0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f023 0207 	bic.w	r2, r3, #7
 8001226:	4965      	ldr	r1, [pc, #404]	@ (80013bc <HAL_RCC_ClockConfig+0x1c0>)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	4313      	orrs	r3, r2
 800122c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800122e:	4b63      	ldr	r3, [pc, #396]	@ (80013bc <HAL_RCC_ClockConfig+0x1c0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	683a      	ldr	r2, [r7, #0]
 8001238:	429a      	cmp	r2, r3
 800123a:	d001      	beq.n	8001240 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e0b8      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0302 	and.w	r3, r3, #2
 8001248:	2b00      	cmp	r3, #0
 800124a:	d020      	beq.n	800128e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0304 	and.w	r3, r3, #4
 8001254:	2b00      	cmp	r3, #0
 8001256:	d005      	beq.n	8001264 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001258:	4b59      	ldr	r3, [pc, #356]	@ (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 800125a:	685b      	ldr	r3, [r3, #4]
 800125c:	4a58      	ldr	r2, [pc, #352]	@ (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 800125e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001262:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f003 0308 	and.w	r3, r3, #8
 800126c:	2b00      	cmp	r3, #0
 800126e:	d005      	beq.n	800127c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001270:	4b53      	ldr	r3, [pc, #332]	@ (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	4a52      	ldr	r2, [pc, #328]	@ (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001276:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800127a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800127c:	4b50      	ldr	r3, [pc, #320]	@ (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	494d      	ldr	r1, [pc, #308]	@ (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 800128a:	4313      	orrs	r3, r2
 800128c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f003 0301 	and.w	r3, r3, #1
 8001296:	2b00      	cmp	r3, #0
 8001298:	d040      	beq.n	800131c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	685b      	ldr	r3, [r3, #4]
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d107      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012a2:	4b47      	ldr	r3, [pc, #284]	@ (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d115      	bne.n	80012da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e07f      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d107      	bne.n	80012ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012ba:	4b41      	ldr	r3, [pc, #260]	@ (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d109      	bne.n	80012da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e073      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ca:	4b3d      	ldr	r3, [pc, #244]	@ (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d101      	bne.n	80012da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	e06b      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012da:	4b39      	ldr	r3, [pc, #228]	@ (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f023 0203 	bic.w	r2, r3, #3
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	4936      	ldr	r1, [pc, #216]	@ (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 80012e8:	4313      	orrs	r3, r2
 80012ea:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012ec:	f7ff f91c 	bl	8000528 <HAL_GetTick>
 80012f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012f2:	e00a      	b.n	800130a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012f4:	f7ff f918 	bl	8000528 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001302:	4293      	cmp	r3, r2
 8001304:	d901      	bls.n	800130a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e053      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800130a:	4b2d      	ldr	r3, [pc, #180]	@ (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 800130c:	685b      	ldr	r3, [r3, #4]
 800130e:	f003 020c 	and.w	r2, r3, #12
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	009b      	lsls	r3, r3, #2
 8001318:	429a      	cmp	r2, r3
 800131a:	d1eb      	bne.n	80012f4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800131c:	4b27      	ldr	r3, [pc, #156]	@ (80013bc <HAL_RCC_ClockConfig+0x1c0>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	429a      	cmp	r2, r3
 8001328:	d210      	bcs.n	800134c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800132a:	4b24      	ldr	r3, [pc, #144]	@ (80013bc <HAL_RCC_ClockConfig+0x1c0>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f023 0207 	bic.w	r2, r3, #7
 8001332:	4922      	ldr	r1, [pc, #136]	@ (80013bc <HAL_RCC_ClockConfig+0x1c0>)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	4313      	orrs	r3, r2
 8001338:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800133a:	4b20      	ldr	r3, [pc, #128]	@ (80013bc <HAL_RCC_ClockConfig+0x1c0>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	429a      	cmp	r2, r3
 8001346:	d001      	beq.n	800134c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e032      	b.n	80013b2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f003 0304 	and.w	r3, r3, #4
 8001354:	2b00      	cmp	r3, #0
 8001356:	d008      	beq.n	800136a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001358:	4b19      	ldr	r3, [pc, #100]	@ (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	68db      	ldr	r3, [r3, #12]
 8001364:	4916      	ldr	r1, [pc, #88]	@ (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001366:	4313      	orrs	r3, r2
 8001368:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0308 	and.w	r3, r3, #8
 8001372:	2b00      	cmp	r3, #0
 8001374:	d009      	beq.n	800138a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001376:	4b12      	ldr	r3, [pc, #72]	@ (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	691b      	ldr	r3, [r3, #16]
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	490e      	ldr	r1, [pc, #56]	@ (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001386:	4313      	orrs	r3, r2
 8001388:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800138a:	f000 f821 	bl	80013d0 <HAL_RCC_GetSysClockFreq>
 800138e:	4602      	mov	r2, r0
 8001390:	4b0b      	ldr	r3, [pc, #44]	@ (80013c0 <HAL_RCC_ClockConfig+0x1c4>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	091b      	lsrs	r3, r3, #4
 8001396:	f003 030f 	and.w	r3, r3, #15
 800139a:	490a      	ldr	r1, [pc, #40]	@ (80013c4 <HAL_RCC_ClockConfig+0x1c8>)
 800139c:	5ccb      	ldrb	r3, [r1, r3]
 800139e:	fa22 f303 	lsr.w	r3, r2, r3
 80013a2:	4a09      	ldr	r2, [pc, #36]	@ (80013c8 <HAL_RCC_ClockConfig+0x1cc>)
 80013a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013a6:	4b09      	ldr	r3, [pc, #36]	@ (80013cc <HAL_RCC_ClockConfig+0x1d0>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff f87a 	bl	80004a4 <HAL_InitTick>

  return HAL_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40022000 	.word	0x40022000
 80013c0:	40021000 	.word	0x40021000
 80013c4:	08001560 	.word	0x08001560
 80013c8:	20000000 	.word	0x20000000
 80013cc:	20000004 	.word	0x20000004

080013d0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b087      	sub	sp, #28
 80013d4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013d6:	2300      	movs	r3, #0
 80013d8:	60fb      	str	r3, [r7, #12]
 80013da:	2300      	movs	r3, #0
 80013dc:	60bb      	str	r3, [r7, #8]
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001464 <HAL_RCC_GetSysClockFreq+0x94>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 030c 	and.w	r3, r3, #12
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	d002      	beq.n	8001400 <HAL_RCC_GetSysClockFreq+0x30>
 80013fa:	2b08      	cmp	r3, #8
 80013fc:	d003      	beq.n	8001406 <HAL_RCC_GetSysClockFreq+0x36>
 80013fe:	e027      	b.n	8001450 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001400:	4b19      	ldr	r3, [pc, #100]	@ (8001468 <HAL_RCC_GetSysClockFreq+0x98>)
 8001402:	613b      	str	r3, [r7, #16]
      break;
 8001404:	e027      	b.n	8001456 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	0c9b      	lsrs	r3, r3, #18
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	4a17      	ldr	r2, [pc, #92]	@ (800146c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001410:	5cd3      	ldrb	r3, [r2, r3]
 8001412:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d010      	beq.n	8001440 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800141e:	4b11      	ldr	r3, [pc, #68]	@ (8001464 <HAL_RCC_GetSysClockFreq+0x94>)
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	0c5b      	lsrs	r3, r3, #17
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	4a11      	ldr	r2, [pc, #68]	@ (8001470 <HAL_RCC_GetSysClockFreq+0xa0>)
 800142a:	5cd3      	ldrb	r3, [r2, r3]
 800142c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a0d      	ldr	r2, [pc, #52]	@ (8001468 <HAL_RCC_GetSysClockFreq+0x98>)
 8001432:	fb03 f202 	mul.w	r2, r3, r2
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	fbb2 f3f3 	udiv	r3, r2, r3
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	e004      	b.n	800144a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a0c      	ldr	r2, [pc, #48]	@ (8001474 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001444:	fb02 f303 	mul.w	r3, r2, r3
 8001448:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	613b      	str	r3, [r7, #16]
      break;
 800144e:	e002      	b.n	8001456 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001450:	4b05      	ldr	r3, [pc, #20]	@ (8001468 <HAL_RCC_GetSysClockFreq+0x98>)
 8001452:	613b      	str	r3, [r7, #16]
      break;
 8001454:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001456:	693b      	ldr	r3, [r7, #16]
}
 8001458:	4618      	mov	r0, r3
 800145a:	371c      	adds	r7, #28
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	40021000 	.word	0x40021000
 8001468:	007a1200 	.word	0x007a1200
 800146c:	08001578 	.word	0x08001578
 8001470:	08001588 	.word	0x08001588
 8001474:	003d0900 	.word	0x003d0900

08001478 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800147c:	4b02      	ldr	r3, [pc, #8]	@ (8001488 <HAL_RCC_GetHCLKFreq+0x10>)
 800147e:	681b      	ldr	r3, [r3, #0]
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	bc80      	pop	{r7}
 8001486:	4770      	bx	lr
 8001488:	20000000 	.word	0x20000000

0800148c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001490:	f7ff fff2 	bl	8001478 <HAL_RCC_GetHCLKFreq>
 8001494:	4602      	mov	r2, r0
 8001496:	4b05      	ldr	r3, [pc, #20]	@ (80014ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	0a1b      	lsrs	r3, r3, #8
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	4903      	ldr	r1, [pc, #12]	@ (80014b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80014a2:	5ccb      	ldrb	r3, [r1, r3]
 80014a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40021000 	.word	0x40021000
 80014b0:	08001570 	.word	0x08001570

080014b4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80014bc:	4b0a      	ldr	r3, [pc, #40]	@ (80014e8 <RCC_Delay+0x34>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a0a      	ldr	r2, [pc, #40]	@ (80014ec <RCC_Delay+0x38>)
 80014c2:	fba2 2303 	umull	r2, r3, r2, r3
 80014c6:	0a5b      	lsrs	r3, r3, #9
 80014c8:	687a      	ldr	r2, [r7, #4]
 80014ca:	fb02 f303 	mul.w	r3, r2, r3
 80014ce:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80014d0:	bf00      	nop
  }
  while (Delay --);
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	1e5a      	subs	r2, r3, #1
 80014d6:	60fa      	str	r2, [r7, #12]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d1f9      	bne.n	80014d0 <RCC_Delay+0x1c>
}
 80014dc:	bf00      	nop
 80014de:	bf00      	nop
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bc80      	pop	{r7}
 80014e6:	4770      	bx	lr
 80014e8:	20000000 	.word	0x20000000
 80014ec:	10624dd3 	.word	0x10624dd3

080014f0 <memset>:
 80014f0:	4603      	mov	r3, r0
 80014f2:	4402      	add	r2, r0
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d100      	bne.n	80014fa <memset+0xa>
 80014f8:	4770      	bx	lr
 80014fa:	f803 1b01 	strb.w	r1, [r3], #1
 80014fe:	e7f9      	b.n	80014f4 <memset+0x4>

08001500 <__libc_init_array>:
 8001500:	b570      	push	{r4, r5, r6, lr}
 8001502:	2600      	movs	r6, #0
 8001504:	4d0c      	ldr	r5, [pc, #48]	@ (8001538 <__libc_init_array+0x38>)
 8001506:	4c0d      	ldr	r4, [pc, #52]	@ (800153c <__libc_init_array+0x3c>)
 8001508:	1b64      	subs	r4, r4, r5
 800150a:	10a4      	asrs	r4, r4, #2
 800150c:	42a6      	cmp	r6, r4
 800150e:	d109      	bne.n	8001524 <__libc_init_array+0x24>
 8001510:	f000 f81a 	bl	8001548 <_init>
 8001514:	2600      	movs	r6, #0
 8001516:	4d0a      	ldr	r5, [pc, #40]	@ (8001540 <__libc_init_array+0x40>)
 8001518:	4c0a      	ldr	r4, [pc, #40]	@ (8001544 <__libc_init_array+0x44>)
 800151a:	1b64      	subs	r4, r4, r5
 800151c:	10a4      	asrs	r4, r4, #2
 800151e:	42a6      	cmp	r6, r4
 8001520:	d105      	bne.n	800152e <__libc_init_array+0x2e>
 8001522:	bd70      	pop	{r4, r5, r6, pc}
 8001524:	f855 3b04 	ldr.w	r3, [r5], #4
 8001528:	4798      	blx	r3
 800152a:	3601      	adds	r6, #1
 800152c:	e7ee      	b.n	800150c <__libc_init_array+0xc>
 800152e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001532:	4798      	blx	r3
 8001534:	3601      	adds	r6, #1
 8001536:	e7f2      	b.n	800151e <__libc_init_array+0x1e>
 8001538:	0800158c 	.word	0x0800158c
 800153c:	0800158c 	.word	0x0800158c
 8001540:	0800158c 	.word	0x0800158c
 8001544:	08001590 	.word	0x08001590

08001548 <_init>:
 8001548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800154a:	bf00      	nop
 800154c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800154e:	bc08      	pop	{r3}
 8001550:	469e      	mov	lr, r3
 8001552:	4770      	bx	lr

08001554 <_fini>:
 8001554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001556:	bf00      	nop
 8001558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800155a:	bc08      	pop	{r3}
 800155c:	469e      	mov	lr, r3
 800155e:	4770      	bx	lr
