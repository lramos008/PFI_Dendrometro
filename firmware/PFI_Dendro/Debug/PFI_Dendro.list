
PFI_Dendro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007960  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  08007a6c  08007a6c  00008a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f30  08007f30  00009010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007f30  08007f30  00008f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f38  08007f38  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f38  08007f38  00008f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f3c  08007f3c  00008f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08007f40  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002700  20000010  08007f50  00009010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002710  08007f50  00009710  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b80f  00000000  00000000  00009039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d81  00000000  00000000  00014848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  000165d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009b6  00000000  00000000  00017238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001714a  00000000  00000000  00017bee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107da  00000000  00000000  0002ed38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087f7d  00000000  00000000  0003f512  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c748f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000345c  00000000  00000000  000c74d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000ca930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08007a54 	.word	0x08007a54

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08007a54 	.word	0x08007a54

0800014c <__aeabi_uldivmod>:
 800014c:	b953      	cbnz	r3, 8000164 <__aeabi_uldivmod+0x18>
 800014e:	b94a      	cbnz	r2, 8000164 <__aeabi_uldivmod+0x18>
 8000150:	2900      	cmp	r1, #0
 8000152:	bf08      	it	eq
 8000154:	2800      	cmpeq	r0, #0
 8000156:	bf1c      	itt	ne
 8000158:	f04f 31ff 	movne.w	r1, #4294967295
 800015c:	f04f 30ff 	movne.w	r0, #4294967295
 8000160:	f000 b98c 	b.w	800047c <__aeabi_idiv0>
 8000164:	f1ad 0c08 	sub.w	ip, sp, #8
 8000168:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800016c:	f000 f806 	bl	800017c <__udivmoddi4>
 8000170:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000174:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000178:	b004      	add	sp, #16
 800017a:	4770      	bx	lr

0800017c <__udivmoddi4>:
 800017c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000180:	9d08      	ldr	r5, [sp, #32]
 8000182:	468e      	mov	lr, r1
 8000184:	4604      	mov	r4, r0
 8000186:	4688      	mov	r8, r1
 8000188:	2b00      	cmp	r3, #0
 800018a:	d14a      	bne.n	8000222 <__udivmoddi4+0xa6>
 800018c:	428a      	cmp	r2, r1
 800018e:	4617      	mov	r7, r2
 8000190:	d962      	bls.n	8000258 <__udivmoddi4+0xdc>
 8000192:	fab2 f682 	clz	r6, r2
 8000196:	b14e      	cbz	r6, 80001ac <__udivmoddi4+0x30>
 8000198:	f1c6 0320 	rsb	r3, r6, #32
 800019c:	fa01 f806 	lsl.w	r8, r1, r6
 80001a0:	fa20 f303 	lsr.w	r3, r0, r3
 80001a4:	40b7      	lsls	r7, r6
 80001a6:	ea43 0808 	orr.w	r8, r3, r8
 80001aa:	40b4      	lsls	r4, r6
 80001ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80001b0:	fbb8 f1fe 	udiv	r1, r8, lr
 80001b4:	fa1f fc87 	uxth.w	ip, r7
 80001b8:	fb0e 8811 	mls	r8, lr, r1, r8
 80001bc:	fb01 f20c 	mul.w	r2, r1, ip
 80001c0:	0c23      	lsrs	r3, r4, #16
 80001c2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80001c6:	429a      	cmp	r2, r3
 80001c8:	d909      	bls.n	80001de <__udivmoddi4+0x62>
 80001ca:	18fb      	adds	r3, r7, r3
 80001cc:	f101 30ff 	add.w	r0, r1, #4294967295
 80001d0:	f080 80eb 	bcs.w	80003aa <__udivmoddi4+0x22e>
 80001d4:	429a      	cmp	r2, r3
 80001d6:	f240 80e8 	bls.w	80003aa <__udivmoddi4+0x22e>
 80001da:	3902      	subs	r1, #2
 80001dc:	443b      	add	r3, r7
 80001de:	1a9a      	subs	r2, r3, r2
 80001e0:	fbb2 f0fe 	udiv	r0, r2, lr
 80001e4:	fb0e 2210 	mls	r2, lr, r0, r2
 80001e8:	fb00 fc0c 	mul.w	ip, r0, ip
 80001ec:	b2a3      	uxth	r3, r4
 80001ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80001f2:	459c      	cmp	ip, r3
 80001f4:	d909      	bls.n	800020a <__udivmoddi4+0x8e>
 80001f6:	18fb      	adds	r3, r7, r3
 80001f8:	f100 32ff 	add.w	r2, r0, #4294967295
 80001fc:	f080 80d7 	bcs.w	80003ae <__udivmoddi4+0x232>
 8000200:	459c      	cmp	ip, r3
 8000202:	f240 80d4 	bls.w	80003ae <__udivmoddi4+0x232>
 8000206:	443b      	add	r3, r7
 8000208:	3802      	subs	r0, #2
 800020a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800020e:	2100      	movs	r1, #0
 8000210:	eba3 030c 	sub.w	r3, r3, ip
 8000214:	b11d      	cbz	r5, 800021e <__udivmoddi4+0xa2>
 8000216:	2200      	movs	r2, #0
 8000218:	40f3      	lsrs	r3, r6
 800021a:	e9c5 3200 	strd	r3, r2, [r5]
 800021e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000222:	428b      	cmp	r3, r1
 8000224:	d905      	bls.n	8000232 <__udivmoddi4+0xb6>
 8000226:	b10d      	cbz	r5, 800022c <__udivmoddi4+0xb0>
 8000228:	e9c5 0100 	strd	r0, r1, [r5]
 800022c:	2100      	movs	r1, #0
 800022e:	4608      	mov	r0, r1
 8000230:	e7f5      	b.n	800021e <__udivmoddi4+0xa2>
 8000232:	fab3 f183 	clz	r1, r3
 8000236:	2900      	cmp	r1, #0
 8000238:	d146      	bne.n	80002c8 <__udivmoddi4+0x14c>
 800023a:	4573      	cmp	r3, lr
 800023c:	d302      	bcc.n	8000244 <__udivmoddi4+0xc8>
 800023e:	4282      	cmp	r2, r0
 8000240:	f200 8108 	bhi.w	8000454 <__udivmoddi4+0x2d8>
 8000244:	1a84      	subs	r4, r0, r2
 8000246:	eb6e 0203 	sbc.w	r2, lr, r3
 800024a:	2001      	movs	r0, #1
 800024c:	4690      	mov	r8, r2
 800024e:	2d00      	cmp	r5, #0
 8000250:	d0e5      	beq.n	800021e <__udivmoddi4+0xa2>
 8000252:	e9c5 4800 	strd	r4, r8, [r5]
 8000256:	e7e2      	b.n	800021e <__udivmoddi4+0xa2>
 8000258:	2a00      	cmp	r2, #0
 800025a:	f000 8091 	beq.w	8000380 <__udivmoddi4+0x204>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	2e00      	cmp	r6, #0
 8000264:	f040 80a5 	bne.w	80003b2 <__udivmoddi4+0x236>
 8000268:	1a8a      	subs	r2, r1, r2
 800026a:	2101      	movs	r1, #1
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000272:	b280      	uxth	r0, r0
 8000274:	b2bc      	uxth	r4, r7
 8000276:	fbb2 fcfe 	udiv	ip, r2, lr
 800027a:	fb0e 221c 	mls	r2, lr, ip, r2
 800027e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000282:	fb04 f20c 	mul.w	r2, r4, ip
 8000286:	429a      	cmp	r2, r3
 8000288:	d907      	bls.n	800029a <__udivmoddi4+0x11e>
 800028a:	18fb      	adds	r3, r7, r3
 800028c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000290:	d202      	bcs.n	8000298 <__udivmoddi4+0x11c>
 8000292:	429a      	cmp	r2, r3
 8000294:	f200 80e3 	bhi.w	800045e <__udivmoddi4+0x2e2>
 8000298:	46c4      	mov	ip, r8
 800029a:	1a9b      	subs	r3, r3, r2
 800029c:	fbb3 f2fe 	udiv	r2, r3, lr
 80002a0:	fb0e 3312 	mls	r3, lr, r2, r3
 80002a4:	fb02 f404 	mul.w	r4, r2, r4
 80002a8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80002ac:	429c      	cmp	r4, r3
 80002ae:	d907      	bls.n	80002c0 <__udivmoddi4+0x144>
 80002b0:	18fb      	adds	r3, r7, r3
 80002b2:	f102 30ff 	add.w	r0, r2, #4294967295
 80002b6:	d202      	bcs.n	80002be <__udivmoddi4+0x142>
 80002b8:	429c      	cmp	r4, r3
 80002ba:	f200 80cd 	bhi.w	8000458 <__udivmoddi4+0x2dc>
 80002be:	4602      	mov	r2, r0
 80002c0:	1b1b      	subs	r3, r3, r4
 80002c2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80002c6:	e7a5      	b.n	8000214 <__udivmoddi4+0x98>
 80002c8:	f1c1 0620 	rsb	r6, r1, #32
 80002cc:	408b      	lsls	r3, r1
 80002ce:	fa22 f706 	lsr.w	r7, r2, r6
 80002d2:	431f      	orrs	r7, r3
 80002d4:	fa2e fa06 	lsr.w	sl, lr, r6
 80002d8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80002dc:	fbba f8f9 	udiv	r8, sl, r9
 80002e0:	fa0e fe01 	lsl.w	lr, lr, r1
 80002e4:	fa20 f306 	lsr.w	r3, r0, r6
 80002e8:	fb09 aa18 	mls	sl, r9, r8, sl
 80002ec:	fa1f fc87 	uxth.w	ip, r7
 80002f0:	ea43 030e 	orr.w	r3, r3, lr
 80002f4:	fa00 fe01 	lsl.w	lr, r0, r1
 80002f8:	fb08 f00c 	mul.w	r0, r8, ip
 80002fc:	0c1c      	lsrs	r4, r3, #16
 80002fe:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000302:	42a0      	cmp	r0, r4
 8000304:	fa02 f201 	lsl.w	r2, r2, r1
 8000308:	d90a      	bls.n	8000320 <__udivmoddi4+0x1a4>
 800030a:	193c      	adds	r4, r7, r4
 800030c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000310:	f080 809e 	bcs.w	8000450 <__udivmoddi4+0x2d4>
 8000314:	42a0      	cmp	r0, r4
 8000316:	f240 809b 	bls.w	8000450 <__udivmoddi4+0x2d4>
 800031a:	f1a8 0802 	sub.w	r8, r8, #2
 800031e:	443c      	add	r4, r7
 8000320:	1a24      	subs	r4, r4, r0
 8000322:	b298      	uxth	r0, r3
 8000324:	fbb4 f3f9 	udiv	r3, r4, r9
 8000328:	fb09 4413 	mls	r4, r9, r3, r4
 800032c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000330:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x1d0>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f103 30ff 	add.w	r0, r3, #4294967295
 800033e:	f080 8085 	bcs.w	800044c <__udivmoddi4+0x2d0>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8082 	bls.w	800044c <__udivmoddi4+0x2d0>
 8000348:	3b02      	subs	r3, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	fba0 8c02 	umull	r8, ip, r0, r2
 8000358:	4564      	cmp	r4, ip
 800035a:	4643      	mov	r3, r8
 800035c:	46e1      	mov	r9, ip
 800035e:	d364      	bcc.n	800042a <__udivmoddi4+0x2ae>
 8000360:	d061      	beq.n	8000426 <__udivmoddi4+0x2aa>
 8000362:	b15d      	cbz	r5, 800037c <__udivmoddi4+0x200>
 8000364:	ebbe 0203 	subs.w	r2, lr, r3
 8000368:	eb64 0409 	sbc.w	r4, r4, r9
 800036c:	fa04 f606 	lsl.w	r6, r4, r6
 8000370:	fa22 f301 	lsr.w	r3, r2, r1
 8000374:	431e      	orrs	r6, r3
 8000376:	40cc      	lsrs	r4, r1
 8000378:	e9c5 6400 	strd	r6, r4, [r5]
 800037c:	2100      	movs	r1, #0
 800037e:	e74e      	b.n	800021e <__udivmoddi4+0xa2>
 8000380:	fbb1 fcf2 	udiv	ip, r1, r2
 8000384:	0c01      	lsrs	r1, r0, #16
 8000386:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800038a:	b280      	uxth	r0, r0
 800038c:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000390:	463b      	mov	r3, r7
 8000392:	fbb1 f1f7 	udiv	r1, r1, r7
 8000396:	4638      	mov	r0, r7
 8000398:	463c      	mov	r4, r7
 800039a:	46b8      	mov	r8, r7
 800039c:	46be      	mov	lr, r7
 800039e:	2620      	movs	r6, #32
 80003a0:	eba2 0208 	sub.w	r2, r2, r8
 80003a4:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80003a8:	e765      	b.n	8000276 <__udivmoddi4+0xfa>
 80003aa:	4601      	mov	r1, r0
 80003ac:	e717      	b.n	80001de <__udivmoddi4+0x62>
 80003ae:	4610      	mov	r0, r2
 80003b0:	e72b      	b.n	800020a <__udivmoddi4+0x8e>
 80003b2:	f1c6 0120 	rsb	r1, r6, #32
 80003b6:	fa2e fc01 	lsr.w	ip, lr, r1
 80003ba:	40b7      	lsls	r7, r6
 80003bc:	fa0e fe06 	lsl.w	lr, lr, r6
 80003c0:	fa20 f101 	lsr.w	r1, r0, r1
 80003c4:	ea41 010e 	orr.w	r1, r1, lr
 80003c8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003cc:	fbbc f8fe 	udiv	r8, ip, lr
 80003d0:	b2bc      	uxth	r4, r7
 80003d2:	fb0e cc18 	mls	ip, lr, r8, ip
 80003d6:	fb08 f904 	mul.w	r9, r8, r4
 80003da:	0c0a      	lsrs	r2, r1, #16
 80003dc:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80003e0:	40b0      	lsls	r0, r6
 80003e2:	4591      	cmp	r9, r2
 80003e4:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80003e8:	b280      	uxth	r0, r0
 80003ea:	d93e      	bls.n	800046a <__udivmoddi4+0x2ee>
 80003ec:	18ba      	adds	r2, r7, r2
 80003ee:	f108 3cff 	add.w	ip, r8, #4294967295
 80003f2:	d201      	bcs.n	80003f8 <__udivmoddi4+0x27c>
 80003f4:	4591      	cmp	r9, r2
 80003f6:	d81f      	bhi.n	8000438 <__udivmoddi4+0x2bc>
 80003f8:	eba2 0209 	sub.w	r2, r2, r9
 80003fc:	fbb2 f9fe 	udiv	r9, r2, lr
 8000400:	fb09 f804 	mul.w	r8, r9, r4
 8000404:	fb0e 2a19 	mls	sl, lr, r9, r2
 8000408:	b28a      	uxth	r2, r1
 800040a:	ea42 420a 	orr.w	r2, r2, sl, lsl #16
 800040e:	4542      	cmp	r2, r8
 8000410:	d229      	bcs.n	8000466 <__udivmoddi4+0x2ea>
 8000412:	18ba      	adds	r2, r7, r2
 8000414:	f109 31ff 	add.w	r1, r9, #4294967295
 8000418:	d2c2      	bcs.n	80003a0 <__udivmoddi4+0x224>
 800041a:	4542      	cmp	r2, r8
 800041c:	d2c0      	bcs.n	80003a0 <__udivmoddi4+0x224>
 800041e:	f1a9 0102 	sub.w	r1, r9, #2
 8000422:	443a      	add	r2, r7
 8000424:	e7bc      	b.n	80003a0 <__udivmoddi4+0x224>
 8000426:	45c6      	cmp	lr, r8
 8000428:	d29b      	bcs.n	8000362 <__udivmoddi4+0x1e6>
 800042a:	ebb8 0302 	subs.w	r3, r8, r2
 800042e:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000432:	3801      	subs	r0, #1
 8000434:	46e1      	mov	r9, ip
 8000436:	e794      	b.n	8000362 <__udivmoddi4+0x1e6>
 8000438:	eba7 0909 	sub.w	r9, r7, r9
 800043c:	444a      	add	r2, r9
 800043e:	fbb2 f9fe 	udiv	r9, r2, lr
 8000442:	f1a8 0c02 	sub.w	ip, r8, #2
 8000446:	fb09 f804 	mul.w	r8, r9, r4
 800044a:	e7db      	b.n	8000404 <__udivmoddi4+0x288>
 800044c:	4603      	mov	r3, r0
 800044e:	e77d      	b.n	800034c <__udivmoddi4+0x1d0>
 8000450:	46d0      	mov	r8, sl
 8000452:	e765      	b.n	8000320 <__udivmoddi4+0x1a4>
 8000454:	4608      	mov	r0, r1
 8000456:	e6fa      	b.n	800024e <__udivmoddi4+0xd2>
 8000458:	443b      	add	r3, r7
 800045a:	3a02      	subs	r2, #2
 800045c:	e730      	b.n	80002c0 <__udivmoddi4+0x144>
 800045e:	f1ac 0c02 	sub.w	ip, ip, #2
 8000462:	443b      	add	r3, r7
 8000464:	e719      	b.n	800029a <__udivmoddi4+0x11e>
 8000466:	4649      	mov	r1, r9
 8000468:	e79a      	b.n	80003a0 <__udivmoddi4+0x224>
 800046a:	eba2 0209 	sub.w	r2, r2, r9
 800046e:	fbb2 f9fe 	udiv	r9, r2, lr
 8000472:	46c4      	mov	ip, r8
 8000474:	fb09 f804 	mul.w	r8, r9, r4
 8000478:	e7c4      	b.n	8000404 <__udivmoddi4+0x288>
 800047a:	bf00      	nop

0800047c <__aeabi_idiv0>:
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop

08000480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000486:	f001 f891 	bl	80015ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048a:	f000 f833 	bl	80004f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048e:	f000 f8db 	bl	8000648 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000492:	f000 f875 	bl	8000580 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000496:	f000 f8a1 	bl	80005dc <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */
  uint32_t br;
  tFSResult res;
  //Check if file exists
  //res = fsMountSdCard();
  res = fsCheckIfFileExists("genio.txt");
 800049a:	4814      	ldr	r0, [pc, #80]	@ (80004ec <main+0x6c>)
 800049c:	f000 fb96 	bl	8000bcc <fsCheckIfFileExists>
 80004a0:	4603      	mov	r3, r0
 80004a2:	71fb      	strb	r3, [r7, #7]
  res = fsOpen("genio.txt", FILE_MODE_CREATE_NEW);
 80004a4:	2103      	movs	r1, #3
 80004a6:	4811      	ldr	r0, [pc, #68]	@ (80004ec <main+0x6c>)
 80004a8:	f000 fb3c 	bl	8000b24 <fsOpen>
 80004ac:	4603      	mov	r3, r0
 80004ae:	71fb      	strb	r3, [r7, #7]
  if(res == FS_FILE_NOT_FOUND){
 80004b0:	79fb      	ldrb	r3, [r7, #7]
 80004b2:	2b09      	cmp	r3, #9
 80004b4:	d111      	bne.n	80004da <main+0x5a>

	  res = fsOpen("genio.txt", FILE_MODE_CREATE_NEW);
 80004b6:	2103      	movs	r1, #3
 80004b8:	480c      	ldr	r0, [pc, #48]	@ (80004ec <main+0x6c>)
 80004ba:	f000 fb33 	bl	8000b24 <fsOpen>
 80004be:	4603      	mov	r3, r0
 80004c0:	71fb      	strb	r3, [r7, #7]
	  res = fsWrite("Esto es chau", 12, &br);
 80004c2:	463b      	mov	r3, r7
 80004c4:	461a      	mov	r2, r3
 80004c6:	210c      	movs	r1, #12
 80004c8:	4809      	ldr	r0, [pc, #36]	@ (80004f0 <main+0x70>)
 80004ca:	f000 fb61 	bl	8000b90 <fsWrite>
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
	  res = fsClose();
 80004d2:	f000 fb49 	bl	8000b68 <fsClose>
 80004d6:	4603      	mov	r3, r0
 80004d8:	71fb      	strb	r3, [r7, #7]
  }
  res = fsUnmountSdCard();
 80004da:	f000 fb0b 	bl	8000af4 <fsUnmountSdCard>
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(1);
 80004e2:	2001      	movs	r0, #1
 80004e4:	f001 f8c4 	bl	8001670 <HAL_Delay>
 80004e8:	e7fb      	b.n	80004e2 <main+0x62>
 80004ea:	bf00      	nop
 80004ec:	08007a6c 	.word	0x08007a6c
 80004f0:	08007a78 	.word	0x08007a78

080004f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b090      	sub	sp, #64	@ 0x40
 80004f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004fa:	f107 0318 	add.w	r3, r7, #24
 80004fe:	2228      	movs	r2, #40	@ 0x28
 8000500:	2100      	movs	r1, #0
 8000502:	4618      	mov	r0, r3
 8000504:	f007 fa5e 	bl	80079c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000508:	1d3b      	adds	r3, r7, #4
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	605a      	str	r2, [r3, #4]
 8000510:	609a      	str	r2, [r3, #8]
 8000512:	60da      	str	r2, [r3, #12]
 8000514:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000516:	2301      	movs	r3, #1
 8000518:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800051a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800051e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000520:	2300      	movs	r3, #0
 8000522:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000524:	2301      	movs	r3, #1
 8000526:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000528:	2302      	movs	r3, #2
 800052a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800052c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000530:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000532:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000536:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000538:	f107 0318 	add.w	r3, r7, #24
 800053c:	4618      	mov	r0, r3
 800053e:	f001 fc7f 	bl	8001e40 <HAL_RCC_OscConfig>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d001      	beq.n	800054c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000548:	f000 f8ec 	bl	8000724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800054c:	230f      	movs	r3, #15
 800054e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000550:	2302      	movs	r3, #2
 8000552:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000554:	2300      	movs	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000558:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800055c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800055e:	2300      	movs	r3, #0
 8000560:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	2102      	movs	r1, #2
 8000566:	4618      	mov	r0, r3
 8000568:	f001 feec 	bl	8002344 <HAL_RCC_ClockConfig>
 800056c:	4603      	mov	r3, r0
 800056e:	2b00      	cmp	r3, #0
 8000570:	d001      	beq.n	8000576 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000572:	f000 f8d7 	bl	8000724 <Error_Handler>
  }
}
 8000576:	bf00      	nop
 8000578:	3740      	adds	r7, #64	@ 0x40
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
	...

08000580 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000584:	4b12      	ldr	r3, [pc, #72]	@ (80005d0 <MX_I2C1_Init+0x50>)
 8000586:	4a13      	ldr	r2, [pc, #76]	@ (80005d4 <MX_I2C1_Init+0x54>)
 8000588:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800058a:	4b11      	ldr	r3, [pc, #68]	@ (80005d0 <MX_I2C1_Init+0x50>)
 800058c:	4a12      	ldr	r2, [pc, #72]	@ (80005d8 <MX_I2C1_Init+0x58>)
 800058e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000590:	4b0f      	ldr	r3, [pc, #60]	@ (80005d0 <MX_I2C1_Init+0x50>)
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000596:	4b0e      	ldr	r3, [pc, #56]	@ (80005d0 <MX_I2C1_Init+0x50>)
 8000598:	2200      	movs	r2, #0
 800059a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800059c:	4b0c      	ldr	r3, [pc, #48]	@ (80005d0 <MX_I2C1_Init+0x50>)
 800059e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80005a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005a4:	4b0a      	ldr	r3, [pc, #40]	@ (80005d0 <MX_I2C1_Init+0x50>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005aa:	4b09      	ldr	r3, [pc, #36]	@ (80005d0 <MX_I2C1_Init+0x50>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005b0:	4b07      	ldr	r3, [pc, #28]	@ (80005d0 <MX_I2C1_Init+0x50>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005b6:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <MX_I2C1_Init+0x50>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005bc:	4804      	ldr	r0, [pc, #16]	@ (80005d0 <MX_I2C1_Init+0x50>)
 80005be:	f001 fafb 	bl	8001bb8 <HAL_I2C_Init>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005c8:	f000 f8ac 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	2000002c 	.word	0x2000002c
 80005d4:	40005400 	.word	0x40005400
 80005d8:	000186a0 	.word	0x000186a0

080005dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80005e0:	4b17      	ldr	r3, [pc, #92]	@ (8000640 <MX_SPI2_Init+0x64>)
 80005e2:	4a18      	ldr	r2, [pc, #96]	@ (8000644 <MX_SPI2_Init+0x68>)
 80005e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80005e6:	4b16      	ldr	r3, [pc, #88]	@ (8000640 <MX_SPI2_Init+0x64>)
 80005e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80005ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80005ee:	4b14      	ldr	r3, [pc, #80]	@ (8000640 <MX_SPI2_Init+0x64>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80005f4:	4b12      	ldr	r3, [pc, #72]	@ (8000640 <MX_SPI2_Init+0x64>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005fa:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <MX_SPI2_Init+0x64>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000600:	4b0f      	ldr	r3, [pc, #60]	@ (8000640 <MX_SPI2_Init+0x64>)
 8000602:	2200      	movs	r2, #0
 8000604:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000606:	4b0e      	ldr	r3, [pc, #56]	@ (8000640 <MX_SPI2_Init+0x64>)
 8000608:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800060c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800060e:	4b0c      	ldr	r3, [pc, #48]	@ (8000640 <MX_SPI2_Init+0x64>)
 8000610:	2208      	movs	r2, #8
 8000612:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000614:	4b0a      	ldr	r3, [pc, #40]	@ (8000640 <MX_SPI2_Init+0x64>)
 8000616:	2200      	movs	r2, #0
 8000618:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800061a:	4b09      	ldr	r3, [pc, #36]	@ (8000640 <MX_SPI2_Init+0x64>)
 800061c:	2200      	movs	r2, #0
 800061e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000620:	4b07      	ldr	r3, [pc, #28]	@ (8000640 <MX_SPI2_Init+0x64>)
 8000622:	2200      	movs	r2, #0
 8000624:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000626:	4b06      	ldr	r3, [pc, #24]	@ (8000640 <MX_SPI2_Init+0x64>)
 8000628:	220a      	movs	r2, #10
 800062a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800062c:	4804      	ldr	r0, [pc, #16]	@ (8000640 <MX_SPI2_Init+0x64>)
 800062e:	f002 f803 	bl	8002638 <HAL_SPI_Init>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000638:	f000 f874 	bl	8000724 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000080 	.word	0x20000080
 8000644:	40003800 	.word	0x40003800

08000648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b088      	sub	sp, #32
 800064c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	f107 0310 	add.w	r3, r7, #16
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065c:	4b2e      	ldr	r3, [pc, #184]	@ (8000718 <MX_GPIO_Init+0xd0>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	4a2d      	ldr	r2, [pc, #180]	@ (8000718 <MX_GPIO_Init+0xd0>)
 8000662:	f043 0310 	orr.w	r3, r3, #16
 8000666:	6193      	str	r3, [r2, #24]
 8000668:	4b2b      	ldr	r3, [pc, #172]	@ (8000718 <MX_GPIO_Init+0xd0>)
 800066a:	699b      	ldr	r3, [r3, #24]
 800066c:	f003 0310 	and.w	r3, r3, #16
 8000670:	60fb      	str	r3, [r7, #12]
 8000672:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000674:	4b28      	ldr	r3, [pc, #160]	@ (8000718 <MX_GPIO_Init+0xd0>)
 8000676:	699b      	ldr	r3, [r3, #24]
 8000678:	4a27      	ldr	r2, [pc, #156]	@ (8000718 <MX_GPIO_Init+0xd0>)
 800067a:	f043 0320 	orr.w	r3, r3, #32
 800067e:	6193      	str	r3, [r2, #24]
 8000680:	4b25      	ldr	r3, [pc, #148]	@ (8000718 <MX_GPIO_Init+0xd0>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f003 0320 	and.w	r3, r3, #32
 8000688:	60bb      	str	r3, [r7, #8]
 800068a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800068c:	4b22      	ldr	r3, [pc, #136]	@ (8000718 <MX_GPIO_Init+0xd0>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a21      	ldr	r2, [pc, #132]	@ (8000718 <MX_GPIO_Init+0xd0>)
 8000692:	f043 0308 	orr.w	r3, r3, #8
 8000696:	6193      	str	r3, [r2, #24]
 8000698:	4b1f      	ldr	r3, [pc, #124]	@ (8000718 <MX_GPIO_Init+0xd0>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	f003 0308 	and.w	r3, r3, #8
 80006a0:	607b      	str	r3, [r7, #4]
 80006a2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006a4:	4b1c      	ldr	r3, [pc, #112]	@ (8000718 <MX_GPIO_Init+0xd0>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a1b      	ldr	r2, [pc, #108]	@ (8000718 <MX_GPIO_Init+0xd0>)
 80006aa:	f043 0304 	orr.w	r3, r3, #4
 80006ae:	6193      	str	r3, [r2, #24]
 80006b0:	4b19      	ldr	r3, [pc, #100]	@ (8000718 <MX_GPIO_Init+0xd0>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f003 0304 	and.w	r3, r3, #4
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006c2:	4816      	ldr	r0, [pc, #88]	@ (800071c <MX_GPIO_Init+0xd4>)
 80006c4:	f001 fa60 	bl	8001b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80006c8:	2200      	movs	r2, #0
 80006ca:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80006ce:	4814      	ldr	r0, [pc, #80]	@ (8000720 <MX_GPIO_Init+0xd8>)
 80006d0:	f001 fa5a 	bl	8001b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006d4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80006d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006da:	2301      	movs	r3, #1
 80006dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	2302      	movs	r3, #2
 80006e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006e6:	f107 0310 	add.w	r3, r7, #16
 80006ea:	4619      	mov	r1, r3
 80006ec:	480b      	ldr	r0, [pc, #44]	@ (800071c <MX_GPIO_Init+0xd4>)
 80006ee:	f001 f8c7 	bl	8001880 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80006f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f8:	2301      	movs	r3, #1
 80006fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000700:	2302      	movs	r3, #2
 8000702:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000704:	f107 0310 	add.w	r3, r7, #16
 8000708:	4619      	mov	r1, r3
 800070a:	4805      	ldr	r0, [pc, #20]	@ (8000720 <MX_GPIO_Init+0xd8>)
 800070c:	f001 f8b8 	bl	8001880 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000710:	bf00      	nop
 8000712:	3720      	adds	r7, #32
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40021000 	.word	0x40021000
 800071c:	40011000 	.word	0x40011000
 8000720:	40010800 	.word	0x40010800

08000724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000728:	b672      	cpsid	i
}
 800072a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800072c:	bf00      	nop
 800072e:	e7fd      	b.n	800072c <Error_Handler+0x8>

08000730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000736:	4b15      	ldr	r3, [pc, #84]	@ (800078c <HAL_MspInit+0x5c>)
 8000738:	699b      	ldr	r3, [r3, #24]
 800073a:	4a14      	ldr	r2, [pc, #80]	@ (800078c <HAL_MspInit+0x5c>)
 800073c:	f043 0301 	orr.w	r3, r3, #1
 8000740:	6193      	str	r3, [r2, #24]
 8000742:	4b12      	ldr	r3, [pc, #72]	@ (800078c <HAL_MspInit+0x5c>)
 8000744:	699b      	ldr	r3, [r3, #24]
 8000746:	f003 0301 	and.w	r3, r3, #1
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800074e:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <HAL_MspInit+0x5c>)
 8000750:	69db      	ldr	r3, [r3, #28]
 8000752:	4a0e      	ldr	r2, [pc, #56]	@ (800078c <HAL_MspInit+0x5c>)
 8000754:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000758:	61d3      	str	r3, [r2, #28]
 800075a:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <HAL_MspInit+0x5c>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000766:	4b0a      	ldr	r3, [pc, #40]	@ (8000790 <HAL_MspInit+0x60>)
 8000768:	685b      	ldr	r3, [r3, #4]
 800076a:	60fb      	str	r3, [r7, #12]
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	4a04      	ldr	r2, [pc, #16]	@ (8000790 <HAL_MspInit+0x60>)
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000782:	bf00      	nop
 8000784:	3714      	adds	r7, #20
 8000786:	46bd      	mov	sp, r7
 8000788:	bc80      	pop	{r7}
 800078a:	4770      	bx	lr
 800078c:	40021000 	.word	0x40021000
 8000790:	40010000 	.word	0x40010000

08000794 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b088      	sub	sp, #32
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079c:	f107 0310 	add.w	r3, r7, #16
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
 80007a6:	609a      	str	r2, [r3, #8]
 80007a8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a15      	ldr	r2, [pc, #84]	@ (8000804 <HAL_I2C_MspInit+0x70>)
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d123      	bne.n	80007fc <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b4:	4b14      	ldr	r3, [pc, #80]	@ (8000808 <HAL_I2C_MspInit+0x74>)
 80007b6:	699b      	ldr	r3, [r3, #24]
 80007b8:	4a13      	ldr	r2, [pc, #76]	@ (8000808 <HAL_I2C_MspInit+0x74>)
 80007ba:	f043 0308 	orr.w	r3, r3, #8
 80007be:	6193      	str	r3, [r2, #24]
 80007c0:	4b11      	ldr	r3, [pc, #68]	@ (8000808 <HAL_I2C_MspInit+0x74>)
 80007c2:	699b      	ldr	r3, [r3, #24]
 80007c4:	f003 0308 	and.w	r3, r3, #8
 80007c8:	60fb      	str	r3, [r7, #12]
 80007ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80007cc:	23c0      	movs	r3, #192	@ 0xc0
 80007ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007d0:	2312      	movs	r3, #18
 80007d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d4:	2303      	movs	r3, #3
 80007d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d8:	f107 0310 	add.w	r3, r7, #16
 80007dc:	4619      	mov	r1, r3
 80007de:	480b      	ldr	r0, [pc, #44]	@ (800080c <HAL_I2C_MspInit+0x78>)
 80007e0:	f001 f84e 	bl	8001880 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007e4:	4b08      	ldr	r3, [pc, #32]	@ (8000808 <HAL_I2C_MspInit+0x74>)
 80007e6:	69db      	ldr	r3, [r3, #28]
 80007e8:	4a07      	ldr	r2, [pc, #28]	@ (8000808 <HAL_I2C_MspInit+0x74>)
 80007ea:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80007ee:	61d3      	str	r3, [r2, #28]
 80007f0:	4b05      	ldr	r3, [pc, #20]	@ (8000808 <HAL_I2C_MspInit+0x74>)
 80007f2:	69db      	ldr	r3, [r3, #28]
 80007f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80007f8:	60bb      	str	r3, [r7, #8]
 80007fa:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 80007fc:	bf00      	nop
 80007fe:	3720      	adds	r7, #32
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40005400 	.word	0x40005400
 8000808:	40021000 	.word	0x40021000
 800080c:	40010c00 	.word	0x40010c00

08000810 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b088      	sub	sp, #32
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a1c      	ldr	r2, [pc, #112]	@ (800089c <HAL_SPI_MspInit+0x8c>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d131      	bne.n	8000894 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000830:	4b1b      	ldr	r3, [pc, #108]	@ (80008a0 <HAL_SPI_MspInit+0x90>)
 8000832:	69db      	ldr	r3, [r3, #28]
 8000834:	4a1a      	ldr	r2, [pc, #104]	@ (80008a0 <HAL_SPI_MspInit+0x90>)
 8000836:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800083a:	61d3      	str	r3, [r2, #28]
 800083c:	4b18      	ldr	r3, [pc, #96]	@ (80008a0 <HAL_SPI_MspInit+0x90>)
 800083e:	69db      	ldr	r3, [r3, #28]
 8000840:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000844:	60fb      	str	r3, [r7, #12]
 8000846:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000848:	4b15      	ldr	r3, [pc, #84]	@ (80008a0 <HAL_SPI_MspInit+0x90>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	4a14      	ldr	r2, [pc, #80]	@ (80008a0 <HAL_SPI_MspInit+0x90>)
 800084e:	f043 0308 	orr.w	r3, r3, #8
 8000852:	6193      	str	r3, [r2, #24]
 8000854:	4b12      	ldr	r3, [pc, #72]	@ (80008a0 <HAL_SPI_MspInit+0x90>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	f003 0308 	and.w	r3, r3, #8
 800085c:	60bb      	str	r3, [r7, #8]
 800085e:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000860:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000864:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000866:	2302      	movs	r3, #2
 8000868:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800086a:	2303      	movs	r3, #3
 800086c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800086e:	f107 0310 	add.w	r3, r7, #16
 8000872:	4619      	mov	r1, r3
 8000874:	480b      	ldr	r0, [pc, #44]	@ (80008a4 <HAL_SPI_MspInit+0x94>)
 8000876:	f001 f803 	bl	8001880 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800087a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800087e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000888:	f107 0310 	add.w	r3, r7, #16
 800088c:	4619      	mov	r1, r3
 800088e:	4805      	ldr	r0, [pc, #20]	@ (80008a4 <HAL_SPI_MspInit+0x94>)
 8000890:	f000 fff6 	bl	8001880 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000894:	bf00      	nop
 8000896:	3720      	adds	r7, #32
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40003800 	.word	0x40003800
 80008a0:	40021000 	.word	0x40021000
 80008a4:	40010c00 	.word	0x40010c00

080008a8 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80008ac:	4b0d      	ldr	r3, [pc, #52]	@ (80008e4 <SDTimer_Handler+0x3c>)
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d006      	beq.n	80008c4 <SDTimer_Handler+0x1c>
    Timer1--;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	@ (80008e4 <SDTimer_Handler+0x3c>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	b2db      	uxtb	r3, r3
 80008bc:	3b01      	subs	r3, #1
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	4b08      	ldr	r3, [pc, #32]	@ (80008e4 <SDTimer_Handler+0x3c>)
 80008c2:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80008c4:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <SDTimer_Handler+0x40>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d006      	beq.n	80008dc <SDTimer_Handler+0x34>
    Timer2--;
 80008ce:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <SDTimer_Handler+0x40>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	3b01      	subs	r3, #1
 80008d6:	b2da      	uxtb	r2, r3
 80008d8:	4b03      	ldr	r3, [pc, #12]	@ (80008e8 <SDTimer_Handler+0x40>)
 80008da:	701a      	strb	r2, [r3, #0]
}
 80008dc:	bf00      	nop
 80008de:	46bd      	mov	sp, r7
 80008e0:	bc80      	pop	{r7}
 80008e2:	4770      	bx	lr
 80008e4:	200000d9 	.word	0x200000d9
 80008e8:	200000da 	.word	0x200000da

080008ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008f0:	bf00      	nop
 80008f2:	e7fd      	b.n	80008f0 <NMI_Handler+0x4>

080008f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f8:	bf00      	nop
 80008fa:	e7fd      	b.n	80008f8 <HardFault_Handler+0x4>

080008fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000900:	bf00      	nop
 8000902:	e7fd      	b.n	8000900 <MemManage_Handler+0x4>

08000904 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000908:	bf00      	nop
 800090a:	e7fd      	b.n	8000908 <BusFault_Handler+0x4>

0800090c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000910:	bf00      	nop
 8000912:	e7fd      	b.n	8000910 <UsageFault_Handler+0x4>

08000914 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr

08000920 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000924:	bf00      	nop
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr

0800092c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr

08000938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	   FatFsCnt++;
 800093c:	4b0a      	ldr	r3, [pc, #40]	@ (8000968 <SysTick_Handler+0x30>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	b2db      	uxtb	r3, r3
 8000942:	3301      	adds	r3, #1
 8000944:	b2da      	uxtb	r2, r3
 8000946:	4b08      	ldr	r3, [pc, #32]	@ (8000968 <SysTick_Handler+0x30>)
 8000948:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 800094a:	4b07      	ldr	r3, [pc, #28]	@ (8000968 <SysTick_Handler+0x30>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	b2db      	uxtb	r3, r3
 8000950:	2b09      	cmp	r3, #9
 8000952:	d904      	bls.n	800095e <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8000954:	4b04      	ldr	r3, [pc, #16]	@ (8000968 <SysTick_Handler+0x30>)
 8000956:	2200      	movs	r2, #0
 8000958:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 800095a:	f7ff ffa5 	bl	80008a8 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800095e:	f000 fe6b 	bl	8001638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	200000d8 	.word	0x200000d8

0800096c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	bc80      	pop	{r7}
 8000976:	4770      	bx	lr

08000978 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000978:	f7ff fff8 	bl	800096c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800097c:	480b      	ldr	r0, [pc, #44]	@ (80009ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800097e:	490c      	ldr	r1, [pc, #48]	@ (80009b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000980:	4a0c      	ldr	r2, [pc, #48]	@ (80009b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000984:	e002      	b.n	800098c <LoopCopyDataInit>

08000986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098a:	3304      	adds	r3, #4

0800098c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800098c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000990:	d3f9      	bcc.n	8000986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000992:	4a09      	ldr	r2, [pc, #36]	@ (80009b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000994:	4c09      	ldr	r4, [pc, #36]	@ (80009bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000998:	e001      	b.n	800099e <LoopFillZerobss>

0800099a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800099c:	3204      	adds	r2, #4

0800099e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a0:	d3fb      	bcc.n	800099a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009a2:	f007 f825 	bl	80079f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009a6:	f7ff fd6b 	bl	8000480 <main>
  bx lr
 80009aa:	4770      	bx	lr
  ldr r0, =_sdata
 80009ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009b4:	08007f40 	.word	0x08007f40
  ldr r2, =_sbss
 80009b8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009bc:	20002710 	.word	0x20002710

080009c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009c0:	e7fe      	b.n	80009c0 <ADC1_2_IRQHandler>

080009c2 <mountWrapper>:
// ==========================[ Typedefs ]===============================
typedef FRESULT (*FatFsOp)(void *context);												//Define Fatfs callback type

// ======================[ Private functions ]==========================
//Mount wrapper
static FRESULT mountWrapper(void *context){
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b084      	sub	sp, #16
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
	MountContext *realContext = (MountContext *) context;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	60fb      	str	r3, [r7, #12]
	return f_mount(realContext->fs, realContext->path, realContext->opt);
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	6818      	ldr	r0, [r3, #0]
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	6859      	ldr	r1, [r3, #4]
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	7a1b      	ldrb	r3, [r3, #8]
 80009da:	461a      	mov	r2, r3
 80009dc:	f006 f912 	bl	8006c04 <f_mount>
 80009e0:	4603      	mov	r3, r0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <openWrapper>:

//Open Wrapper
static FRESULT openWrapper(void *context){
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b084      	sub	sp, #16
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
	OpenContext *realContext = (OpenContext *) context;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	60fb      	str	r3, [r7, #12]
	return f_open(realContext->file, realContext->path, realContext->mode);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	6818      	ldr	r0, [r3, #0]
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	6859      	ldr	r1, [r3, #4]
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	7a1b      	ldrb	r3, [r3, #8]
 8000a02:	461a      	mov	r2, r3
 8000a04:	f006 f948 	bl	8006c98 <f_open>
 8000a08:	4603      	mov	r3, r0
}
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	3710      	adds	r7, #16
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}

08000a12 <closeWrapper>:

//Close wrapper
static FRESULT closeWrapper(void *context){
 8000a12:	b580      	push	{r7, lr}
 8000a14:	b084      	sub	sp, #16
 8000a16:	af00      	add	r7, sp, #0
 8000a18:	6078      	str	r0, [r7, #4]
	CloseContext *realContext = (CloseContext *) context;
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	60fb      	str	r3, [r7, #12]
	return f_close(realContext->file);
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f006 fe71 	bl	800770a <f_close>
 8000a28:	4603      	mov	r3, r0
}
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	3710      	adds	r7, #16
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}

08000a32 <writeWrapper>:
	ReadContext *realContext = (ReadContext *) context;
	return f_read(realContext->file, realContext->buffer, realContext->bytesToRead, realContext->bytesRead);
}

//Write wrapper
static FRESULT writeWrapper(void *context){
 8000a32:	b580      	push	{r7, lr}
 8000a34:	b084      	sub	sp, #16
 8000a36:	af00      	add	r7, sp, #0
 8000a38:	6078      	str	r0, [r7, #4]
	WriteContext *realContext = (WriteContext *) context;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	60fb      	str	r3, [r7, #12]
	return f_write(realContext->file, realContext->buffer, realContext->bytesToWrite, realContext->bytesWritten);
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	6818      	ldr	r0, [r3, #0]
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	6859      	ldr	r1, [r3, #4]
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	689a      	ldr	r2, [r3, #8]
 8000a4a:	68fb      	ldr	r3, [r7, #12]
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	f006 fb73 	bl	8007138 <f_write>
 8000a52:	4603      	mov	r3, r0
}
 8000a54:	4618      	mov	r0, r3
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <retryFatFsOperation>:

static tFSResult retryFatFsOperation(FatFsOp op, void *context, tFSResult errorCode){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	4613      	mov	r3, r2
 8000a68:	71fb      	strb	r3, [r7, #7]
	uint8_t attemps = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	75fb      	strb	r3, [r7, #23]
	FRESULT res;

	//Try to do the operation
	do{
		res = op(context);
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	68b8      	ldr	r0, [r7, #8]
 8000a72:	4798      	blx	r3
 8000a74:	4603      	mov	r3, r0
 8000a76:	75bb      	strb	r3, [r7, #22]
		if(res == FR_NOT_ENABLED){
 8000a78:	7dbb      	ldrb	r3, [r7, #22]
 8000a7a:	2b0c      	cmp	r3, #12
 8000a7c:	d101      	bne.n	8000a82 <retryFatFsOperation+0x26>
			return FS_ERR_SD_NOT_MOUNTED;
 8000a7e:	2308      	movs	r3, #8
 8000a80:	e00e      	b.n	8000aa0 <retryFatFsOperation+0x44>
		}
		attemps++;
 8000a82:	7dfb      	ldrb	r3, [r7, #23]
 8000a84:	3301      	adds	r3, #1
 8000a86:	75fb      	strb	r3, [r7, #23]
	}while(res != FR_OK && attemps < FS_MAX_RETRIES);
 8000a88:	7dbb      	ldrb	r3, [r7, #22]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d002      	beq.n	8000a94 <retryFatFsOperation+0x38>
 8000a8e:	7dfb      	ldrb	r3, [r7, #23]
 8000a90:	2b13      	cmp	r3, #19
 8000a92:	d9ec      	bls.n	8000a6e <retryFatFsOperation+0x12>

	return (res == FR_OK) ? FS_OK : errorCode;
 8000a94:	7dbb      	ldrb	r3, [r7, #22]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <retryFatFsOperation+0x42>
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	e000      	b.n	8000aa0 <retryFatFsOperation+0x44>
 8000a9e:	2300      	movs	r3, #0
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3718      	adds	r7, #24
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <modeMapping>:

static BYTE modeMapping(tFSOpenMode mode){
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	71fb      	strb	r3, [r7, #7]
	switch(mode){
 8000ab2:	79fb      	ldrb	r3, [r7, #7]
 8000ab4:	2b04      	cmp	r3, #4
 8000ab6:	d817      	bhi.n	8000ae8 <modeMapping+0x40>
 8000ab8:	a201      	add	r2, pc, #4	@ (adr r2, 8000ac0 <modeMapping+0x18>)
 8000aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000abe:	bf00      	nop
 8000ac0:	08000ad5 	.word	0x08000ad5
 8000ac4:	08000ad9 	.word	0x08000ad9
 8000ac8:	08000add 	.word	0x08000add
 8000acc:	08000ae1 	.word	0x08000ae1
 8000ad0:	08000ae5 	.word	0x08000ae5
	case FILE_MODE_READ: 				return FA_READ;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	e008      	b.n	8000aea <modeMapping+0x42>
	case FILE_MODE_WRITE:				return FA_WRITE;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	e006      	b.n	8000aea <modeMapping+0x42>
	case FILE_MODE_APPEND:				return FA_WRITE | FA_OPEN_APPEND;
 8000adc:	2332      	movs	r3, #50	@ 0x32
 8000ade:	e004      	b.n	8000aea <modeMapping+0x42>
	case FILE_MODE_CREATE_NEW: 			return FA_WRITE | FA_CREATE_NEW;
 8000ae0:	2306      	movs	r3, #6
 8000ae2:	e002      	b.n	8000aea <modeMapping+0x42>
	case FILE_MODE_CREATE_ALWAYS:		return FA_WRITE | FA_CREATE_ALWAYS;
 8000ae4:	230a      	movs	r3, #10
 8000ae6:	e000      	b.n	8000aea <modeMapping+0x42>
	default:							return 0;
 8000ae8:	2300      	movs	r3, #0
	}
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bc80      	pop	{r7}
 8000af2:	4770      	bx	lr

08000af4 <fsUnmountSdCard>:
							.opt = 1    };
	//Do mounting operation
	return retryFatFsOperation(mountWrapper, &context, FS_ERR_MOUNT);
}

tFSResult fsUnmountSdCard(void){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
	//Define context
	MountContext context = {.fs = NULL,
 8000afa:	2300      	movs	r3, #0
 8000afc:	607b      	str	r3, [r7, #4]
 8000afe:	4b07      	ldr	r3, [pc, #28]	@ (8000b1c <fsUnmountSdCard+0x28>)
 8000b00:	60bb      	str	r3, [r7, #8]
 8000b02:	2300      	movs	r3, #0
 8000b04:	733b      	strb	r3, [r7, #12]
							.path = "",
							.opt = 0    };
	//Do the unmounting operation
	return retryFatFsOperation(mountWrapper, &context, FS_ERR_UNMOUNT);
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2203      	movs	r2, #3
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	4804      	ldr	r0, [pc, #16]	@ (8000b20 <fsUnmountSdCard+0x2c>)
 8000b0e:	f7ff ffa5 	bl	8000a5c <retryFatFsOperation>
 8000b12:	4603      	mov	r3, r0
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	3710      	adds	r7, #16
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	08007a88 	.word	0x08007a88
 8000b20:	080009c3 	.word	0x080009c3

08000b24 <fsOpen>:

tFSResult fsOpen(const char *path, tFSOpenMode mode){
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b086      	sub	sp, #24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	70fb      	strb	r3, [r7, #3]
	BYTE conversion = modeMapping(mode);
 8000b30:	78fb      	ldrb	r3, [r7, #3]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f7ff ffb8 	bl	8000aa8 <modeMapping>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	75fb      	strb	r3, [r7, #23]
	OpenContext context = {.file = &file,
 8000b3c:	4b08      	ldr	r3, [pc, #32]	@ (8000b60 <fsOpen+0x3c>)
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	7dfb      	ldrb	r3, [r7, #23]
 8000b46:	743b      	strb	r3, [r7, #16]
						   .path = path,
						   .mode = conversion };
	return retryFatFsOperation(openWrapper, &context, FS_ERR_OPEN);
 8000b48:	f107 0308 	add.w	r3, r7, #8
 8000b4c:	2204      	movs	r2, #4
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4804      	ldr	r0, [pc, #16]	@ (8000b64 <fsOpen+0x40>)
 8000b52:	f7ff ff83 	bl	8000a5c <retryFatFsOperation>
 8000b56:	4603      	mov	r3, r0
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	3718      	adds	r7, #24
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	20001130 	.word	0x20001130
 8000b64:	080009eb 	.word	0x080009eb

08000b68 <fsClose>:

tFSResult fsClose(void){
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
	CloseContext context = {.file = &file};
 8000b6e:	4b06      	ldr	r3, [pc, #24]	@ (8000b88 <fsClose+0x20>)
 8000b70:	607b      	str	r3, [r7, #4]
	return retryFatFsOperation(closeWrapper, &context, FS_ERR_CLOSE);
 8000b72:	1d3b      	adds	r3, r7, #4
 8000b74:	2205      	movs	r2, #5
 8000b76:	4619      	mov	r1, r3
 8000b78:	4804      	ldr	r0, [pc, #16]	@ (8000b8c <fsClose+0x24>)
 8000b7a:	f7ff ff6f 	bl	8000a5c <retryFatFsOperation>
 8000b7e:	4603      	mov	r3, r0
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	20001130 	.word	0x20001130
 8000b8c:	08000a13 	.word	0x08000a13

08000b90 <fsWrite>:

	//Do the write operation
	return retryFatFsOperation(readWrapper, &context, FS_ERR_READ);
}

tFSResult fsWrite(const void *buffer, uint32_t bufferSize, uint32_t *bytesWritten){
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b088      	sub	sp, #32
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
	WriteContext context = {.file = &file,
 8000b9c:	4b09      	ldr	r3, [pc, #36]	@ (8000bc4 <fsWrite+0x34>)
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	68fb      	ldr	r3, [r7, #12]
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	61bb      	str	r3, [r7, #24]
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	61fb      	str	r3, [r7, #28]
	 	 	 	 	 	 	.buffer = buffer,
							.bytesToWrite = bufferSize,
							.bytesWritten = (UINT *)bytesWritten };

	//Do the write operation
	return retryFatFsOperation(writeWrapper, &context, FS_ERR_WRITE);
 8000bac:	f107 0310 	add.w	r3, r7, #16
 8000bb0:	2206      	movs	r2, #6
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4804      	ldr	r0, [pc, #16]	@ (8000bc8 <fsWrite+0x38>)
 8000bb6:	f7ff ff51 	bl	8000a5c <retryFatFsOperation>
 8000bba:	4603      	mov	r3, r0
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	3720      	adds	r7, #32
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	20001130 	.word	0x20001130
 8000bc8:	08000a33 	.word	0x08000a33

08000bcc <fsCheckIfFileExists>:

tFSResult fsCheckIfFileExists(const char *filename){
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b084      	sub	sp, #16
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	res = f_stat(filename, &fno);
 8000bd4:	490a      	ldr	r1, [pc, #40]	@ (8000c00 <fsCheckIfFileExists+0x34>)
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f006 fdb7 	bl	800774a <f_stat>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	73fb      	strb	r3, [r7, #15]
	if(res == FR_NOT_ENABLED) return FS_ERR_SD_NOT_MOUNTED;
 8000be0:	7bfb      	ldrb	r3, [r7, #15]
 8000be2:	2b0c      	cmp	r3, #12
 8000be4:	d101      	bne.n	8000bea <fsCheckIfFileExists+0x1e>
 8000be6:	2308      	movs	r3, #8
 8000be8:	e005      	b.n	8000bf6 <fsCheckIfFileExists+0x2a>
	return (res == FR_OK) ? FS_OK : FS_FILE_NOT_FOUND;
 8000bea:	7bfb      	ldrb	r3, [r7, #15]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d101      	bne.n	8000bf4 <fsCheckIfFileExists+0x28>
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	e000      	b.n	8000bf6 <fsCheckIfFileExists+0x2a>
 8000bf4:	2309      	movs	r3, #9
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20002180 	.word	0x20002180

08000c04 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c0e:	4802      	ldr	r0, [pc, #8]	@ (8000c18 <SELECT+0x14>)
 8000c10:	f000 ffba 	bl	8001b88 <HAL_GPIO_WritePin>
}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	40010800 	.word	0x40010800

08000c1c <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8000c20:	2201      	movs	r2, #1
 8000c22:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c26:	4802      	ldr	r0, [pc, #8]	@ (8000c30 <DESELECT+0x14>)
 8000c28:	f000 ffae 	bl	8001b88 <HAL_GPIO_WritePin>
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40010800 	.word	0x40010800

08000c34 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY);
 8000c3e:	bf00      	nop
 8000c40:	4808      	ldr	r0, [pc, #32]	@ (8000c64 <SPI_TxByte+0x30>)
 8000c42:	f002 f86a 	bl	8002d1a <HAL_SPI_GetState>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d1f9      	bne.n	8000c40 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi2, &data, 1, SPI_TIMEOUT);
 8000c4c:	1df9      	adds	r1, r7, #7
 8000c4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c52:	2201      	movs	r2, #1
 8000c54:	4803      	ldr	r0, [pc, #12]	@ (8000c64 <SPI_TxByte+0x30>)
 8000c56:	f001 fd73 	bl	8002740 <HAL_SPI_Transmit>
}
 8000c5a:	bf00      	nop
 8000c5c:	3708      	adds	r7, #8
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	20000080 	.word	0x20000080

08000c68 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b084      	sub	sp, #16
 8000c6c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000c6e:	23ff      	movs	r3, #255	@ 0xff
 8000c70:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8000c72:	2300      	movs	r3, #0
 8000c74:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi2) != HAL_SPI_STATE_READY));
 8000c76:	bf00      	nop
 8000c78:	4809      	ldr	r0, [pc, #36]	@ (8000ca0 <SPI_RxByte+0x38>)
 8000c7a:	f002 f84e 	bl	8002d1a <HAL_SPI_GetState>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d1f9      	bne.n	8000c78 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi2, &dummy, &data, 1, SPI_TIMEOUT);
 8000c84:	1dba      	adds	r2, r7, #6
 8000c86:	1df9      	adds	r1, r7, #7
 8000c88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c8c:	9300      	str	r3, [sp, #0]
 8000c8e:	2301      	movs	r3, #1
 8000c90:	4803      	ldr	r0, [pc, #12]	@ (8000ca0 <SPI_RxByte+0x38>)
 8000c92:	f001 fe99 	bl	80029c8 <HAL_SPI_TransmitReceive>
  
  return data;
 8000c96:	79bb      	ldrb	r3, [r7, #6]
}
 8000c98:	4618      	mov	r0, r3
 8000c9a:	3708      	adds	r7, #8
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	20000080 	.word	0x20000080

08000ca4 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000cac:	f7ff ffdc 	bl	8000c68 <SPI_RxByte>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	701a      	strb	r2, [r3, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf4 <SD_ReadyWait+0x34>)
 8000cc8:	2232      	movs	r2, #50	@ 0x32
 8000cca:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 8000ccc:	f7ff ffcc 	bl	8000c68 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8000cd0:	f7ff ffca 	bl	8000c68 <SPI_RxByte>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000cd8:	79fb      	ldrb	r3, [r7, #7]
 8000cda:	2bff      	cmp	r3, #255	@ 0xff
 8000cdc:	d004      	beq.n	8000ce8 <SD_ReadyWait+0x28>
 8000cde:	4b05      	ldr	r3, [pc, #20]	@ (8000cf4 <SD_ReadyWait+0x34>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	b2db      	uxtb	r3, r3
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d1f3      	bne.n	8000cd0 <SD_ReadyWait+0x10>
  
  return res;
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
}
 8000cea:	4618      	mov	r0, r3
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	200000da 	.word	0x200000da

08000cf8 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8000cfe:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000d02:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 8000d04:	f7ff ff8a 	bl	8000c1c <DESELECT>
  
  for(int i = 0; i < 10; i++)
 8000d08:	2300      	movs	r3, #0
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	e005      	b.n	8000d1a <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000d0e:	20ff      	movs	r0, #255	@ 0xff
 8000d10:	f7ff ff90 	bl	8000c34 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	3301      	adds	r3, #1
 8000d18:	613b      	str	r3, [r7, #16]
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	2b09      	cmp	r3, #9
 8000d1e:	ddf6      	ble.n	8000d0e <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 8000d20:	f7ff ff70 	bl	8000c04 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 8000d24:	2340      	movs	r3, #64	@ 0x40
 8000d26:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8000d38:	2395      	movs	r3, #149	@ 0x95
 8000d3a:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	e009      	b.n	8000d56 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8000d42:	1d3a      	adds	r2, r7, #4
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4413      	add	r3, r2
 8000d48:	781b      	ldrb	r3, [r3, #0]
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f7ff ff72 	bl	8000c34 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	3301      	adds	r3, #1
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	2b05      	cmp	r3, #5
 8000d5a:	ddf2      	ble.n	8000d42 <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 8000d5c:	e002      	b.n	8000d64 <SD_PowerOn+0x6c>
  {
    Count--;
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	3b01      	subs	r3, #1
 8000d62:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8000d64:	f7ff ff80 	bl	8000c68 <SPI_RxByte>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d002      	beq.n	8000d74 <SD_PowerOn+0x7c>
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1f4      	bne.n	8000d5e <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8000d74:	f7ff ff52 	bl	8000c1c <DESELECT>
  SPI_TxByte(0XFF);
 8000d78:	20ff      	movs	r0, #255	@ 0xff
 8000d7a:	f7ff ff5b 	bl	8000c34 <SPI_TxByte>
  
  PowerFlag = 1;
 8000d7e:	4b03      	ldr	r3, [pc, #12]	@ (8000d8c <SD_PowerOn+0x94>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	701a      	strb	r2, [r3, #0]
}
 8000d84:	bf00      	nop
 8000d86:	3718      	adds	r7, #24
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	200022a1 	.word	0x200022a1

08000d90 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000d94:	4b03      	ldr	r3, [pc, #12]	@ (8000da4 <SD_PowerOff+0x14>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	701a      	strb	r2, [r3, #0]
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bc80      	pop	{r7}
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	200022a1 	.word	0x200022a1

08000da8 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 8000dac:	4b02      	ldr	r3, [pc, #8]	@ (8000db8 <SD_CheckPower+0x10>)
 8000dae:	781b      	ldrb	r3, [r3, #0]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr
 8000db8:	200022a1 	.word	0x200022a1

08000dbc <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b084      	sub	sp, #16
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 8000dc6:	4b17      	ldr	r3, [pc, #92]	@ (8000e24 <SD_RxDataBlock+0x68>)
 8000dc8:	220a      	movs	r2, #10
 8000dca:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8000dcc:	f7ff ff4c 	bl	8000c68 <SPI_RxByte>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	2bff      	cmp	r3, #255	@ 0xff
 8000dd8:	d104      	bne.n	8000de4 <SD_RxDataBlock+0x28>
 8000dda:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <SD_RxDataBlock+0x68>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1f3      	bne.n	8000dcc <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	2bfe      	cmp	r3, #254	@ 0xfe
 8000de8:	d001      	beq.n	8000dee <SD_RxDataBlock+0x32>
    return FALSE;
 8000dea:	2300      	movs	r3, #0
 8000dec:	e016      	b.n	8000e1c <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	1c5a      	adds	r2, r3, #1
 8000df2:	607a      	str	r2, [r7, #4]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff55 	bl	8000ca4 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	1c5a      	adds	r2, r3, #1
 8000dfe:	607a      	str	r2, [r7, #4]
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff4f 	bl	8000ca4 <SPI_RxBytePtr>
  } while(btr -= 2);
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	3b02      	subs	r3, #2
 8000e0a:	603b      	str	r3, [r7, #0]
 8000e0c:	683b      	ldr	r3, [r7, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d1ed      	bne.n	8000dee <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 8000e12:	f7ff ff29 	bl	8000c68 <SPI_RxByte>
  SPI_RxByte();
 8000e16:	f7ff ff27 	bl	8000c68 <SPI_RxByte>
  
  return TRUE;
 8000e1a:	2301      	movs	r3, #1
}
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	3710      	adds	r7, #16
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}
 8000e24:	200000d9 	.word	0x200000d9

08000e28 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000e38:	f7ff ff42 	bl	8000cc0 <SD_ReadyWait>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2bff      	cmp	r3, #255	@ 0xff
 8000e40:	d001      	beq.n	8000e46 <SD_TxDataBlock+0x1e>
    return FALSE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	e040      	b.n	8000ec8 <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 8000e46:	78fb      	ldrb	r3, [r7, #3]
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff fef3 	bl	8000c34 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8000e4e:	78fb      	ldrb	r3, [r7, #3]
 8000e50:	2bfd      	cmp	r3, #253	@ 0xfd
 8000e52:	d031      	beq.n	8000eb8 <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	1c5a      	adds	r2, r3, #1
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff fee7 	bl	8000c34 <SPI_TxByte>
      SPI_TxByte(*buff++);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	1c5a      	adds	r2, r3, #1
 8000e6a:	607a      	str	r2, [r7, #4]
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fee0 	bl	8000c34 <SPI_TxByte>
    } while (--wc);
 8000e74:	7bbb      	ldrb	r3, [r7, #14]
 8000e76:	3b01      	subs	r3, #1
 8000e78:	73bb      	strb	r3, [r7, #14]
 8000e7a:	7bbb      	ldrb	r3, [r7, #14]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d1eb      	bne.n	8000e58 <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8000e80:	f7ff fef2 	bl	8000c68 <SPI_RxByte>
    SPI_RxByte();
 8000e84:	f7ff fef0 	bl	8000c68 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 8000e88:	e00b      	b.n	8000ea2 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 8000e8a:	f7ff feed 	bl	8000c68 <SPI_RxByte>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
 8000e94:	f003 031f 	and.w	r3, r3, #31
 8000e98:	2b05      	cmp	r3, #5
 8000e9a:	d006      	beq.n	8000eaa <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8000e9c:	7b7b      	ldrb	r3, [r7, #13]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8000ea2:	7b7b      	ldrb	r3, [r7, #13]
 8000ea4:	2b40      	cmp	r3, #64	@ 0x40
 8000ea6:	d9f0      	bls.n	8000e8a <SD_TxDataBlock+0x62>
 8000ea8:	e000      	b.n	8000eac <SD_TxDataBlock+0x84>
        break;
 8000eaa:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8000eac:	bf00      	nop
 8000eae:	f7ff fedb 	bl	8000c68 <SPI_RxByte>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d0fa      	beq.n	8000eae <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	f003 031f 	and.w	r3, r3, #31
 8000ebe:	2b05      	cmp	r3, #5
 8000ec0:	d101      	bne.n	8000ec6 <SD_TxDataBlock+0x9e>
    return TRUE;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e000      	b.n	8000ec8 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8000ec6:	2300      	movs	r3, #0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	6039      	str	r1, [r7, #0]
 8000eda:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8000edc:	f7ff fef0 	bl	8000cc0 <SD_ReadyWait>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	2bff      	cmp	r3, #255	@ 0xff
 8000ee4:	d001      	beq.n	8000eea <SD_SendCmd+0x1a>
    return 0xFF;
 8000ee6:	23ff      	movs	r3, #255	@ 0xff
 8000ee8:	e040      	b.n	8000f6c <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8000eea:	79fb      	ldrb	r3, [r7, #7]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff fea1 	bl	8000c34 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	0e1b      	lsrs	r3, r3, #24
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff fe9b 	bl	8000c34 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	0c1b      	lsrs	r3, r3, #16
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	4618      	mov	r0, r3
 8000f06:	f7ff fe95 	bl	8000c34 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	0a1b      	lsrs	r3, r3, #8
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	4618      	mov	r0, r3
 8000f12:	f7ff fe8f 	bl	8000c34 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fe8a 	bl	8000c34 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 8000f20:	2300      	movs	r3, #0
 8000f22:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	2b40      	cmp	r3, #64	@ 0x40
 8000f28:	d101      	bne.n	8000f2e <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8000f2a:	2395      	movs	r3, #149	@ 0x95
 8000f2c:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2b48      	cmp	r3, #72	@ 0x48
 8000f32:	d101      	bne.n	8000f38 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8000f34:	2387      	movs	r3, #135	@ 0x87
 8000f36:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fe7a 	bl	8000c34 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	2b4c      	cmp	r3, #76	@ 0x4c
 8000f44:	d101      	bne.n	8000f4a <SD_SendCmd+0x7a>
    SPI_RxByte();
 8000f46:	f7ff fe8f 	bl	8000c68 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 8000f4a:	230a      	movs	r3, #10
 8000f4c:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8000f4e:	f7ff fe8b 	bl	8000c68 <SPI_RxByte>
 8000f52:	4603      	mov	r3, r0
 8000f54:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000f56:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	da05      	bge.n	8000f6a <SD_SendCmd+0x9a>
 8000f5e:	7bbb      	ldrb	r3, [r7, #14]
 8000f60:	3b01      	subs	r3, #1
 8000f62:	73bb      	strb	r3, [r7, #14]
 8000f64:	7bbb      	ldrb	r3, [r7, #14]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d1f1      	bne.n	8000f4e <SD_SendCmd+0x7e>
  
  return res;
 8000f6a:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	3710      	adds	r7, #16
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8000f84:	2301      	movs	r3, #1
 8000f86:	e0d5      	b.n	8001134 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8000f88:	4b6c      	ldr	r3, [pc, #432]	@ (800113c <SD_disk_initialize+0x1c8>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d003      	beq.n	8000f9e <SD_disk_initialize+0x2a>
    return Stat;        
 8000f96:	4b69      	ldr	r3, [pc, #420]	@ (800113c <SD_disk_initialize+0x1c8>)
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	b2db      	uxtb	r3, r3
 8000f9c:	e0ca      	b.n	8001134 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8000f9e:	f7ff feab 	bl	8000cf8 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8000fa2:	f7ff fe2f 	bl	8000c04 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 8000faa:	2100      	movs	r1, #0
 8000fac:	2040      	movs	r0, #64	@ 0x40
 8000fae:	f7ff ff8f 	bl	8000ed0 <SD_SendCmd>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	f040 80a5 	bne.w	8001104 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8000fba:	4b61      	ldr	r3, [pc, #388]	@ (8001140 <SD_disk_initialize+0x1cc>)
 8000fbc:	2264      	movs	r2, #100	@ 0x64
 8000fbe:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8000fc0:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000fc4:	2048      	movs	r0, #72	@ 0x48
 8000fc6:	f7ff ff83 	bl	8000ed0 <SD_SendCmd>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d158      	bne.n	8001082 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73fb      	strb	r3, [r7, #15]
 8000fd4:	e00c      	b.n	8000ff0 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8000fd6:	7bfc      	ldrb	r4, [r7, #15]
 8000fd8:	f7ff fe46 	bl	8000c68 <SPI_RxByte>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	461a      	mov	r2, r3
 8000fe0:	f104 0310 	add.w	r3, r4, #16
 8000fe4:	443b      	add	r3, r7
 8000fe6:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	3301      	adds	r3, #1
 8000fee:	73fb      	strb	r3, [r7, #15]
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d9ef      	bls.n	8000fd6 <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 8000ff6:	7abb      	ldrb	r3, [r7, #10]
 8000ff8:	2b01      	cmp	r3, #1
 8000ffa:	f040 8083 	bne.w	8001104 <SD_disk_initialize+0x190>
 8000ffe:	7afb      	ldrb	r3, [r7, #11]
 8001000:	2baa      	cmp	r3, #170	@ 0xaa
 8001002:	d17f      	bne.n	8001104 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001004:	2100      	movs	r1, #0
 8001006:	2077      	movs	r0, #119	@ 0x77
 8001008:	f7ff ff62 	bl	8000ed0 <SD_SendCmd>
 800100c:	4603      	mov	r3, r0
 800100e:	2b01      	cmp	r3, #1
 8001010:	d807      	bhi.n	8001022 <SD_disk_initialize+0xae>
 8001012:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001016:	2069      	movs	r0, #105	@ 0x69
 8001018:	f7ff ff5a 	bl	8000ed0 <SD_SendCmd>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d005      	beq.n	800102e <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001022:	4b47      	ldr	r3, [pc, #284]	@ (8001140 <SD_disk_initialize+0x1cc>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	b2db      	uxtb	r3, r3
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1eb      	bne.n	8001004 <SD_disk_initialize+0x90>
 800102c:	e000      	b.n	8001030 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 800102e:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 8001030:	4b43      	ldr	r3, [pc, #268]	@ (8001140 <SD_disk_initialize+0x1cc>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	b2db      	uxtb	r3, r3
 8001036:	2b00      	cmp	r3, #0
 8001038:	d064      	beq.n	8001104 <SD_disk_initialize+0x190>
 800103a:	2100      	movs	r1, #0
 800103c:	207a      	movs	r0, #122	@ 0x7a
 800103e:	f7ff ff47 	bl	8000ed0 <SD_SendCmd>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d15d      	bne.n	8001104 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001048:	2300      	movs	r3, #0
 800104a:	73fb      	strb	r3, [r7, #15]
 800104c:	e00c      	b.n	8001068 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 800104e:	7bfc      	ldrb	r4, [r7, #15]
 8001050:	f7ff fe0a 	bl	8000c68 <SPI_RxByte>
 8001054:	4603      	mov	r3, r0
 8001056:	461a      	mov	r2, r3
 8001058:	f104 0310 	add.w	r3, r4, #16
 800105c:	443b      	add	r3, r7
 800105e:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	3301      	adds	r3, #1
 8001066:	73fb      	strb	r3, [r7, #15]
 8001068:	7bfb      	ldrb	r3, [r7, #15]
 800106a:	2b03      	cmp	r3, #3
 800106c:	d9ef      	bls.n	800104e <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 800106e:	7a3b      	ldrb	r3, [r7, #8]
 8001070:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <SD_disk_initialize+0x108>
 8001078:	2306      	movs	r3, #6
 800107a:	e000      	b.n	800107e <SD_disk_initialize+0x10a>
 800107c:	2302      	movs	r3, #2
 800107e:	73bb      	strb	r3, [r7, #14]
 8001080:	e040      	b.n	8001104 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001082:	2100      	movs	r1, #0
 8001084:	2077      	movs	r0, #119	@ 0x77
 8001086:	f7ff ff23 	bl	8000ed0 <SD_SendCmd>
 800108a:	4603      	mov	r3, r0
 800108c:	2b01      	cmp	r3, #1
 800108e:	d808      	bhi.n	80010a2 <SD_disk_initialize+0x12e>
 8001090:	2100      	movs	r1, #0
 8001092:	2069      	movs	r0, #105	@ 0x69
 8001094:	f7ff ff1c 	bl	8000ed0 <SD_SendCmd>
 8001098:	4603      	mov	r3, r0
 800109a:	2b01      	cmp	r3, #1
 800109c:	d801      	bhi.n	80010a2 <SD_disk_initialize+0x12e>
 800109e:	2302      	movs	r3, #2
 80010a0:	e000      	b.n	80010a4 <SD_disk_initialize+0x130>
 80010a2:	2301      	movs	r3, #1
 80010a4:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 80010a6:	7bbb      	ldrb	r3, [r7, #14]
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d10e      	bne.n	80010ca <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 80010ac:	2100      	movs	r1, #0
 80010ae:	2077      	movs	r0, #119	@ 0x77
 80010b0:	f7ff ff0e 	bl	8000ed0 <SD_SendCmd>
 80010b4:	4603      	mov	r3, r0
 80010b6:	2b01      	cmp	r3, #1
 80010b8:	d80e      	bhi.n	80010d8 <SD_disk_initialize+0x164>
 80010ba:	2100      	movs	r1, #0
 80010bc:	2069      	movs	r0, #105	@ 0x69
 80010be:	f7ff ff07 	bl	8000ed0 <SD_SendCmd>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d107      	bne.n	80010d8 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 80010c8:	e00d      	b.n	80010e6 <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 80010ca:	2100      	movs	r1, #0
 80010cc:	2041      	movs	r0, #65	@ 0x41
 80010ce:	f7ff feff 	bl	8000ed0 <SD_SendCmd>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d005      	beq.n	80010e4 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 80010d8:	4b19      	ldr	r3, [pc, #100]	@ (8001140 <SD_disk_initialize+0x1cc>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1e1      	bne.n	80010a6 <SD_disk_initialize+0x132>
 80010e2:	e000      	b.n	80010e6 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80010e4:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 80010e6:	4b16      	ldr	r3, [pc, #88]	@ (8001140 <SD_disk_initialize+0x1cc>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d007      	beq.n	8001100 <SD_disk_initialize+0x18c>
 80010f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010f4:	2050      	movs	r0, #80	@ 0x50
 80010f6:	f7ff feeb 	bl	8000ed0 <SD_SendCmd>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 8001104:	4a0f      	ldr	r2, [pc, #60]	@ (8001144 <SD_disk_initialize+0x1d0>)
 8001106:	7bbb      	ldrb	r3, [r7, #14]
 8001108:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 800110a:	f7ff fd87 	bl	8000c1c <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 800110e:	f7ff fdab 	bl	8000c68 <SPI_RxByte>
  
  if (type) 
 8001112:	7bbb      	ldrb	r3, [r7, #14]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d008      	beq.n	800112a <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 8001118:	4b08      	ldr	r3, [pc, #32]	@ (800113c <SD_disk_initialize+0x1c8>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	b2db      	uxtb	r3, r3
 800111e:	f023 0301 	bic.w	r3, r3, #1
 8001122:	b2da      	uxtb	r2, r3
 8001124:	4b05      	ldr	r3, [pc, #20]	@ (800113c <SD_disk_initialize+0x1c8>)
 8001126:	701a      	strb	r2, [r3, #0]
 8001128:	e001      	b.n	800112e <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 800112a:	f7ff fe31 	bl	8000d90 <SD_PowerOff>
  }
  
  return Stat;
 800112e:	4b03      	ldr	r3, [pc, #12]	@ (800113c <SD_disk_initialize+0x1c8>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	b2db      	uxtb	r3, r3
}
 8001134:	4618      	mov	r0, r3
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	bd90      	pop	{r4, r7, pc}
 800113c:	20000004 	.word	0x20000004
 8001140:	200000d9 	.word	0x200000d9
 8001144:	200022a0 	.word	0x200022a0

08001148 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <SD_disk_status+0x14>
    return STA_NOINIT; 
 8001158:	2301      	movs	r3, #1
 800115a:	e002      	b.n	8001162 <SD_disk_status+0x1a>
  
  return Stat;
 800115c:	4b03      	ldr	r3, [pc, #12]	@ (800116c <SD_disk_status+0x24>)
 800115e:	781b      	ldrb	r3, [r3, #0]
 8001160:	b2db      	uxtb	r3, r3
}
 8001162:	4618      	mov	r0, r3
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr
 800116c:	20000004 	.word	0x20000004

08001170 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	60b9      	str	r1, [r7, #8]
 8001178:	607a      	str	r2, [r7, #4]
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	4603      	mov	r3, r0
 800117e:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001180:	7bfb      	ldrb	r3, [r7, #15]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d102      	bne.n	800118c <SD_disk_read+0x1c>
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <SD_disk_read+0x20>
    return RES_PARERR;
 800118c:	2304      	movs	r3, #4
 800118e:	e051      	b.n	8001234 <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8001190:	4b2a      	ldr	r3, [pc, #168]	@ (800123c <SD_disk_read+0xcc>)
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	b2db      	uxtb	r3, r3
 8001196:	f003 0301 	and.w	r3, r3, #1
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <SD_disk_read+0x32>
    return RES_NOTRDY;
 800119e:	2303      	movs	r3, #3
 80011a0:	e048      	b.n	8001234 <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 80011a2:	4b27      	ldr	r3, [pc, #156]	@ (8001240 <SD_disk_read+0xd0>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	f003 0304 	and.w	r3, r3, #4
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d102      	bne.n	80011b4 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	025b      	lsls	r3, r3, #9
 80011b2:	607b      	str	r3, [r7, #4]
  
  SELECT();
 80011b4:	f7ff fd26 	bl	8000c04 <SELECT>
  
  if (count == 1) 
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d111      	bne.n	80011e2 <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	2051      	movs	r0, #81	@ 0x51
 80011c2:	f7ff fe85 	bl	8000ed0 <SD_SendCmd>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d129      	bne.n	8001220 <SD_disk_read+0xb0>
 80011cc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011d0:	68b8      	ldr	r0, [r7, #8]
 80011d2:	f7ff fdf3 	bl	8000dbc <SD_RxDataBlock>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d021      	beq.n	8001220 <SD_disk_read+0xb0>
      count = 0;
 80011dc:	2300      	movs	r3, #0
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	e01e      	b.n	8001220 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 80011e2:	6879      	ldr	r1, [r7, #4]
 80011e4:	2052      	movs	r0, #82	@ 0x52
 80011e6:	f7ff fe73 	bl	8000ed0 <SD_SendCmd>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d117      	bne.n	8001220 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 80011f0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011f4:	68b8      	ldr	r0, [r7, #8]
 80011f6:	f7ff fde1 	bl	8000dbc <SD_RxDataBlock>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d00a      	beq.n	8001216 <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001206:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	3b01      	subs	r3, #1
 800120c:	603b      	str	r3, [r7, #0]
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d1ed      	bne.n	80011f0 <SD_disk_read+0x80>
 8001214:	e000      	b.n	8001218 <SD_disk_read+0xa8>
          break;
 8001216:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8001218:	2100      	movs	r1, #0
 800121a:	204c      	movs	r0, #76	@ 0x4c
 800121c:	f7ff fe58 	bl	8000ed0 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8001220:	f7ff fcfc 	bl	8000c1c <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001224:	f7ff fd20 	bl	8000c68 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	2b00      	cmp	r3, #0
 800122c:	bf14      	ite	ne
 800122e:	2301      	movne	r3, #1
 8001230:	2300      	moveq	r3, #0
 8001232:	b2db      	uxtb	r3, r3
}
 8001234:	4618      	mov	r0, r3
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000004 	.word	0x20000004
 8001240:	200022a0 	.word	0x200022a0

08001244 <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	60b9      	str	r1, [r7, #8]
 800124c:	607a      	str	r2, [r7, #4]
 800124e:	603b      	str	r3, [r7, #0]
 8001250:	4603      	mov	r3, r0
 8001252:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001254:	7bfb      	ldrb	r3, [r7, #15]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d102      	bne.n	8001260 <SD_disk_write+0x1c>
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <SD_disk_write+0x20>
    return RES_PARERR;
 8001260:	2304      	movs	r3, #4
 8001262:	e06b      	b.n	800133c <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8001264:	4b37      	ldr	r3, [pc, #220]	@ (8001344 <SD_disk_write+0x100>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	b2db      	uxtb	r3, r3
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001272:	2303      	movs	r3, #3
 8001274:	e062      	b.n	800133c <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8001276:	4b33      	ldr	r3, [pc, #204]	@ (8001344 <SD_disk_write+0x100>)
 8001278:	781b      	ldrb	r3, [r3, #0]
 800127a:	b2db      	uxtb	r3, r3
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001284:	2302      	movs	r3, #2
 8001286:	e059      	b.n	800133c <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8001288:	4b2f      	ldr	r3, [pc, #188]	@ (8001348 <SD_disk_write+0x104>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	f003 0304 	and.w	r3, r3, #4
 8001290:	2b00      	cmp	r3, #0
 8001292:	d102      	bne.n	800129a <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	025b      	lsls	r3, r3, #9
 8001298:	607b      	str	r3, [r7, #4]
  
  SELECT();
 800129a:	f7ff fcb3 	bl	8000c04 <SELECT>
  
  if (count == 1) 
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d110      	bne.n	80012c6 <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80012a4:	6879      	ldr	r1, [r7, #4]
 80012a6:	2058      	movs	r0, #88	@ 0x58
 80012a8:	f7ff fe12 	bl	8000ed0 <SD_SendCmd>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d13a      	bne.n	8001328 <SD_disk_write+0xe4>
 80012b2:	21fe      	movs	r1, #254	@ 0xfe
 80012b4:	68b8      	ldr	r0, [r7, #8]
 80012b6:	f7ff fdb7 	bl	8000e28 <SD_TxDataBlock>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d033      	beq.n	8001328 <SD_disk_write+0xe4>
      count = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	603b      	str	r3, [r7, #0]
 80012c4:	e030      	b.n	8001328 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 80012c6:	4b20      	ldr	r3, [pc, #128]	@ (8001348 <SD_disk_write+0x104>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d007      	beq.n	80012e2 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 80012d2:	2100      	movs	r1, #0
 80012d4:	2077      	movs	r0, #119	@ 0x77
 80012d6:	f7ff fdfb 	bl	8000ed0 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 80012da:	6839      	ldr	r1, [r7, #0]
 80012dc:	2057      	movs	r0, #87	@ 0x57
 80012de:	f7ff fdf7 	bl	8000ed0 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 80012e2:	6879      	ldr	r1, [r7, #4]
 80012e4:	2059      	movs	r0, #89	@ 0x59
 80012e6:	f7ff fdf3 	bl	8000ed0 <SD_SendCmd>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d11b      	bne.n	8001328 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 80012f0:	21fc      	movs	r1, #252	@ 0xfc
 80012f2:	68b8      	ldr	r0, [r7, #8]
 80012f4:	f7ff fd98 	bl	8000e28 <SD_TxDataBlock>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00a      	beq.n	8001314 <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001304:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	3b01      	subs	r3, #1
 800130a:	603b      	str	r3, [r7, #0]
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1ee      	bne.n	80012f0 <SD_disk_write+0xac>
 8001312:	e000      	b.n	8001316 <SD_disk_write+0xd2>
          break;
 8001314:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8001316:	21fd      	movs	r1, #253	@ 0xfd
 8001318:	2000      	movs	r0, #0
 800131a:	f7ff fd85 	bl	8000e28 <SD_TxDataBlock>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <SD_disk_write+0xe4>
      {        
        count = 1;
 8001324:	2301      	movs	r3, #1
 8001326:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8001328:	f7ff fc78 	bl	8000c1c <DESELECT>
  SPI_RxByte();
 800132c:	f7ff fc9c 	bl	8000c68 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	bf14      	ite	ne
 8001336:	2301      	movne	r3, #1
 8001338:	2300      	moveq	r3, #0
 800133a:	b2db      	uxtb	r3, r3
}
 800133c:	4618      	mov	r0, r3
 800133e:	3710      	adds	r7, #16
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	20000004 	.word	0x20000004
 8001348:	200022a0 	.word	0x200022a0

0800134c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800134c:	b590      	push	{r4, r7, lr}
 800134e:	b08b      	sub	sp, #44	@ 0x2c
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	603a      	str	r2, [r7, #0]
 8001356:	71fb      	strb	r3, [r7, #7]
 8001358:	460b      	mov	r3, r1
 800135a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001366:	2304      	movs	r3, #4
 8001368:	e119      	b.n	800159e <SD_disk_ioctl+0x252>
  
  res = RES_ERROR;
 800136a:	2301      	movs	r3, #1
 800136c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  
  if (ctrl == CTRL_POWER) 
 8001370:	79bb      	ldrb	r3, [r7, #6]
 8001372:	2b05      	cmp	r3, #5
 8001374:	d129      	bne.n	80013ca <SD_disk_ioctl+0x7e>
  {
    switch (*ptr) 
 8001376:	6a3b      	ldr	r3, [r7, #32]
 8001378:	781b      	ldrb	r3, [r3, #0]
 800137a:	2b02      	cmp	r3, #2
 800137c:	d017      	beq.n	80013ae <SD_disk_ioctl+0x62>
 800137e:	2b02      	cmp	r3, #2
 8001380:	dc1f      	bgt.n	80013c2 <SD_disk_ioctl+0x76>
 8001382:	2b00      	cmp	r3, #0
 8001384:	d002      	beq.n	800138c <SD_disk_ioctl+0x40>
 8001386:	2b01      	cmp	r3, #1
 8001388:	d00b      	beq.n	80013a2 <SD_disk_ioctl+0x56>
 800138a:	e01a      	b.n	80013c2 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 800138c:	f7ff fd0c 	bl	8000da8 <SD_CheckPower>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001396:	f7ff fcfb 	bl	8000d90 <SD_PowerOff>
      res = RES_OK;
 800139a:	2300      	movs	r3, #0
 800139c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80013a0:	e0fb      	b.n	800159a <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 80013a2:	f7ff fca9 	bl	8000cf8 <SD_PowerOn>
      res = RES_OK;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80013ac:	e0f5      	b.n	800159a <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 80013ae:	6a3b      	ldr	r3, [r7, #32]
 80013b0:	1c5c      	adds	r4, r3, #1
 80013b2:	f7ff fcf9 	bl	8000da8 <SD_CheckPower>
 80013b6:	4603      	mov	r3, r0
 80013b8:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 80013ba:	2300      	movs	r3, #0
 80013bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80013c0:	e0eb      	b.n	800159a <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 80013c2:	2304      	movs	r3, #4
 80013c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80013c8:	e0e7      	b.n	800159a <SD_disk_ioctl+0x24e>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 80013ca:	4b77      	ldr	r3, [pc, #476]	@ (80015a8 <SD_disk_ioctl+0x25c>)
 80013cc:	781b      	ldrb	r3, [r3, #0]
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 80013d8:	2303      	movs	r3, #3
 80013da:	e0e0      	b.n	800159e <SD_disk_ioctl+0x252>
    
    SELECT();
 80013dc:	f7ff fc12 	bl	8000c04 <SELECT>
    
    switch (ctrl) 
 80013e0:	79bb      	ldrb	r3, [r7, #6]
 80013e2:	2b0d      	cmp	r3, #13
 80013e4:	f200 80ca 	bhi.w	800157c <SD_disk_ioctl+0x230>
 80013e8:	a201      	add	r2, pc, #4	@ (adr r2, 80013f0 <SD_disk_ioctl+0xa4>)
 80013ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ee:	bf00      	nop
 80013f0:	080014e7 	.word	0x080014e7
 80013f4:	08001429 	.word	0x08001429
 80013f8:	080014d7 	.word	0x080014d7
 80013fc:	0800157d 	.word	0x0800157d
 8001400:	0800157d 	.word	0x0800157d
 8001404:	0800157d 	.word	0x0800157d
 8001408:	0800157d 	.word	0x0800157d
 800140c:	0800157d 	.word	0x0800157d
 8001410:	0800157d 	.word	0x0800157d
 8001414:	0800157d 	.word	0x0800157d
 8001418:	0800157d 	.word	0x0800157d
 800141c:	080014f9 	.word	0x080014f9
 8001420:	0800151d 	.word	0x0800151d
 8001424:	08001541 	.word	0x08001541
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8001428:	2100      	movs	r1, #0
 800142a:	2049      	movs	r0, #73	@ 0x49
 800142c:	f7ff fd50 	bl	8000ed0 <SD_SendCmd>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	f040 80a6 	bne.w	8001584 <SD_disk_ioctl+0x238>
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	2110      	movs	r1, #16
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff fcbc 	bl	8000dbc <SD_RxDataBlock>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 809c 	beq.w	8001584 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1) 
 800144c:	7b3b      	ldrb	r3, [r7, #12]
 800144e:	099b      	lsrs	r3, r3, #6
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b01      	cmp	r3, #1
 8001454:	d10d      	bne.n	8001472 <SD_disk_ioctl+0x126>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001456:	7d7b      	ldrb	r3, [r7, #21]
 8001458:	461a      	mov	r2, r3
 800145a:	7d3b      	ldrb	r3, [r7, #20]
 800145c:	021b      	lsls	r3, r3, #8
 800145e:	b29b      	uxth	r3, r3
 8001460:	4413      	add	r3, r2
 8001462:	b29b      	uxth	r3, r3
 8001464:	3301      	adds	r3, #1
 8001466:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001468:	8bfb      	ldrh	r3, [r7, #30]
 800146a:	029a      	lsls	r2, r3, #10
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	e02d      	b.n	80014ce <SD_disk_ioctl+0x182>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001472:	7c7b      	ldrb	r3, [r7, #17]
 8001474:	f003 030f 	and.w	r3, r3, #15
 8001478:	b2da      	uxtb	r2, r3
 800147a:	7dbb      	ldrb	r3, [r7, #22]
 800147c:	09db      	lsrs	r3, r3, #7
 800147e:	b2db      	uxtb	r3, r3
 8001480:	4413      	add	r3, r2
 8001482:	b2da      	uxtb	r2, r3
 8001484:	7d7b      	ldrb	r3, [r7, #21]
 8001486:	005b      	lsls	r3, r3, #1
 8001488:	b2db      	uxtb	r3, r3
 800148a:	f003 0306 	and.w	r3, r3, #6
 800148e:	b2db      	uxtb	r3, r3
 8001490:	4413      	add	r3, r2
 8001492:	b2db      	uxtb	r3, r3
 8001494:	3302      	adds	r3, #2
 8001496:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800149a:	7d3b      	ldrb	r3, [r7, #20]
 800149c:	099b      	lsrs	r3, r3, #6
 800149e:	b2db      	uxtb	r3, r3
 80014a0:	461a      	mov	r2, r3
 80014a2:	7cfb      	ldrb	r3, [r7, #19]
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	4413      	add	r3, r2
 80014aa:	b29a      	uxth	r2, r3
 80014ac:	7cbb      	ldrb	r3, [r7, #18]
 80014ae:	029b      	lsls	r3, r3, #10
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80014b6:	b29b      	uxth	r3, r3
 80014b8:	4413      	add	r3, r2
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	3301      	adds	r3, #1
 80014be:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 80014c0:	8bfa      	ldrh	r2, [r7, #30]
 80014c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80014c6:	3b09      	subs	r3, #9
 80014c8:	409a      	lsls	r2, r3
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 80014ce:	2300      	movs	r3, #0
 80014d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 80014d4:	e056      	b.n	8001584 <SD_disk_ioctl+0x238>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014dc:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80014e4:	e055      	b.n	8001592 <SD_disk_ioctl+0x246>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 80014e6:	f7ff fbeb 	bl	8000cc0 <SD_ReadyWait>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2bff      	cmp	r3, #255	@ 0xff
 80014ee:	d14b      	bne.n	8001588 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 80014f0:	2300      	movs	r3, #0
 80014f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80014f6:	e047      	b.n	8001588 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 80014f8:	2100      	movs	r1, #0
 80014fa:	2049      	movs	r0, #73	@ 0x49
 80014fc:	f7ff fce8 	bl	8000ed0 <SD_SendCmd>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d142      	bne.n	800158c <SD_disk_ioctl+0x240>
 8001506:	2110      	movs	r1, #16
 8001508:	6a38      	ldr	r0, [r7, #32]
 800150a:	f7ff fc57 	bl	8000dbc <SD_RxDataBlock>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d03b      	beq.n	800158c <SD_disk_ioctl+0x240>
        res = RES_OK;
 8001514:	2300      	movs	r3, #0
 8001516:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800151a:	e037      	b.n	800158c <SD_disk_ioctl+0x240>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800151c:	2100      	movs	r1, #0
 800151e:	204a      	movs	r0, #74	@ 0x4a
 8001520:	f7ff fcd6 	bl	8000ed0 <SD_SendCmd>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d132      	bne.n	8001590 <SD_disk_ioctl+0x244>
 800152a:	2110      	movs	r1, #16
 800152c:	6a38      	ldr	r0, [r7, #32]
 800152e:	f7ff fc45 	bl	8000dbc <SD_RxDataBlock>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d02b      	beq.n	8001590 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8001538:	2300      	movs	r3, #0
 800153a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800153e:	e027      	b.n	8001590 <SD_disk_ioctl+0x244>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8001540:	2100      	movs	r1, #0
 8001542:	207a      	movs	r0, #122	@ 0x7a
 8001544:	f7ff fcc4 	bl	8000ed0 <SD_SendCmd>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d116      	bne.n	800157c <SD_disk_ioctl+0x230>
      {         
        for (n = 0; n < 4; n++)
 800154e:	2300      	movs	r3, #0
 8001550:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001554:	e00b      	b.n	800156e <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 8001556:	6a3c      	ldr	r4, [r7, #32]
 8001558:	1c63      	adds	r3, r4, #1
 800155a:	623b      	str	r3, [r7, #32]
 800155c:	f7ff fb84 	bl	8000c68 <SPI_RxByte>
 8001560:	4603      	mov	r3, r0
 8001562:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001564:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001568:	3301      	adds	r3, #1
 800156a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800156e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001572:	2b03      	cmp	r3, #3
 8001574:	d9ef      	bls.n	8001556 <SD_disk_ioctl+0x20a>
        }
        
        res = RES_OK;
 8001576:	2300      	movs	r3, #0
 8001578:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }     
      
    default:
      res = RES_PARERR;
 800157c:	2304      	movs	r3, #4
 800157e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001582:	e006      	b.n	8001592 <SD_disk_ioctl+0x246>
      break;
 8001584:	bf00      	nop
 8001586:	e004      	b.n	8001592 <SD_disk_ioctl+0x246>
      break;
 8001588:	bf00      	nop
 800158a:	e002      	b.n	8001592 <SD_disk_ioctl+0x246>
      break;
 800158c:	bf00      	nop
 800158e:	e000      	b.n	8001592 <SD_disk_ioctl+0x246>
      break;
 8001590:	bf00      	nop
    }
    
    DESELECT();
 8001592:	f7ff fb43 	bl	8000c1c <DESELECT>
    SPI_RxByte();
 8001596:	f7ff fb67 	bl	8000c68 <SPI_RxByte>
  }
  
  return res;
 800159a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800159e:	4618      	mov	r0, r3
 80015a0:	372c      	adds	r7, #44	@ 0x2c
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd90      	pop	{r4, r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20000004 	.word	0x20000004

080015ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015b0:	4b08      	ldr	r3, [pc, #32]	@ (80015d4 <HAL_Init+0x28>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a07      	ldr	r2, [pc, #28]	@ (80015d4 <HAL_Init+0x28>)
 80015b6:	f043 0310 	orr.w	r3, r3, #16
 80015ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015bc:	2003      	movs	r0, #3
 80015be:	f000 f92b 	bl	8001818 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015c2:	200f      	movs	r0, #15
 80015c4:	f000 f808 	bl	80015d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015c8:	f7ff f8b2 	bl	8000730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40022000 	.word	0x40022000

080015d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015e0:	4b12      	ldr	r3, [pc, #72]	@ (800162c <HAL_InitTick+0x54>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	4b12      	ldr	r3, [pc, #72]	@ (8001630 <HAL_InitTick+0x58>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	4619      	mov	r1, r3
 80015ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80015f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 f935 	bl	8001866 <HAL_SYSTICK_Config>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001602:	2301      	movs	r3, #1
 8001604:	e00e      	b.n	8001624 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b0f      	cmp	r3, #15
 800160a:	d80a      	bhi.n	8001622 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800160c:	2200      	movs	r2, #0
 800160e:	6879      	ldr	r1, [r7, #4]
 8001610:	f04f 30ff 	mov.w	r0, #4294967295
 8001614:	f000 f90b 	bl	800182e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001618:	4a06      	ldr	r2, [pc, #24]	@ (8001634 <HAL_InitTick+0x5c>)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
 8001620:	e000      	b.n	8001624 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
}
 8001624:	4618      	mov	r0, r3
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	20000000 	.word	0x20000000
 8001630:	2000000c 	.word	0x2000000c
 8001634:	20000008 	.word	0x20000008

08001638 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800163c:	4b05      	ldr	r3, [pc, #20]	@ (8001654 <HAL_IncTick+0x1c>)
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	461a      	mov	r2, r3
 8001642:	4b05      	ldr	r3, [pc, #20]	@ (8001658 <HAL_IncTick+0x20>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	4413      	add	r3, r2
 8001648:	4a03      	ldr	r2, [pc, #12]	@ (8001658 <HAL_IncTick+0x20>)
 800164a:	6013      	str	r3, [r2, #0]
}
 800164c:	bf00      	nop
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	2000000c 	.word	0x2000000c
 8001658:	200022a4 	.word	0x200022a4

0800165c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return uwTick;
 8001660:	4b02      	ldr	r3, [pc, #8]	@ (800166c <HAL_GetTick+0x10>)
 8001662:	681b      	ldr	r3, [r3, #0]
}
 8001664:	4618      	mov	r0, r3
 8001666:	46bd      	mov	sp, r7
 8001668:	bc80      	pop	{r7}
 800166a:	4770      	bx	lr
 800166c:	200022a4 	.word	0x200022a4

08001670 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001678:	f7ff fff0 	bl	800165c <HAL_GetTick>
 800167c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001688:	d005      	beq.n	8001696 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800168a:	4b0a      	ldr	r3, [pc, #40]	@ (80016b4 <HAL_Delay+0x44>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	4413      	add	r3, r2
 8001694:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001696:	bf00      	nop
 8001698:	f7ff ffe0 	bl	800165c <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68bb      	ldr	r3, [r7, #8]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	68fa      	ldr	r2, [r7, #12]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d8f7      	bhi.n	8001698 <HAL_Delay+0x28>
  {
  }
}
 80016a8:	bf00      	nop
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	2000000c 	.word	0x2000000c

080016b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f003 0307 	and.w	r3, r3, #7
 80016c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016c8:	4b0c      	ldr	r3, [pc, #48]	@ (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ce:	68ba      	ldr	r2, [r7, #8]
 80016d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016d4:	4013      	ands	r3, r2
 80016d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ea:	4a04      	ldr	r2, [pc, #16]	@ (80016fc <__NVIC_SetPriorityGrouping+0x44>)
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	60d3      	str	r3, [r2, #12]
}
 80016f0:	bf00      	nop
 80016f2:	3714      	adds	r7, #20
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	e000ed00 	.word	0xe000ed00

08001700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001704:	4b04      	ldr	r3, [pc, #16]	@ (8001718 <__NVIC_GetPriorityGrouping+0x18>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	f003 0307 	and.w	r3, r3, #7
}
 800170e:	4618      	mov	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	6039      	str	r1, [r7, #0]
 8001726:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172c:	2b00      	cmp	r3, #0
 800172e:	db0a      	blt.n	8001746 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	b2da      	uxtb	r2, r3
 8001734:	490c      	ldr	r1, [pc, #48]	@ (8001768 <__NVIC_SetPriority+0x4c>)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	0112      	lsls	r2, r2, #4
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	440b      	add	r3, r1
 8001740:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001744:	e00a      	b.n	800175c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	b2da      	uxtb	r2, r3
 800174a:	4908      	ldr	r1, [pc, #32]	@ (800176c <__NVIC_SetPriority+0x50>)
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	3b04      	subs	r3, #4
 8001754:	0112      	lsls	r2, r2, #4
 8001756:	b2d2      	uxtb	r2, r2
 8001758:	440b      	add	r3, r1
 800175a:	761a      	strb	r2, [r3, #24]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	bc80      	pop	{r7}
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000e100 	.word	0xe000e100
 800176c:	e000ed00 	.word	0xe000ed00

08001770 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	@ 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	f1c3 0307 	rsb	r3, r3, #7
 800178a:	2b04      	cmp	r3, #4
 800178c:	bf28      	it	cs
 800178e:	2304      	movcs	r3, #4
 8001790:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3304      	adds	r3, #4
 8001796:	2b06      	cmp	r3, #6
 8001798:	d902      	bls.n	80017a0 <NVIC_EncodePriority+0x30>
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	3b03      	subs	r3, #3
 800179e:	e000      	b.n	80017a2 <NVIC_EncodePriority+0x32>
 80017a0:	2300      	movs	r3, #0
 80017a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017a4:	f04f 32ff 	mov.w	r2, #4294967295
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	fa02 f303 	lsl.w	r3, r2, r3
 80017ae:	43da      	mvns	r2, r3
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	401a      	ands	r2, r3
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017b8:	f04f 31ff 	mov.w	r1, #4294967295
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	fa01 f303 	lsl.w	r3, r1, r3
 80017c2:	43d9      	mvns	r1, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	4313      	orrs	r3, r2
         );
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3724      	adds	r7, #36	@ 0x24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b082      	sub	sp, #8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80017e4:	d301      	bcc.n	80017ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017e6:	2301      	movs	r3, #1
 80017e8:	e00f      	b.n	800180a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001814 <SysTick_Config+0x40>)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	3b01      	subs	r3, #1
 80017f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017f2:	210f      	movs	r1, #15
 80017f4:	f04f 30ff 	mov.w	r0, #4294967295
 80017f8:	f7ff ff90 	bl	800171c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017fc:	4b05      	ldr	r3, [pc, #20]	@ (8001814 <SysTick_Config+0x40>)
 80017fe:	2200      	movs	r2, #0
 8001800:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001802:	4b04      	ldr	r3, [pc, #16]	@ (8001814 <SysTick_Config+0x40>)
 8001804:	2207      	movs	r2, #7
 8001806:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001808:	2300      	movs	r3, #0
}
 800180a:	4618      	mov	r0, r3
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	e000e010 	.word	0xe000e010

08001818 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b082      	sub	sp, #8
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff ff49 	bl	80016b8 <__NVIC_SetPriorityGrouping>
}
 8001826:	bf00      	nop
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}

0800182e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af00      	add	r7, sp, #0
 8001834:	4603      	mov	r3, r0
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800183c:	2300      	movs	r3, #0
 800183e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001840:	f7ff ff5e 	bl	8001700 <__NVIC_GetPriorityGrouping>
 8001844:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	68b9      	ldr	r1, [r7, #8]
 800184a:	6978      	ldr	r0, [r7, #20]
 800184c:	f7ff ff90 	bl	8001770 <NVIC_EncodePriority>
 8001850:	4602      	mov	r2, r0
 8001852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001856:	4611      	mov	r1, r2
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ff5f 	bl	800171c <__NVIC_SetPriority>
}
 800185e:	bf00      	nop
 8001860:	3718      	adds	r7, #24
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}

08001866 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001866:	b580      	push	{r7, lr}
 8001868:	b082      	sub	sp, #8
 800186a:	af00      	add	r7, sp, #0
 800186c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ffb0 	bl	80017d4 <SysTick_Config>
 8001874:	4603      	mov	r3, r0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
	...

08001880 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001880:	b480      	push	{r7}
 8001882:	b08b      	sub	sp, #44	@ 0x2c
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800188a:	2300      	movs	r3, #0
 800188c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001892:	e169      	b.n	8001b68 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001894:	2201      	movs	r2, #1
 8001896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	f040 8158 	bne.w	8001b62 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	4a9a      	ldr	r2, [pc, #616]	@ (8001b20 <HAL_GPIO_Init+0x2a0>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d05e      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018bc:	4a98      	ldr	r2, [pc, #608]	@ (8001b20 <HAL_GPIO_Init+0x2a0>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d875      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018c2:	4a98      	ldr	r2, [pc, #608]	@ (8001b24 <HAL_GPIO_Init+0x2a4>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d058      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018c8:	4a96      	ldr	r2, [pc, #600]	@ (8001b24 <HAL_GPIO_Init+0x2a4>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d86f      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018ce:	4a96      	ldr	r2, [pc, #600]	@ (8001b28 <HAL_GPIO_Init+0x2a8>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d052      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018d4:	4a94      	ldr	r2, [pc, #592]	@ (8001b28 <HAL_GPIO_Init+0x2a8>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d869      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018da:	4a94      	ldr	r2, [pc, #592]	@ (8001b2c <HAL_GPIO_Init+0x2ac>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d04c      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018e0:	4a92      	ldr	r2, [pc, #584]	@ (8001b2c <HAL_GPIO_Init+0x2ac>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d863      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018e6:	4a92      	ldr	r2, [pc, #584]	@ (8001b30 <HAL_GPIO_Init+0x2b0>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d046      	beq.n	800197a <HAL_GPIO_Init+0xfa>
 80018ec:	4a90      	ldr	r2, [pc, #576]	@ (8001b30 <HAL_GPIO_Init+0x2b0>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d85d      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018f2:	2b12      	cmp	r3, #18
 80018f4:	d82a      	bhi.n	800194c <HAL_GPIO_Init+0xcc>
 80018f6:	2b12      	cmp	r3, #18
 80018f8:	d859      	bhi.n	80019ae <HAL_GPIO_Init+0x12e>
 80018fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001900 <HAL_GPIO_Init+0x80>)
 80018fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001900:	0800197b 	.word	0x0800197b
 8001904:	08001955 	.word	0x08001955
 8001908:	08001967 	.word	0x08001967
 800190c:	080019a9 	.word	0x080019a9
 8001910:	080019af 	.word	0x080019af
 8001914:	080019af 	.word	0x080019af
 8001918:	080019af 	.word	0x080019af
 800191c:	080019af 	.word	0x080019af
 8001920:	080019af 	.word	0x080019af
 8001924:	080019af 	.word	0x080019af
 8001928:	080019af 	.word	0x080019af
 800192c:	080019af 	.word	0x080019af
 8001930:	080019af 	.word	0x080019af
 8001934:	080019af 	.word	0x080019af
 8001938:	080019af 	.word	0x080019af
 800193c:	080019af 	.word	0x080019af
 8001940:	080019af 	.word	0x080019af
 8001944:	0800195d 	.word	0x0800195d
 8001948:	08001971 	.word	0x08001971
 800194c:	4a79      	ldr	r2, [pc, #484]	@ (8001b34 <HAL_GPIO_Init+0x2b4>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d013      	beq.n	800197a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001952:	e02c      	b.n	80019ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	68db      	ldr	r3, [r3, #12]
 8001958:	623b      	str	r3, [r7, #32]
          break;
 800195a:	e029      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	3304      	adds	r3, #4
 8001962:	623b      	str	r3, [r7, #32]
          break;
 8001964:	e024      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	3308      	adds	r3, #8
 800196c:	623b      	str	r3, [r7, #32]
          break;
 800196e:	e01f      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	330c      	adds	r3, #12
 8001976:	623b      	str	r3, [r7, #32]
          break;
 8001978:	e01a      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d102      	bne.n	8001988 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001982:	2304      	movs	r3, #4
 8001984:	623b      	str	r3, [r7, #32]
          break;
 8001986:	e013      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	689b      	ldr	r3, [r3, #8]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d105      	bne.n	800199c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001990:	2308      	movs	r3, #8
 8001992:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	69fa      	ldr	r2, [r7, #28]
 8001998:	611a      	str	r2, [r3, #16]
          break;
 800199a:	e009      	b.n	80019b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800199c:	2308      	movs	r3, #8
 800199e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	69fa      	ldr	r2, [r7, #28]
 80019a4:	615a      	str	r2, [r3, #20]
          break;
 80019a6:	e003      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019a8:	2300      	movs	r3, #0
 80019aa:	623b      	str	r3, [r7, #32]
          break;
 80019ac:	e000      	b.n	80019b0 <HAL_GPIO_Init+0x130>
          break;
 80019ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	2bff      	cmp	r3, #255	@ 0xff
 80019b4:	d801      	bhi.n	80019ba <HAL_GPIO_Init+0x13a>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	e001      	b.n	80019be <HAL_GPIO_Init+0x13e>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	3304      	adds	r3, #4
 80019be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	2bff      	cmp	r3, #255	@ 0xff
 80019c4:	d802      	bhi.n	80019cc <HAL_GPIO_Init+0x14c>
 80019c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	e002      	b.n	80019d2 <HAL_GPIO_Init+0x152>
 80019cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ce:	3b08      	subs	r3, #8
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	210f      	movs	r1, #15
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	fa01 f303 	lsl.w	r3, r1, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	401a      	ands	r2, r3
 80019e4:	6a39      	ldr	r1, [r7, #32]
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ec:	431a      	orrs	r2, r3
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	f000 80b1 	beq.w	8001b62 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a00:	4b4d      	ldr	r3, [pc, #308]	@ (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	4a4c      	ldr	r2, [pc, #304]	@ (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6193      	str	r3, [r2, #24]
 8001a0c:	4b4a      	ldr	r3, [pc, #296]	@ (8001b38 <HAL_GPIO_Init+0x2b8>)
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a18:	4a48      	ldr	r2, [pc, #288]	@ (8001b3c <HAL_GPIO_Init+0x2bc>)
 8001a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a1c:	089b      	lsrs	r3, r3, #2
 8001a1e:	3302      	adds	r3, #2
 8001a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a28:	f003 0303 	and.w	r3, r3, #3
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	220f      	movs	r2, #15
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	43db      	mvns	r3, r3
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a40      	ldr	r2, [pc, #256]	@ (8001b40 <HAL_GPIO_Init+0x2c0>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d013      	beq.n	8001a6c <HAL_GPIO_Init+0x1ec>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	4a3f      	ldr	r2, [pc, #252]	@ (8001b44 <HAL_GPIO_Init+0x2c4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d00d      	beq.n	8001a68 <HAL_GPIO_Init+0x1e8>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4a3e      	ldr	r2, [pc, #248]	@ (8001b48 <HAL_GPIO_Init+0x2c8>)
 8001a50:	4293      	cmp	r3, r2
 8001a52:	d007      	beq.n	8001a64 <HAL_GPIO_Init+0x1e4>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	4a3d      	ldr	r2, [pc, #244]	@ (8001b4c <HAL_GPIO_Init+0x2cc>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d101      	bne.n	8001a60 <HAL_GPIO_Init+0x1e0>
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e006      	b.n	8001a6e <HAL_GPIO_Init+0x1ee>
 8001a60:	2304      	movs	r3, #4
 8001a62:	e004      	b.n	8001a6e <HAL_GPIO_Init+0x1ee>
 8001a64:	2302      	movs	r3, #2
 8001a66:	e002      	b.n	8001a6e <HAL_GPIO_Init+0x1ee>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <HAL_GPIO_Init+0x1ee>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a70:	f002 0203 	and.w	r2, r2, #3
 8001a74:	0092      	lsls	r2, r2, #2
 8001a76:	4093      	lsls	r3, r2
 8001a78:	68fa      	ldr	r2, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001a7e:	492f      	ldr	r1, [pc, #188]	@ (8001b3c <HAL_GPIO_Init+0x2bc>)
 8001a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a82:	089b      	lsrs	r3, r3, #2
 8001a84:	3302      	adds	r3, #2
 8001a86:	68fa      	ldr	r2, [r7, #12]
 8001a88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d006      	beq.n	8001aa6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a98:	4b2d      	ldr	r3, [pc, #180]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001a9a:	689a      	ldr	r2, [r3, #8]
 8001a9c:	492c      	ldr	r1, [pc, #176]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	608b      	str	r3, [r1, #8]
 8001aa4:	e006      	b.n	8001ab4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001aa6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	43db      	mvns	r3, r3
 8001aae:	4928      	ldr	r1, [pc, #160]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d006      	beq.n	8001ace <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ac0:	4b23      	ldr	r3, [pc, #140]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ac2:	68da      	ldr	r2, [r3, #12]
 8001ac4:	4922      	ldr	r1, [pc, #136]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	60cb      	str	r3, [r1, #12]
 8001acc:	e006      	b.n	8001adc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001ace:	4b20      	ldr	r3, [pc, #128]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ad0:	68da      	ldr	r2, [r3, #12]
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	491e      	ldr	r1, [pc, #120]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001ad8:	4013      	ands	r3, r2
 8001ada:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d006      	beq.n	8001af6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ae8:	4b19      	ldr	r3, [pc, #100]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	4918      	ldr	r1, [pc, #96]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	4313      	orrs	r3, r2
 8001af2:	604b      	str	r3, [r1, #4]
 8001af4:	e006      	b.n	8001b04 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001af6:	4b16      	ldr	r3, [pc, #88]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	4914      	ldr	r1, [pc, #80]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001b00:	4013      	ands	r3, r2
 8001b02:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d021      	beq.n	8001b54 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b10:	4b0f      	ldr	r3, [pc, #60]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001b12:	681a      	ldr	r2, [r3, #0]
 8001b14:	490e      	ldr	r1, [pc, #56]	@ (8001b50 <HAL_GPIO_Init+0x2d0>)
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	600b      	str	r3, [r1, #0]
 8001b1c:	e021      	b.n	8001b62 <HAL_GPIO_Init+0x2e2>
 8001b1e:	bf00      	nop
 8001b20:	10320000 	.word	0x10320000
 8001b24:	10310000 	.word	0x10310000
 8001b28:	10220000 	.word	0x10220000
 8001b2c:	10210000 	.word	0x10210000
 8001b30:	10120000 	.word	0x10120000
 8001b34:	10110000 	.word	0x10110000
 8001b38:	40021000 	.word	0x40021000
 8001b3c:	40010000 	.word	0x40010000
 8001b40:	40010800 	.word	0x40010800
 8001b44:	40010c00 	.word	0x40010c00
 8001b48:	40011000 	.word	0x40011000
 8001b4c:	40011400 	.word	0x40011400
 8001b50:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b54:	4b0b      	ldr	r3, [pc, #44]	@ (8001b84 <HAL_GPIO_Init+0x304>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	43db      	mvns	r3, r3
 8001b5c:	4909      	ldr	r1, [pc, #36]	@ (8001b84 <HAL_GPIO_Init+0x304>)
 8001b5e:	4013      	ands	r3, r2
 8001b60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b64:	3301      	adds	r3, #1
 8001b66:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	f47f ae8e 	bne.w	8001894 <HAL_GPIO_Init+0x14>
  }
}
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop
 8001b7c:	372c      	adds	r7, #44	@ 0x2c
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bc80      	pop	{r7}
 8001b82:	4770      	bx	lr
 8001b84:	40010400 	.word	0x40010400

08001b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	807b      	strh	r3, [r7, #2]
 8001b94:	4613      	mov	r3, r2
 8001b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b98:	787b      	ldrb	r3, [r7, #1]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d003      	beq.n	8001ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b9e:	887a      	ldrh	r2, [r7, #2]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ba4:	e003      	b.n	8001bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ba6:	887b      	ldrh	r3, [r7, #2]
 8001ba8:	041a      	lsls	r2, r3, #16
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	611a      	str	r2, [r3, #16]
}
 8001bae:	bf00      	nop
 8001bb0:	370c      	adds	r7, #12
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bc80      	pop	{r7}
 8001bb6:	4770      	bx	lr

08001bb8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e12b      	b.n	8001e22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d106      	bne.n	8001be4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7fe fdd8 	bl	8000794 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2224      	movs	r2, #36	@ 0x24
 8001be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0201 	bic.w	r2, r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681a      	ldr	r2, [r3, #0]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001c1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001c1c:	f000 fcda 	bl	80025d4 <HAL_RCC_GetPCLK1Freq>
 8001c20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	4a81      	ldr	r2, [pc, #516]	@ (8001e2c <HAL_I2C_Init+0x274>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d807      	bhi.n	8001c3c <HAL_I2C_Init+0x84>
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4a80      	ldr	r2, [pc, #512]	@ (8001e30 <HAL_I2C_Init+0x278>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	bf94      	ite	ls
 8001c34:	2301      	movls	r3, #1
 8001c36:	2300      	movhi	r3, #0
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	e006      	b.n	8001c4a <HAL_I2C_Init+0x92>
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	4a7d      	ldr	r2, [pc, #500]	@ (8001e34 <HAL_I2C_Init+0x27c>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	bf94      	ite	ls
 8001c44:	2301      	movls	r3, #1
 8001c46:	2300      	movhi	r3, #0
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d001      	beq.n	8001c52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e0e7      	b.n	8001e22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4a78      	ldr	r2, [pc, #480]	@ (8001e38 <HAL_I2C_Init+0x280>)
 8001c56:	fba2 2303 	umull	r2, r3, r2, r3
 8001c5a:	0c9b      	lsrs	r3, r3, #18
 8001c5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	68ba      	ldr	r2, [r7, #8]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	4a6a      	ldr	r2, [pc, #424]	@ (8001e2c <HAL_I2C_Init+0x274>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d802      	bhi.n	8001c8c <HAL_I2C_Init+0xd4>
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	3301      	adds	r3, #1
 8001c8a:	e009      	b.n	8001ca0 <HAL_I2C_Init+0xe8>
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001c92:	fb02 f303 	mul.w	r3, r2, r3
 8001c96:	4a69      	ldr	r2, [pc, #420]	@ (8001e3c <HAL_I2C_Init+0x284>)
 8001c98:	fba2 2303 	umull	r2, r3, r2, r3
 8001c9c:	099b      	lsrs	r3, r3, #6
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	6812      	ldr	r2, [r2, #0]
 8001ca4:	430b      	orrs	r3, r1
 8001ca6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	69db      	ldr	r3, [r3, #28]
 8001cae:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001cb2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	495c      	ldr	r1, [pc, #368]	@ (8001e2c <HAL_I2C_Init+0x274>)
 8001cbc:	428b      	cmp	r3, r1
 8001cbe:	d819      	bhi.n	8001cf4 <HAL_I2C_Init+0x13c>
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	1e59      	subs	r1, r3, #1
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cce:	1c59      	adds	r1, r3, #1
 8001cd0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001cd4:	400b      	ands	r3, r1
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00a      	beq.n	8001cf0 <HAL_I2C_Init+0x138>
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1e59      	subs	r1, r3, #1
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ce8:	3301      	adds	r3, #1
 8001cea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cee:	e051      	b.n	8001d94 <HAL_I2C_Init+0x1dc>
 8001cf0:	2304      	movs	r3, #4
 8001cf2:	e04f      	b.n	8001d94 <HAL_I2C_Init+0x1dc>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d111      	bne.n	8001d20 <HAL_I2C_Init+0x168>
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	1e58      	subs	r0, r3, #1
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6859      	ldr	r1, [r3, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	440b      	add	r3, r1
 8001d0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d0e:	3301      	adds	r3, #1
 8001d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	bf0c      	ite	eq
 8001d18:	2301      	moveq	r3, #1
 8001d1a:	2300      	movne	r3, #0
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	e012      	b.n	8001d46 <HAL_I2C_Init+0x18e>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	1e58      	subs	r0, r3, #1
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6859      	ldr	r1, [r3, #4]
 8001d28:	460b      	mov	r3, r1
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	440b      	add	r3, r1
 8001d2e:	0099      	lsls	r1, r3, #2
 8001d30:	440b      	add	r3, r1
 8001d32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d36:	3301      	adds	r3, #1
 8001d38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	bf0c      	ite	eq
 8001d40:	2301      	moveq	r3, #1
 8001d42:	2300      	movne	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d001      	beq.n	8001d4e <HAL_I2C_Init+0x196>
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e022      	b.n	8001d94 <HAL_I2C_Init+0x1dc>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d10e      	bne.n	8001d74 <HAL_I2C_Init+0x1bc>
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	1e58      	subs	r0, r3, #1
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6859      	ldr	r1, [r3, #4]
 8001d5e:	460b      	mov	r3, r1
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	440b      	add	r3, r1
 8001d64:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d68:	3301      	adds	r3, #1
 8001d6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d6e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d72:	e00f      	b.n	8001d94 <HAL_I2C_Init+0x1dc>
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	1e58      	subs	r0, r3, #1
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6859      	ldr	r1, [r3, #4]
 8001d7c:	460b      	mov	r3, r1
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	0099      	lsls	r1, r3, #2
 8001d84:	440b      	add	r3, r1
 8001d86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d90:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	6809      	ldr	r1, [r1, #0]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	69da      	ldr	r2, [r3, #28]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a1b      	ldr	r3, [r3, #32]
 8001dae:	431a      	orrs	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8001dc2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	6911      	ldr	r1, [r2, #16]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	68d2      	ldr	r2, [r2, #12]
 8001dce:	4311      	orrs	r1, r2
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6812      	ldr	r2, [r2, #0]
 8001dd4:	430b      	orrs	r3, r1
 8001dd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	695a      	ldr	r2, [r3, #20]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	699b      	ldr	r3, [r3, #24]
 8001dea:	431a      	orrs	r2, r3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	430a      	orrs	r2, r1
 8001df2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f042 0201 	orr.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2220      	movs	r2, #32
 8001e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	000186a0 	.word	0x000186a0
 8001e30:	001e847f 	.word	0x001e847f
 8001e34:	003d08ff 	.word	0x003d08ff
 8001e38:	431bde83 	.word	0x431bde83
 8001e3c:	10624dd3 	.word	0x10624dd3

08001e40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e272      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 0301 	and.w	r3, r3, #1
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f000 8087 	beq.w	8001f6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e60:	4b92      	ldr	r3, [pc, #584]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f003 030c 	and.w	r3, r3, #12
 8001e68:	2b04      	cmp	r3, #4
 8001e6a:	d00c      	beq.n	8001e86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e6c:	4b8f      	ldr	r3, [pc, #572]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f003 030c 	and.w	r3, r3, #12
 8001e74:	2b08      	cmp	r3, #8
 8001e76:	d112      	bne.n	8001e9e <HAL_RCC_OscConfig+0x5e>
 8001e78:	4b8c      	ldr	r3, [pc, #560]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e84:	d10b      	bne.n	8001e9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e86:	4b89      	ldr	r3, [pc, #548]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d06c      	beq.n	8001f6c <HAL_RCC_OscConfig+0x12c>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d168      	bne.n	8001f6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e24c      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ea6:	d106      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x76>
 8001ea8:	4b80      	ldr	r3, [pc, #512]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a7f      	ldr	r2, [pc, #508]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001eae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb2:	6013      	str	r3, [r2, #0]
 8001eb4:	e02e      	b.n	8001f14 <HAL_RCC_OscConfig+0xd4>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x98>
 8001ebe:	4b7b      	ldr	r3, [pc, #492]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a7a      	ldr	r2, [pc, #488]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001ec4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ec8:	6013      	str	r3, [r2, #0]
 8001eca:	4b78      	ldr	r3, [pc, #480]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a77      	ldr	r2, [pc, #476]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001ed0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ed4:	6013      	str	r3, [r2, #0]
 8001ed6:	e01d      	b.n	8001f14 <HAL_RCC_OscConfig+0xd4>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ee0:	d10c      	bne.n	8001efc <HAL_RCC_OscConfig+0xbc>
 8001ee2:	4b72      	ldr	r3, [pc, #456]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a71      	ldr	r2, [pc, #452]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001ee8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eec:	6013      	str	r3, [r2, #0]
 8001eee:	4b6f      	ldr	r3, [pc, #444]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a6e      	ldr	r2, [pc, #440]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001ef4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	e00b      	b.n	8001f14 <HAL_RCC_OscConfig+0xd4>
 8001efc:	4b6b      	ldr	r3, [pc, #428]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a6a      	ldr	r2, [pc, #424]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001f02:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f06:	6013      	str	r3, [r2, #0]
 8001f08:	4b68      	ldr	r3, [pc, #416]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a67      	ldr	r2, [pc, #412]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001f0e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d013      	beq.n	8001f44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f1c:	f7ff fb9e 	bl	800165c <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f24:	f7ff fb9a 	bl	800165c <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b64      	cmp	r3, #100	@ 0x64
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e200      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f36:	4b5d      	ldr	r3, [pc, #372]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d0f0      	beq.n	8001f24 <HAL_RCC_OscConfig+0xe4>
 8001f42:	e014      	b.n	8001f6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f44:	f7ff fb8a 	bl	800165c <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f4c:	f7ff fb86 	bl	800165c <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b64      	cmp	r3, #100	@ 0x64
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e1ec      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f5e:	4b53      	ldr	r3, [pc, #332]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0x10c>
 8001f6a:	e000      	b.n	8001f6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d063      	beq.n	8002042 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f7a:	4b4c      	ldr	r3, [pc, #304]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f003 030c 	and.w	r3, r3, #12
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00b      	beq.n	8001f9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f86:	4b49      	ldr	r3, [pc, #292]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 030c 	and.w	r3, r3, #12
 8001f8e:	2b08      	cmp	r3, #8
 8001f90:	d11c      	bne.n	8001fcc <HAL_RCC_OscConfig+0x18c>
 8001f92:	4b46      	ldr	r3, [pc, #280]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d116      	bne.n	8001fcc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f9e:	4b43      	ldr	r3, [pc, #268]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0302 	and.w	r3, r3, #2
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d005      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x176>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d001      	beq.n	8001fb6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e1c0      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb6:	4b3d      	ldr	r3, [pc, #244]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	00db      	lsls	r3, r3, #3
 8001fc4:	4939      	ldr	r1, [pc, #228]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fca:	e03a      	b.n	8002042 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	691b      	ldr	r3, [r3, #16]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d020      	beq.n	8002016 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fd4:	4b36      	ldr	r3, [pc, #216]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fda:	f7ff fb3f 	bl	800165c <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fe2:	f7ff fb3b 	bl	800165c <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e1a1      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff4:	4b2d      	ldr	r3, [pc, #180]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002000:	4b2a      	ldr	r3, [pc, #168]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	695b      	ldr	r3, [r3, #20]
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4927      	ldr	r1, [pc, #156]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8002010:	4313      	orrs	r3, r2
 8002012:	600b      	str	r3, [r1, #0]
 8002014:	e015      	b.n	8002042 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002016:	4b26      	ldr	r3, [pc, #152]	@ (80020b0 <HAL_RCC_OscConfig+0x270>)
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7ff fb1e 	bl	800165c <HAL_GetTick>
 8002020:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002022:	e008      	b.n	8002036 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002024:	f7ff fb1a 	bl	800165c <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e180      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002036:	4b1d      	ldr	r3, [pc, #116]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1f0      	bne.n	8002024 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	2b00      	cmp	r3, #0
 800204c:	d03a      	beq.n	80020c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d019      	beq.n	800208a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002056:	4b17      	ldr	r3, [pc, #92]	@ (80020b4 <HAL_RCC_OscConfig+0x274>)
 8002058:	2201      	movs	r2, #1
 800205a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800205c:	f7ff fafe 	bl	800165c <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002064:	f7ff fafa 	bl	800165c <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e160      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002076:	4b0d      	ldr	r3, [pc, #52]	@ (80020ac <HAL_RCC_OscConfig+0x26c>)
 8002078:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002082:	2001      	movs	r0, #1
 8002084:	f000 faba 	bl	80025fc <RCC_Delay>
 8002088:	e01c      	b.n	80020c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800208a:	4b0a      	ldr	r3, [pc, #40]	@ (80020b4 <HAL_RCC_OscConfig+0x274>)
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002090:	f7ff fae4 	bl	800165c <HAL_GetTick>
 8002094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002096:	e00f      	b.n	80020b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002098:	f7ff fae0 	bl	800165c <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d908      	bls.n	80020b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e146      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
 80020aa:	bf00      	nop
 80020ac:	40021000 	.word	0x40021000
 80020b0:	42420000 	.word	0x42420000
 80020b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020b8:	4b92      	ldr	r3, [pc, #584]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 80020ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020bc:	f003 0302 	and.w	r3, r3, #2
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1e9      	bne.n	8002098 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 80a6 	beq.w	800221e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020d2:	2300      	movs	r3, #0
 80020d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020d6:	4b8b      	ldr	r3, [pc, #556]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 80020d8:	69db      	ldr	r3, [r3, #28]
 80020da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10d      	bne.n	80020fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020e2:	4b88      	ldr	r3, [pc, #544]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	69db      	ldr	r3, [r3, #28]
 80020e6:	4a87      	ldr	r2, [pc, #540]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 80020e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020ec:	61d3      	str	r3, [r2, #28]
 80020ee:	4b85      	ldr	r3, [pc, #532]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 80020f0:	69db      	ldr	r3, [r3, #28]
 80020f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020f6:	60bb      	str	r3, [r7, #8]
 80020f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020fa:	2301      	movs	r3, #1
 80020fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020fe:	4b82      	ldr	r3, [pc, #520]	@ (8002308 <HAL_RCC_OscConfig+0x4c8>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002106:	2b00      	cmp	r3, #0
 8002108:	d118      	bne.n	800213c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800210a:	4b7f      	ldr	r3, [pc, #508]	@ (8002308 <HAL_RCC_OscConfig+0x4c8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a7e      	ldr	r2, [pc, #504]	@ (8002308 <HAL_RCC_OscConfig+0x4c8>)
 8002110:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002114:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002116:	f7ff faa1 	bl	800165c <HAL_GetTick>
 800211a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211c:	e008      	b.n	8002130 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800211e:	f7ff fa9d 	bl	800165c <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b64      	cmp	r3, #100	@ 0x64
 800212a:	d901      	bls.n	8002130 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800212c:	2303      	movs	r3, #3
 800212e:	e103      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002130:	4b75      	ldr	r3, [pc, #468]	@ (8002308 <HAL_RCC_OscConfig+0x4c8>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002138:	2b00      	cmp	r3, #0
 800213a:	d0f0      	beq.n	800211e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	2b01      	cmp	r3, #1
 8002142:	d106      	bne.n	8002152 <HAL_RCC_OscConfig+0x312>
 8002144:	4b6f      	ldr	r3, [pc, #444]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	4a6e      	ldr	r2, [pc, #440]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	6213      	str	r3, [r2, #32]
 8002150:	e02d      	b.n	80021ae <HAL_RCC_OscConfig+0x36e>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10c      	bne.n	8002174 <HAL_RCC_OscConfig+0x334>
 800215a:	4b6a      	ldr	r3, [pc, #424]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 800215c:	6a1b      	ldr	r3, [r3, #32]
 800215e:	4a69      	ldr	r2, [pc, #420]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 8002160:	f023 0301 	bic.w	r3, r3, #1
 8002164:	6213      	str	r3, [r2, #32]
 8002166:	4b67      	ldr	r3, [pc, #412]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 8002168:	6a1b      	ldr	r3, [r3, #32]
 800216a:	4a66      	ldr	r2, [pc, #408]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 800216c:	f023 0304 	bic.w	r3, r3, #4
 8002170:	6213      	str	r3, [r2, #32]
 8002172:	e01c      	b.n	80021ae <HAL_RCC_OscConfig+0x36e>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	2b05      	cmp	r3, #5
 800217a:	d10c      	bne.n	8002196 <HAL_RCC_OscConfig+0x356>
 800217c:	4b61      	ldr	r3, [pc, #388]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	4a60      	ldr	r2, [pc, #384]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 8002182:	f043 0304 	orr.w	r3, r3, #4
 8002186:	6213      	str	r3, [r2, #32]
 8002188:	4b5e      	ldr	r3, [pc, #376]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 800218a:	6a1b      	ldr	r3, [r3, #32]
 800218c:	4a5d      	ldr	r2, [pc, #372]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 800218e:	f043 0301 	orr.w	r3, r3, #1
 8002192:	6213      	str	r3, [r2, #32]
 8002194:	e00b      	b.n	80021ae <HAL_RCC_OscConfig+0x36e>
 8002196:	4b5b      	ldr	r3, [pc, #364]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	4a5a      	ldr	r2, [pc, #360]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 800219c:	f023 0301 	bic.w	r3, r3, #1
 80021a0:	6213      	str	r3, [r2, #32]
 80021a2:	4b58      	ldr	r3, [pc, #352]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	4a57      	ldr	r2, [pc, #348]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 80021a8:	f023 0304 	bic.w	r3, r3, #4
 80021ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d015      	beq.n	80021e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b6:	f7ff fa51 	bl	800165c <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021bc:	e00a      	b.n	80021d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021be:	f7ff fa4d 	bl	800165c <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d901      	bls.n	80021d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e0b1      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	f003 0302 	and.w	r3, r3, #2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d0ee      	beq.n	80021be <HAL_RCC_OscConfig+0x37e>
 80021e0:	e014      	b.n	800220c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e2:	f7ff fa3b 	bl	800165c <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e8:	e00a      	b.n	8002200 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ea:	f7ff fa37 	bl	800165c <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e09b      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002200:	4b40      	ldr	r3, [pc, #256]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1ee      	bne.n	80021ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800220c:	7dfb      	ldrb	r3, [r7, #23]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d105      	bne.n	800221e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002212:	4b3c      	ldr	r3, [pc, #240]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 8002214:	69db      	ldr	r3, [r3, #28]
 8002216:	4a3b      	ldr	r2, [pc, #236]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 8002218:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800221c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	2b00      	cmp	r3, #0
 8002224:	f000 8087 	beq.w	8002336 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002228:	4b36      	ldr	r3, [pc, #216]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 030c 	and.w	r3, r3, #12
 8002230:	2b08      	cmp	r3, #8
 8002232:	d061      	beq.n	80022f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69db      	ldr	r3, [r3, #28]
 8002238:	2b02      	cmp	r3, #2
 800223a:	d146      	bne.n	80022ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800223c:	4b33      	ldr	r3, [pc, #204]	@ (800230c <HAL_RCC_OscConfig+0x4cc>)
 800223e:	2200      	movs	r2, #0
 8002240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002242:	f7ff fa0b 	bl	800165c <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224a:	f7ff fa07 	bl	800165c <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e06d      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800225c:	4b29      	ldr	r3, [pc, #164]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1f0      	bne.n	800224a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002270:	d108      	bne.n	8002284 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002272:	4b24      	ldr	r3, [pc, #144]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	4921      	ldr	r1, [pc, #132]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 8002280:	4313      	orrs	r3, r2
 8002282:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002284:	4b1f      	ldr	r3, [pc, #124]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a19      	ldr	r1, [r3, #32]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002294:	430b      	orrs	r3, r1
 8002296:	491b      	ldr	r1, [pc, #108]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 8002298:	4313      	orrs	r3, r2
 800229a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800229c:	4b1b      	ldr	r3, [pc, #108]	@ (800230c <HAL_RCC_OscConfig+0x4cc>)
 800229e:	2201      	movs	r2, #1
 80022a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022a2:	f7ff f9db 	bl	800165c <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022aa:	f7ff f9d7 	bl	800165c <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e03d      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80022bc:	4b11      	ldr	r3, [pc, #68]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0f0      	beq.n	80022aa <HAL_RCC_OscConfig+0x46a>
 80022c8:	e035      	b.n	8002336 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ca:	4b10      	ldr	r3, [pc, #64]	@ (800230c <HAL_RCC_OscConfig+0x4cc>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d0:	f7ff f9c4 	bl	800165c <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d8:	f7ff f9c0 	bl	800165c <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e026      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022ea:	4b06      	ldr	r3, [pc, #24]	@ (8002304 <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d1f0      	bne.n	80022d8 <HAL_RCC_OscConfig+0x498>
 80022f6:	e01e      	b.n	8002336 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d107      	bne.n	8002310 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e019      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
 8002304:	40021000 	.word	0x40021000
 8002308:	40007000 	.word	0x40007000
 800230c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002310:	4b0b      	ldr	r3, [pc, #44]	@ (8002340 <HAL_RCC_OscConfig+0x500>)
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	429a      	cmp	r2, r3
 8002322:	d106      	bne.n	8002332 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800232e:	429a      	cmp	r2, r3
 8002330:	d001      	beq.n	8002336 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e000      	b.n	8002338 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	3718      	adds	r7, #24
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40021000 	.word	0x40021000

08002344 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
 800234c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e0d0      	b.n	80024fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002358:	4b6a      	ldr	r3, [pc, #424]	@ (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0307 	and.w	r3, r3, #7
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d910      	bls.n	8002388 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002366:	4b67      	ldr	r3, [pc, #412]	@ (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f023 0207 	bic.w	r2, r3, #7
 800236e:	4965      	ldr	r1, [pc, #404]	@ (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	4313      	orrs	r3, r2
 8002374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002376:	4b63      	ldr	r3, [pc, #396]	@ (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0307 	and.w	r3, r3, #7
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	429a      	cmp	r2, r3
 8002382:	d001      	beq.n	8002388 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	e0b8      	b.n	80024fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f003 0302 	and.w	r3, r3, #2
 8002390:	2b00      	cmp	r3, #0
 8002392:	d020      	beq.n	80023d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0304 	and.w	r3, r3, #4
 800239c:	2b00      	cmp	r3, #0
 800239e:	d005      	beq.n	80023ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023a0:	4b59      	ldr	r3, [pc, #356]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	4a58      	ldr	r2, [pc, #352]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80023a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80023aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0308 	and.w	r3, r3, #8
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d005      	beq.n	80023c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023b8:	4b53      	ldr	r3, [pc, #332]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	4a52      	ldr	r2, [pc, #328]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80023be:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80023c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023c4:	4b50      	ldr	r3, [pc, #320]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	494d      	ldr	r1, [pc, #308]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d040      	beq.n	8002464 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d107      	bne.n	80023fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ea:	4b47      	ldr	r3, [pc, #284]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d115      	bne.n	8002422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e07f      	b.n	80024fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d107      	bne.n	8002412 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002402:	4b41      	ldr	r3, [pc, #260]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d109      	bne.n	8002422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e073      	b.n	80024fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002412:	4b3d      	ldr	r3, [pc, #244]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0302 	and.w	r3, r3, #2
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241e:	2301      	movs	r3, #1
 8002420:	e06b      	b.n	80024fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002422:	4b39      	ldr	r3, [pc, #228]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	f023 0203 	bic.w	r2, r3, #3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	4936      	ldr	r1, [pc, #216]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 8002430:	4313      	orrs	r3, r2
 8002432:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002434:	f7ff f912 	bl	800165c <HAL_GetTick>
 8002438:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800243a:	e00a      	b.n	8002452 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800243c:	f7ff f90e 	bl	800165c <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800244a:	4293      	cmp	r3, r2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e053      	b.n	80024fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002452:	4b2d      	ldr	r3, [pc, #180]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	f003 020c 	and.w	r2, r3, #12
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	429a      	cmp	r2, r3
 8002462:	d1eb      	bne.n	800243c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002464:	4b27      	ldr	r3, [pc, #156]	@ (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0307 	and.w	r3, r3, #7
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	429a      	cmp	r2, r3
 8002470:	d210      	bcs.n	8002494 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002472:	4b24      	ldr	r3, [pc, #144]	@ (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f023 0207 	bic.w	r2, r3, #7
 800247a:	4922      	ldr	r1, [pc, #136]	@ (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	4313      	orrs	r3, r2
 8002480:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002482:	4b20      	ldr	r3, [pc, #128]	@ (8002504 <HAL_RCC_ClockConfig+0x1c0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0307 	and.w	r3, r3, #7
 800248a:	683a      	ldr	r2, [r7, #0]
 800248c:	429a      	cmp	r2, r3
 800248e:	d001      	beq.n	8002494 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	e032      	b.n	80024fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b00      	cmp	r3, #0
 800249e:	d008      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024a0:	4b19      	ldr	r3, [pc, #100]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	68db      	ldr	r3, [r3, #12]
 80024ac:	4916      	ldr	r1, [pc, #88]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d009      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80024be:	4b12      	ldr	r3, [pc, #72]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	00db      	lsls	r3, r3, #3
 80024cc:	490e      	ldr	r1, [pc, #56]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80024d2:	f000 f821 	bl	8002518 <HAL_RCC_GetSysClockFreq>
 80024d6:	4602      	mov	r2, r0
 80024d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002508 <HAL_RCC_ClockConfig+0x1c4>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	091b      	lsrs	r3, r3, #4
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	490a      	ldr	r1, [pc, #40]	@ (800250c <HAL_RCC_ClockConfig+0x1c8>)
 80024e4:	5ccb      	ldrb	r3, [r1, r3]
 80024e6:	fa22 f303 	lsr.w	r3, r2, r3
 80024ea:	4a09      	ldr	r2, [pc, #36]	@ (8002510 <HAL_RCC_ClockConfig+0x1cc>)
 80024ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80024ee:	4b09      	ldr	r3, [pc, #36]	@ (8002514 <HAL_RCC_ClockConfig+0x1d0>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7ff f870 	bl	80015d8 <HAL_InitTick>

  return HAL_OK;
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40022000 	.word	0x40022000
 8002508:	40021000 	.word	0x40021000
 800250c:	08007ac4 	.word	0x08007ac4
 8002510:	20000000 	.word	0x20000000
 8002514:	20000008 	.word	0x20000008

08002518 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002518:	b480      	push	{r7}
 800251a:	b087      	sub	sp, #28
 800251c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
 8002522:	2300      	movs	r3, #0
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
 800252a:	2300      	movs	r3, #0
 800252c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002532:	4b1e      	ldr	r3, [pc, #120]	@ (80025ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b04      	cmp	r3, #4
 8002540:	d002      	beq.n	8002548 <HAL_RCC_GetSysClockFreq+0x30>
 8002542:	2b08      	cmp	r3, #8
 8002544:	d003      	beq.n	800254e <HAL_RCC_GetSysClockFreq+0x36>
 8002546:	e027      	b.n	8002598 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002548:	4b19      	ldr	r3, [pc, #100]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800254a:	613b      	str	r3, [r7, #16]
      break;
 800254c:	e027      	b.n	800259e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	0c9b      	lsrs	r3, r3, #18
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	4a17      	ldr	r2, [pc, #92]	@ (80025b4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002558:	5cd3      	ldrb	r3, [r2, r3]
 800255a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d010      	beq.n	8002588 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002566:	4b11      	ldr	r3, [pc, #68]	@ (80025ac <HAL_RCC_GetSysClockFreq+0x94>)
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	0c5b      	lsrs	r3, r3, #17
 800256c:	f003 0301 	and.w	r3, r3, #1
 8002570:	4a11      	ldr	r2, [pc, #68]	@ (80025b8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002572:	5cd3      	ldrb	r3, [r2, r3]
 8002574:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a0d      	ldr	r2, [pc, #52]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800257a:	fb03 f202 	mul.w	r2, r3, r2
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	fbb2 f3f3 	udiv	r3, r2, r3
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	e004      	b.n	8002592 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	4a0c      	ldr	r2, [pc, #48]	@ (80025bc <HAL_RCC_GetSysClockFreq+0xa4>)
 800258c:	fb02 f303 	mul.w	r3, r2, r3
 8002590:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	613b      	str	r3, [r7, #16]
      break;
 8002596:	e002      	b.n	800259e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002598:	4b05      	ldr	r3, [pc, #20]	@ (80025b0 <HAL_RCC_GetSysClockFreq+0x98>)
 800259a:	613b      	str	r3, [r7, #16]
      break;
 800259c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800259e:	693b      	ldr	r3, [r7, #16]
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	371c      	adds	r7, #28
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bc80      	pop	{r7}
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40021000 	.word	0x40021000
 80025b0:	007a1200 	.word	0x007a1200
 80025b4:	08007adc 	.word	0x08007adc
 80025b8:	08007aec 	.word	0x08007aec
 80025bc:	003d0900 	.word	0x003d0900

080025c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025c0:	b480      	push	{r7}
 80025c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025c4:	4b02      	ldr	r3, [pc, #8]	@ (80025d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80025c6:	681b      	ldr	r3, [r3, #0]
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr
 80025d0:	20000000 	.word	0x20000000

080025d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80025d8:	f7ff fff2 	bl	80025c0 <HAL_RCC_GetHCLKFreq>
 80025dc:	4602      	mov	r2, r0
 80025de:	4b05      	ldr	r3, [pc, #20]	@ (80025f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	0a1b      	lsrs	r3, r3, #8
 80025e4:	f003 0307 	and.w	r3, r3, #7
 80025e8:	4903      	ldr	r1, [pc, #12]	@ (80025f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80025ea:	5ccb      	ldrb	r3, [r1, r3]
 80025ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	40021000 	.word	0x40021000
 80025f8:	08007ad4 	.word	0x08007ad4

080025fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b085      	sub	sp, #20
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002604:	4b0a      	ldr	r3, [pc, #40]	@ (8002630 <RCC_Delay+0x34>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a0a      	ldr	r2, [pc, #40]	@ (8002634 <RCC_Delay+0x38>)
 800260a:	fba2 2303 	umull	r2, r3, r2, r3
 800260e:	0a5b      	lsrs	r3, r3, #9
 8002610:	687a      	ldr	r2, [r7, #4]
 8002612:	fb02 f303 	mul.w	r3, r2, r3
 8002616:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002618:	bf00      	nop
  }
  while (Delay --);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	1e5a      	subs	r2, r3, #1
 800261e:	60fa      	str	r2, [r7, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d1f9      	bne.n	8002618 <RCC_Delay+0x1c>
}
 8002624:	bf00      	nop
 8002626:	bf00      	nop
 8002628:	3714      	adds	r7, #20
 800262a:	46bd      	mov	sp, r7
 800262c:	bc80      	pop	{r7}
 800262e:	4770      	bx	lr
 8002630:	20000000 	.word	0x20000000
 8002634:	10624dd3 	.word	0x10624dd3

08002638 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e076      	b.n	8002738 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800264e:	2b00      	cmp	r3, #0
 8002650:	d108      	bne.n	8002664 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800265a:	d009      	beq.n	8002670 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	61da      	str	r2, [r3, #28]
 8002662:	e005      	b.n	8002670 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2200      	movs	r2, #0
 8002674:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d106      	bne.n	8002690 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f7fe f8c0 	bl	8000810 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80026b8:	431a      	orrs	r2, r3
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026c2:	431a      	orrs	r2, r3
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	691b      	ldr	r3, [r3, #16]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695b      	ldr	r3, [r3, #20]
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026e0:	431a      	orrs	r2, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80026f4:	ea42 0103 	orr.w	r1, r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026fc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	0c1a      	lsrs	r2, r3, #16
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f002 0204 	and.w	r2, r2, #4
 8002716:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	69da      	ldr	r2, [r3, #28]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002726:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2200      	movs	r2, #0
 800272c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2201      	movs	r2, #1
 8002732:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002736:	2300      	movs	r3, #0
}
 8002738:	4618      	mov	r0, r3
 800273a:	3708      	adds	r7, #8
 800273c:	46bd      	mov	sp, r7
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b088      	sub	sp, #32
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	603b      	str	r3, [r7, #0]
 800274c:	4613      	mov	r3, r2
 800274e:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002750:	f7fe ff84 	bl	800165c <HAL_GetTick>
 8002754:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002756:	88fb      	ldrh	r3, [r7, #6]
 8002758:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b01      	cmp	r3, #1
 8002764:	d001      	beq.n	800276a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002766:	2302      	movs	r3, #2
 8002768:	e12a      	b.n	80029c0 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d002      	beq.n	8002776 <HAL_SPI_Transmit+0x36>
 8002770:	88fb      	ldrh	r3, [r7, #6]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e122      	b.n	80029c0 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002780:	2b01      	cmp	r3, #1
 8002782:	d101      	bne.n	8002788 <HAL_SPI_Transmit+0x48>
 8002784:	2302      	movs	r3, #2
 8002786:	e11b      	b.n	80029c0 <HAL_SPI_Transmit+0x280>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2203      	movs	r2, #3
 8002794:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2200      	movs	r2, #0
 800279c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	88fa      	ldrh	r2, [r7, #6]
 80027a8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	88fa      	ldrh	r2, [r7, #6]
 80027ae:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2200      	movs	r2, #0
 80027ba:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2200      	movs	r2, #0
 80027c0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80027d6:	d10f      	bne.n	80027f8 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80027e6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80027f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002802:	2b40      	cmp	r3, #64	@ 0x40
 8002804:	d007      	beq.n	8002816 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002814:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800281e:	d152      	bne.n	80028c6 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d002      	beq.n	800282e <HAL_SPI_Transmit+0xee>
 8002828:	8b7b      	ldrh	r3, [r7, #26]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d145      	bne.n	80028ba <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002832:	881a      	ldrh	r2, [r3, #0]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800283e:	1c9a      	adds	r2, r3, #2
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002848:	b29b      	uxth	r3, r3
 800284a:	3b01      	subs	r3, #1
 800284c:	b29a      	uxth	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002852:	e032      	b.n	80028ba <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b02      	cmp	r3, #2
 8002860:	d112      	bne.n	8002888 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002866:	881a      	ldrh	r2, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002872:	1c9a      	adds	r2, r3, #2
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800287c:	b29b      	uxth	r3, r3
 800287e:	3b01      	subs	r3, #1
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002886:	e018      	b.n	80028ba <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002888:	f7fe fee8 	bl	800165c <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	429a      	cmp	r2, r3
 8002896:	d803      	bhi.n	80028a0 <HAL_SPI_Transmit+0x160>
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800289e:	d102      	bne.n	80028a6 <HAL_SPI_Transmit+0x166>
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d109      	bne.n	80028ba <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2201      	movs	r2, #1
 80028aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e082      	b.n	80029c0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028be:	b29b      	uxth	r3, r3
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d1c7      	bne.n	8002854 <HAL_SPI_Transmit+0x114>
 80028c4:	e053      	b.n	800296e <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d002      	beq.n	80028d4 <HAL_SPI_Transmit+0x194>
 80028ce:	8b7b      	ldrh	r3, [r7, #26]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d147      	bne.n	8002964 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	330c      	adds	r3, #12
 80028de:	7812      	ldrb	r2, [r2, #0]
 80028e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e6:	1c5a      	adds	r2, r3, #1
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028f0:	b29b      	uxth	r3, r3
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80028fa:	e033      	b.n	8002964 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	f003 0302 	and.w	r3, r3, #2
 8002906:	2b02      	cmp	r3, #2
 8002908:	d113      	bne.n	8002932 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	330c      	adds	r3, #12
 8002914:	7812      	ldrb	r2, [r2, #0]
 8002916:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291c:	1c5a      	adds	r2, r3, #1
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002926:	b29b      	uxth	r3, r3
 8002928:	3b01      	subs	r3, #1
 800292a:	b29a      	uxth	r2, r3
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002930:	e018      	b.n	8002964 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002932:	f7fe fe93 	bl	800165c <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	683a      	ldr	r2, [r7, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d803      	bhi.n	800294a <HAL_SPI_Transmit+0x20a>
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002948:	d102      	bne.n	8002950 <HAL_SPI_Transmit+0x210>
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d109      	bne.n	8002964 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e02d      	b.n	80029c0 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002968:	b29b      	uxth	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1c6      	bne.n	80028fc <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800296e:	69fa      	ldr	r2, [r7, #28]
 8002970:	6839      	ldr	r1, [r7, #0]
 8002972:	68f8      	ldr	r0, [r7, #12]
 8002974:	f000 fa66 	bl	8002e44 <SPI_EndRxTxTransaction>
 8002978:	4603      	mov	r3, r0
 800297a:	2b00      	cmp	r3, #0
 800297c:	d002      	beq.n	8002984 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	2220      	movs	r2, #32
 8002982:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10a      	bne.n	80029a2 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2200      	movs	r2, #0
 80029ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	e000      	b.n	80029c0 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80029be:	2300      	movs	r3, #0
  }
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3720      	adds	r7, #32
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08a      	sub	sp, #40	@ 0x28
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
 80029d4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80029d6:	2301      	movs	r3, #1
 80029d8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80029da:	f7fe fe3f 	bl	800165c <HAL_GetTick>
 80029de:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80029e6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80029ee:	887b      	ldrh	r3, [r7, #2]
 80029f0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80029f2:	7ffb      	ldrb	r3, [r7, #31]
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d00c      	beq.n	8002a12 <HAL_SPI_TransmitReceive+0x4a>
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80029fe:	d106      	bne.n	8002a0e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d102      	bne.n	8002a0e <HAL_SPI_TransmitReceive+0x46>
 8002a08:	7ffb      	ldrb	r3, [r7, #31]
 8002a0a:	2b04      	cmp	r3, #4
 8002a0c:	d001      	beq.n	8002a12 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e17f      	b.n	8002d12 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d005      	beq.n	8002a24 <HAL_SPI_TransmitReceive+0x5c>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <HAL_SPI_TransmitReceive+0x5c>
 8002a1e:	887b      	ldrh	r3, [r7, #2]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e174      	b.n	8002d12 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_SPI_TransmitReceive+0x6e>
 8002a32:	2302      	movs	r3, #2
 8002a34:	e16d      	b.n	8002d12 <HAL_SPI_TransmitReceive+0x34a>
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	2201      	movs	r2, #1
 8002a3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002a44:	b2db      	uxtb	r3, r3
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d003      	beq.n	8002a52 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	2205      	movs	r2, #5
 8002a4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2200      	movs	r2, #0
 8002a56:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	887a      	ldrh	r2, [r7, #2]
 8002a62:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	887a      	ldrh	r2, [r7, #2]
 8002a68:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	68ba      	ldr	r2, [r7, #8]
 8002a6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	887a      	ldrh	r2, [r7, #2]
 8002a74:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	887a      	ldrh	r2, [r7, #2]
 8002a7a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2200      	movs	r2, #0
 8002a86:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a92:	2b40      	cmp	r3, #64	@ 0x40
 8002a94:	d007      	beq.n	8002aa6 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002aa4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002aae:	d17e      	bne.n	8002bae <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d002      	beq.n	8002abe <HAL_SPI_TransmitReceive+0xf6>
 8002ab8:	8afb      	ldrh	r3, [r7, #22]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d16c      	bne.n	8002b98 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac2:	881a      	ldrh	r2, [r3, #0]
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ace:	1c9a      	adds	r2, r3, #2
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	3b01      	subs	r3, #1
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ae2:	e059      	b.n	8002b98 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d11b      	bne.n	8002b2a <HAL_SPI_TransmitReceive+0x162>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d016      	beq.n	8002b2a <HAL_SPI_TransmitReceive+0x162>
 8002afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d113      	bne.n	8002b2a <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	881a      	ldrh	r2, [r3, #0]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b12:	1c9a      	adds	r2, r3, #2
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b1c:	b29b      	uxth	r3, r3
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002b26:	2300      	movs	r3, #0
 8002b28:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d119      	bne.n	8002b6c <HAL_SPI_TransmitReceive+0x1a4>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d014      	beq.n	8002b6c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b4c:	b292      	uxth	r2, r2
 8002b4e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b54:	1c9a      	adds	r2, r3, #2
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b29a      	uxth	r2, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002b6c:	f7fe fd76 	bl	800165c <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	6a3b      	ldr	r3, [r7, #32]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d80d      	bhi.n	8002b98 <HAL_SPI_TransmitReceive+0x1d0>
 8002b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b82:	d009      	beq.n	8002b98 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e0bc      	b.n	8002d12 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1a0      	bne.n	8002ae4 <HAL_SPI_TransmitReceive+0x11c>
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d19b      	bne.n	8002ae4 <HAL_SPI_TransmitReceive+0x11c>
 8002bac:	e082      	b.n	8002cb4 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <HAL_SPI_TransmitReceive+0x1f4>
 8002bb6:	8afb      	ldrh	r3, [r7, #22]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d171      	bne.n	8002ca0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	330c      	adds	r3, #12
 8002bc6:	7812      	ldrb	r2, [r2, #0]
 8002bc8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	b29a      	uxth	r2, r3
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002be2:	e05d      	b.n	8002ca0 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 0302 	and.w	r3, r3, #2
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d11c      	bne.n	8002c2c <HAL_SPI_TransmitReceive+0x264>
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d017      	beq.n	8002c2c <HAL_SPI_TransmitReceive+0x264>
 8002bfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d114      	bne.n	8002c2c <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	330c      	adds	r3, #12
 8002c0c:	7812      	ldrb	r2, [r2, #0]
 8002c0e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c14:	1c5a      	adds	r2, r3, #1
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	3b01      	subs	r3, #1
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002c28:	2300      	movs	r3, #0
 8002c2a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 0301 	and.w	r3, r3, #1
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d119      	bne.n	8002c6e <HAL_SPI_TransmitReceive+0x2a6>
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c3e:	b29b      	uxth	r3, r3
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d014      	beq.n	8002c6e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68da      	ldr	r2, [r3, #12]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c56:	1c5a      	adds	r2, r3, #1
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	3b01      	subs	r3, #1
 8002c64:	b29a      	uxth	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002c6e:	f7fe fcf5 	bl	800165c <HAL_GetTick>
 8002c72:	4602      	mov	r2, r0
 8002c74:	6a3b      	ldr	r3, [r7, #32]
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d803      	bhi.n	8002c86 <HAL_SPI_TransmitReceive+0x2be>
 8002c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c84:	d102      	bne.n	8002c8c <HAL_SPI_TransmitReceive+0x2c4>
 8002c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d109      	bne.n	8002ca0 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e038      	b.n	8002d12 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d19c      	bne.n	8002be4 <HAL_SPI_TransmitReceive+0x21c>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d197      	bne.n	8002be4 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002cb4:	6a3a      	ldr	r2, [r7, #32]
 8002cb6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 f8c3 	bl	8002e44 <SPI_EndRxTxTransaction>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d008      	beq.n	8002cd6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2220      	movs	r2, #32
 8002cc8:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e01d      	b.n	8002d12 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10a      	bne.n	8002cf4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	613b      	str	r3, [r7, #16]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	613b      	str	r3, [r7, #16]
 8002cf2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e000      	b.n	8002d12 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8002d10:	2300      	movs	r3, #0
  }
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	3728      	adds	r7, #40	@ 0x28
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bd80      	pop	{r7, pc}

08002d1a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d28:	b2db      	uxtb	r3, r3
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bc80      	pop	{r7}
 8002d32:	4770      	bx	lr

08002d34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b088      	sub	sp, #32
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	603b      	str	r3, [r7, #0]
 8002d40:	4613      	mov	r3, r2
 8002d42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002d44:	f7fe fc8a 	bl	800165c <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d4c:	1a9b      	subs	r3, r3, r2
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	4413      	add	r3, r2
 8002d52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002d54:	f7fe fc82 	bl	800165c <HAL_GetTick>
 8002d58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002d5a:	4b39      	ldr	r3, [pc, #228]	@ (8002e40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	015b      	lsls	r3, r3, #5
 8002d60:	0d1b      	lsrs	r3, r3, #20
 8002d62:	69fa      	ldr	r2, [r7, #28]
 8002d64:	fb02 f303 	mul.w	r3, r2, r3
 8002d68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002d6a:	e054      	b.n	8002e16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d72:	d050      	beq.n	8002e16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d74:	f7fe fc72 	bl	800165c <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	69fa      	ldr	r2, [r7, #28]
 8002d80:	429a      	cmp	r2, r3
 8002d82:	d902      	bls.n	8002d8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d13d      	bne.n	8002e06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	685a      	ldr	r2, [r3, #4]
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002d98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002da2:	d111      	bne.n	8002dc8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002dac:	d004      	beq.n	8002db8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002db6:	d107      	bne.n	8002dc8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002dc6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002dd0:	d10f      	bne.n	8002df2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002df0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e017      	b.n	8002e36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	4013      	ands	r3, r2
 8002e20:	68ba      	ldr	r2, [r7, #8]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	bf0c      	ite	eq
 8002e26:	2301      	moveq	r3, #1
 8002e28:	2300      	movne	r3, #0
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	79fb      	ldrb	r3, [r7, #7]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d19b      	bne.n	8002d6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002e34:	2300      	movs	r3, #0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3720      	adds	r7, #32
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	20000000 	.word	0x20000000

08002e44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af02      	add	r7, sp, #8
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	2201      	movs	r2, #1
 8002e58:	2102      	movs	r1, #2
 8002e5a:	68f8      	ldr	r0, [r7, #12]
 8002e5c:	f7ff ff6a 	bl	8002d34 <SPI_WaitFlagStateUntilTimeout>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d007      	beq.n	8002e76 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e6a:	f043 0220 	orr.w	r2, r3, #32
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e013      	b.n	8002e9e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	2180      	movs	r1, #128	@ 0x80
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f7ff ff57 	bl	8002d34 <SPI_WaitFlagStateUntilTimeout>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d007      	beq.n	8002e9c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e90:	f043 0220 	orr.w	r2, r3, #32
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e000      	b.n	8002e9e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <disk_status>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	4603      	mov	r3, r0
 8002eae:	71fb      	strb	r3, [r7, #7]
	if(pdrv == DEV_MMC){
 8002eb0:	79fb      	ldrb	r3, [r7, #7]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d10a      	bne.n	8002ecc <disk_status+0x26>
		return SD_disk_status(pdrv) == 0 ? 0 : STA_NOINIT;
 8002eb6:	79fb      	ldrb	r3, [r7, #7]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7fe f945 	bl	8001148 <SD_disk_status>
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	bf14      	ite	ne
 8002ec4:	2301      	movne	r3, #1
 8002ec6:	2300      	moveq	r3, #0
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	e000      	b.n	8002ece <disk_status+0x28>
	}
	return STA_NOINIT;
 8002ecc:	2301      	movs	r3, #1
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3708      	adds	r7, #8
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}

08002ed6 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8002ed6:	b580      	push	{r7, lr}
 8002ed8:	b082      	sub	sp, #8
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	4603      	mov	r3, r0
 8002ede:	71fb      	strb	r3, [r7, #7]
	if(pdrv == DEV_MMC){
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10a      	bne.n	8002efc <disk_initialize+0x26>
		return SD_disk_initialize(pdrv) == 0 ? 0 : STA_NOINIT;
 8002ee6:	79fb      	ldrb	r3, [r7, #7]
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f7fe f843 	bl	8000f74 <SD_disk_initialize>
 8002eee:	4603      	mov	r3, r0
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	bf14      	ite	ne
 8002ef4:	2301      	movne	r3, #1
 8002ef6:	2300      	moveq	r3, #0
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	e000      	b.n	8002efe <disk_initialize+0x28>
	}
	return STA_NOINIT;
 8002efc:	2301      	movs	r3, #1
}
 8002efe:	4618      	mov	r0, r3
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	LBA_t sector,	/* Start sector in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b084      	sub	sp, #16
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
 8002f10:	603b      	str	r3, [r7, #0]
 8002f12:	4603      	mov	r3, r0
 8002f14:	73fb      	strb	r3, [r7, #15]
	if(pdrv == DEV_MMC){
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d10c      	bne.n	8002f36 <disk_read+0x30>
		return SD_disk_read(pdrv, buff, sector, count) == 0 ? RES_OK : RES_ERROR;
 8002f1c:	7bf8      	ldrb	r0, [r7, #15]
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	68b9      	ldr	r1, [r7, #8]
 8002f24:	f7fe f924 	bl	8001170 <SD_disk_read>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	bf14      	ite	ne
 8002f2e:	2301      	movne	r3, #1
 8002f30:	2300      	moveq	r3, #0
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	e000      	b.n	8002f38 <disk_read+0x32>
	}
	return RES_PARERR;
 8002f36:	2304      	movs	r3, #4
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	LBA_t sector,		/* Start sector in LBA */
	UINT count			/* Number of sectors to write */
)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60b9      	str	r1, [r7, #8]
 8002f48:	607a      	str	r2, [r7, #4]
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	73fb      	strb	r3, [r7, #15]
	if(pdrv == DEV_MMC){
 8002f50:	7bfb      	ldrb	r3, [r7, #15]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10c      	bne.n	8002f70 <disk_write+0x30>
		return SD_disk_write(pdrv, buff, sector, count) == 0 ? RES_OK : RES_ERROR;
 8002f56:	7bf8      	ldrb	r0, [r7, #15]
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	f7fe f971 	bl	8001244 <SD_disk_write>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	bf14      	ite	ne
 8002f68:	2301      	movne	r3, #1
 8002f6a:	2300      	moveq	r3, #0
 8002f6c:	b2db      	uxtb	r3, r3
 8002f6e:	e000      	b.n	8002f72 <disk_write+0x32>
	}
	return RES_PARERR;
 8002f70:	2304      	movs	r3, #4
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	4603      	mov	r3, r0
 8002f82:	603a      	str	r2, [r7, #0]
 8002f84:	71fb      	strb	r3, [r7, #7]
 8002f86:	460b      	mov	r3, r1
 8002f88:	71bb      	strb	r3, [r7, #6]
	if(pdrv == DEV_MMC){
 8002f8a:	79fb      	ldrb	r3, [r7, #7]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d10c      	bne.n	8002faa <disk_ioctl+0x30>
		return SD_disk_ioctl(pdrv, cmd, buff) == 0 ? RES_OK : RES_ERROR;
 8002f90:	79b9      	ldrb	r1, [r7, #6]
 8002f92:	79fb      	ldrb	r3, [r7, #7]
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f7fe f9d8 	bl	800134c <SD_disk_ioctl>
 8002f9c:	4603      	mov	r3, r0
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	bf14      	ite	ne
 8002fa2:	2301      	movne	r3, #1
 8002fa4:	2300      	moveq	r3, #0
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	e000      	b.n	8002fac <disk_ioctl+0x32>
	}
	return RES_PARERR;
 8002faa:	2304      	movs	r3, #4
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3708      	adds	r7, #8
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <get_fattime>:

#include <string.h>
#include "ff.h"			/* Declarations of FatFs API */
#include "diskio.h"		/* Declarations of device I/O functions */

DWORD get_fattime(void) {
 8002fb4:	b480      	push	{r7}
 8002fb6:	af00      	add	r7, sp, #0
    return ((DWORD)(2025 - 1980) << 25)  // Year 2025
 8002fb8:	4b02      	ldr	r3, [pc, #8]	@ (8002fc4 <get_fattime+0x10>)
         | ((DWORD)4 << 21)              // Month April
         | ((DWORD)14 << 16)             // Day 14
         | ((DWORD)12 << 11)             // Hour 12
         | ((DWORD)0 << 5)               // Minute 0
         | ((DWORD)0 >> 1);              // Second / 2
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bc80      	pop	{r7}
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	5a8e6000 	.word	0x5a8e6000

08002fc8 <ld_word>:
/*-----------------------------------------------------------------------*/
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b085      	sub	sp, #20
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8002fd8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fdc:	021b      	lsls	r3, r3, #8
 8002fde:	b21a      	sxth	r2, r3
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	b21b      	sxth	r3, r3
 8002fe6:	4313      	orrs	r3, r2
 8002fe8:	b21b      	sxth	r3, r3
 8002fea:	81fb      	strh	r3, [r7, #14]
	return rv;
 8002fec:	89fb      	ldrh	r3, [r7, #14]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr

08002ff8 <ld_dword>:

static DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b085      	sub	sp, #20
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	3303      	adds	r3, #3
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	021b      	lsls	r3, r3, #8
 800300c:	687a      	ldr	r2, [r7, #4]
 800300e:	3202      	adds	r2, #2
 8003010:	7812      	ldrb	r2, [r2, #0]
 8003012:	4313      	orrs	r3, r2
 8003014:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	021b      	lsls	r3, r3, #8
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	3201      	adds	r2, #1
 800301e:	7812      	ldrb	r2, [r2, #0]
 8003020:	4313      	orrs	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	021b      	lsls	r3, r3, #8
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	7812      	ldrb	r2, [r2, #0]
 800302c:	4313      	orrs	r3, r2
 800302e:	60fb      	str	r3, [r7, #12]
	return rv;
 8003030:	68fb      	ldr	r3, [r7, #12]
}
 8003032:	4618      	mov	r0, r3
 8003034:	3714      	adds	r7, #20
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr

0800303c <ld_qword>:

#if FF_FS_EXFAT
static QWORD ld_qword (const BYTE* ptr)	/* Load an 8-byte little-endian word */
{
 800303c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003040:	b09d      	sub	sp, #116	@ 0x74
 8003042:	af00      	add	r7, sp, #0
 8003044:	6678      	str	r0, [r7, #100]	@ 0x64
	QWORD rv;

	rv = ptr[7];
 8003046:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003048:	3307      	adds	r3, #7
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2200      	movs	r2, #0
 8003050:	469a      	mov	sl, r3
 8003052:	4693      	mov	fp, r2
 8003054:	e9c7 ab1a 	strd	sl, fp, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[6];
 8003058:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800305c:	f04f 0000 	mov.w	r0, #0
 8003060:	f04f 0100 	mov.w	r1, #0
 8003064:	0219      	lsls	r1, r3, #8
 8003066:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800306a:	0210      	lsls	r0, r2, #8
 800306c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800306e:	3306      	adds	r3, #6
 8003070:	781b      	ldrb	r3, [r3, #0]
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2200      	movs	r2, #0
 8003076:	461c      	mov	r4, r3
 8003078:	4615      	mov	r5, r2
 800307a:	ea40 0804 	orr.w	r8, r0, r4
 800307e:	ea41 0905 	orr.w	r9, r1, r5
 8003082:	e9c7 891a 	strd	r8, r9, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[5];
 8003086:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 800308a:	f04f 0000 	mov.w	r0, #0
 800308e:	f04f 0100 	mov.w	r1, #0
 8003092:	0219      	lsls	r1, r3, #8
 8003094:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003098:	0210      	lsls	r0, r2, #8
 800309a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800309c:	3305      	adds	r3, #5
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2200      	movs	r2, #0
 80030a4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80030a6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80030a8:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	@ 0x58
 80030ac:	461a      	mov	r2, r3
 80030ae:	4302      	orrs	r2, r0
 80030b0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80030b2:	4623      	mov	r3, r4
 80030b4:	430b      	orrs	r3, r1
 80030b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80030b8:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80030bc:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[4];
 80030c0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80030c4:	f04f 0000 	mov.w	r0, #0
 80030c8:	f04f 0100 	mov.w	r1, #0
 80030cc:	0219      	lsls	r1, r3, #8
 80030ce:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80030d2:	0210      	lsls	r0, r2, #8
 80030d4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030d6:	3304      	adds	r3, #4
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2200      	movs	r2, #0
 80030de:	653b      	str	r3, [r7, #80]	@ 0x50
 80030e0:	657a      	str	r2, [r7, #84]	@ 0x54
 80030e2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	@ 0x50
 80030e6:	461a      	mov	r2, r3
 80030e8:	4302      	orrs	r2, r0
 80030ea:	623a      	str	r2, [r7, #32]
 80030ec:	4623      	mov	r3, r4
 80030ee:	430b      	orrs	r3, r1
 80030f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80030f2:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80030f6:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[3];
 80030fa:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80030fe:	f04f 0000 	mov.w	r0, #0
 8003102:	f04f 0100 	mov.w	r1, #0
 8003106:	0219      	lsls	r1, r3, #8
 8003108:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800310c:	0210      	lsls	r0, r2, #8
 800310e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003110:	3303      	adds	r3, #3
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	b2db      	uxtb	r3, r3
 8003116:	2200      	movs	r2, #0
 8003118:	64bb      	str	r3, [r7, #72]	@ 0x48
 800311a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800311c:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	@ 0x48
 8003120:	461a      	mov	r2, r3
 8003122:	4302      	orrs	r2, r0
 8003124:	61ba      	str	r2, [r7, #24]
 8003126:	4623      	mov	r3, r4
 8003128:	430b      	orrs	r3, r1
 800312a:	61fb      	str	r3, [r7, #28]
 800312c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003130:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[2];
 8003134:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8003138:	f04f 0000 	mov.w	r0, #0
 800313c:	f04f 0100 	mov.w	r1, #0
 8003140:	0219      	lsls	r1, r3, #8
 8003142:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003146:	0210      	lsls	r0, r2, #8
 8003148:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800314a:	3302      	adds	r3, #2
 800314c:	781b      	ldrb	r3, [r3, #0]
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2200      	movs	r2, #0
 8003152:	643b      	str	r3, [r7, #64]	@ 0x40
 8003154:	647a      	str	r2, [r7, #68]	@ 0x44
 8003156:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800315a:	461a      	mov	r2, r3
 800315c:	4302      	orrs	r2, r0
 800315e:	613a      	str	r2, [r7, #16]
 8003160:	4623      	mov	r3, r4
 8003162:	430b      	orrs	r3, r1
 8003164:	617b      	str	r3, [r7, #20]
 8003166:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800316a:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[1];
 800316e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003172:	f04f 0200 	mov.w	r2, #0
 8003176:	f04f 0300 	mov.w	r3, #0
 800317a:	020b      	lsls	r3, r1, #8
 800317c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003180:	0202      	lsls	r2, r0, #8
 8003182:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8003184:	3101      	adds	r1, #1
 8003186:	7809      	ldrb	r1, [r1, #0]
 8003188:	b2c9      	uxtb	r1, r1
 800318a:	2000      	movs	r0, #0
 800318c:	63b9      	str	r1, [r7, #56]	@ 0x38
 800318e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8003190:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8003194:	4604      	mov	r4, r0
 8003196:	4314      	orrs	r4, r2
 8003198:	60bc      	str	r4, [r7, #8]
 800319a:	4319      	orrs	r1, r3
 800319c:	60f9      	str	r1, [r7, #12]
 800319e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80031a2:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	rv = rv << 8 | ptr[0];
 80031a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80031aa:	f04f 0200 	mov.w	r2, #0
 80031ae:	f04f 0300 	mov.w	r3, #0
 80031b2:	020b      	lsls	r3, r1, #8
 80031b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80031b8:	0202      	lsls	r2, r0, #8
 80031ba:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80031bc:	7809      	ldrb	r1, [r1, #0]
 80031be:	b2c9      	uxtb	r1, r1
 80031c0:	2000      	movs	r0, #0
 80031c2:	6339      	str	r1, [r7, #48]	@ 0x30
 80031c4:	6378      	str	r0, [r7, #52]	@ 0x34
 80031c6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 80031ca:	4604      	mov	r4, r0
 80031cc:	4314      	orrs	r4, r2
 80031ce:	603c      	str	r4, [r7, #0]
 80031d0:	4319      	orrs	r1, r3
 80031d2:	6079      	str	r1, [r7, #4]
 80031d4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80031d8:	e9c7 341a 	strd	r3, r4, [r7, #104]	@ 0x68
	return rv;
 80031dc:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
}
 80031e0:	4610      	mov	r0, r2
 80031e2:	4619      	mov	r1, r3
 80031e4:	3774      	adds	r7, #116	@ 0x74
 80031e6:	46bd      	mov	sp, r7
 80031e8:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80031ec:	4770      	bx	lr

080031ee <st_word>:
#endif

#if !FF_FS_READONLY
static void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	460b      	mov	r3, r1
 80031f8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	1c5a      	adds	r2, r3, #1
 80031fe:	607a      	str	r2, [r7, #4]
 8003200:	887a      	ldrh	r2, [r7, #2]
 8003202:	b2d2      	uxtb	r2, r2
 8003204:	701a      	strb	r2, [r3, #0]
 8003206:	887b      	ldrh	r3, [r7, #2]
 8003208:	0a1b      	lsrs	r3, r3, #8
 800320a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	1c5a      	adds	r2, r3, #1
 8003210:	607a      	str	r2, [r7, #4]
 8003212:	887a      	ldrh	r2, [r7, #2]
 8003214:	b2d2      	uxtb	r2, r2
 8003216:	701a      	strb	r2, [r3, #0]
}
 8003218:	bf00      	nop
 800321a:	370c      	adds	r7, #12
 800321c:	46bd      	mov	sp, r7
 800321e:	bc80      	pop	{r7}
 8003220:	4770      	bx	lr

08003222 <st_dword>:

static void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003222:	b480      	push	{r7}
 8003224:	b083      	sub	sp, #12
 8003226:	af00      	add	r7, sp, #0
 8003228:	6078      	str	r0, [r7, #4]
 800322a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	1c5a      	adds	r2, r3, #1
 8003230:	607a      	str	r2, [r7, #4]
 8003232:	683a      	ldr	r2, [r7, #0]
 8003234:	b2d2      	uxtb	r2, r2
 8003236:	701a      	strb	r2, [r3, #0]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	0a1b      	lsrs	r3, r3, #8
 800323c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	1c5a      	adds	r2, r3, #1
 8003242:	607a      	str	r2, [r7, #4]
 8003244:	683a      	ldr	r2, [r7, #0]
 8003246:	b2d2      	uxtb	r2, r2
 8003248:	701a      	strb	r2, [r3, #0]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	0a1b      	lsrs	r3, r3, #8
 800324e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	1c5a      	adds	r2, r3, #1
 8003254:	607a      	str	r2, [r7, #4]
 8003256:	683a      	ldr	r2, [r7, #0]
 8003258:	b2d2      	uxtb	r2, r2
 800325a:	701a      	strb	r2, [r3, #0]
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	0a1b      	lsrs	r3, r3, #8
 8003260:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	1c5a      	adds	r2, r3, #1
 8003266:	607a      	str	r2, [r7, #4]
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	701a      	strb	r2, [r3, #0]
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	bc80      	pop	{r7}
 8003276:	4770      	bx	lr

08003278 <st_qword>:

#if FF_FS_EXFAT
static void st_qword (BYTE* ptr, QWORD val)	/* Store an 8-byte word in little-endian */
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	60f8      	str	r0, [r7, #12]
 8003280:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	1c5a      	adds	r2, r3, #1
 8003288:	60fa      	str	r2, [r7, #12]
 800328a:	783a      	ldrb	r2, [r7, #0]
 800328c:	701a      	strb	r2, [r3, #0]
 800328e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003292:	f04f 0200 	mov.w	r2, #0
 8003296:	f04f 0300 	mov.w	r3, #0
 800329a:	0a02      	lsrs	r2, r0, #8
 800329c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80032a0:	0a0b      	lsrs	r3, r1, #8
 80032a2:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	1c5a      	adds	r2, r3, #1
 80032aa:	60fa      	str	r2, [r7, #12]
 80032ac:	783a      	ldrb	r2, [r7, #0]
 80032ae:	701a      	strb	r2, [r3, #0]
 80032b0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032b4:	f04f 0200 	mov.w	r2, #0
 80032b8:	f04f 0300 	mov.w	r3, #0
 80032bc:	0a02      	lsrs	r2, r0, #8
 80032be:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80032c2:	0a0b      	lsrs	r3, r1, #8
 80032c4:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	60fa      	str	r2, [r7, #12]
 80032ce:	783a      	ldrb	r2, [r7, #0]
 80032d0:	701a      	strb	r2, [r3, #0]
 80032d2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032d6:	f04f 0200 	mov.w	r2, #0
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	0a02      	lsrs	r2, r0, #8
 80032e0:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80032e4:	0a0b      	lsrs	r3, r1, #8
 80032e6:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1c5a      	adds	r2, r3, #1
 80032ee:	60fa      	str	r2, [r7, #12]
 80032f0:	783a      	ldrb	r2, [r7, #0]
 80032f2:	701a      	strb	r2, [r3, #0]
 80032f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80032f8:	f04f 0200 	mov.w	r2, #0
 80032fc:	f04f 0300 	mov.w	r3, #0
 8003300:	0a02      	lsrs	r2, r0, #8
 8003302:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003306:	0a0b      	lsrs	r3, r1, #8
 8003308:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	1c5a      	adds	r2, r3, #1
 8003310:	60fa      	str	r2, [r7, #12]
 8003312:	783a      	ldrb	r2, [r7, #0]
 8003314:	701a      	strb	r2, [r3, #0]
 8003316:	e9d7 0100 	ldrd	r0, r1, [r7]
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	f04f 0300 	mov.w	r3, #0
 8003322:	0a02      	lsrs	r2, r0, #8
 8003324:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003328:	0a0b      	lsrs	r3, r1, #8
 800332a:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	60fa      	str	r2, [r7, #12]
 8003334:	783a      	ldrb	r2, [r7, #0]
 8003336:	701a      	strb	r2, [r3, #0]
 8003338:	e9d7 0100 	ldrd	r0, r1, [r7]
 800333c:	f04f 0200 	mov.w	r2, #0
 8003340:	f04f 0300 	mov.w	r3, #0
 8003344:	0a02      	lsrs	r2, r0, #8
 8003346:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800334a:	0a0b      	lsrs	r3, r1, #8
 800334c:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val; val >>= 8;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	60fa      	str	r2, [r7, #12]
 8003356:	783a      	ldrb	r2, [r7, #0]
 8003358:	701a      	strb	r2, [r3, #0]
 800335a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800335e:	f04f 0200 	mov.w	r2, #0
 8003362:	f04f 0300 	mov.w	r3, #0
 8003366:	0a02      	lsrs	r2, r0, #8
 8003368:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800336c:	0a0b      	lsrs	r3, r1, #8
 800336e:	e9c7 2300 	strd	r2, r3, [r7]
	*ptr++ = (BYTE)val;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	1c5a      	adds	r2, r3, #1
 8003376:	60fa      	str	r2, [r7, #12]
 8003378:	783a      	ldrb	r2, [r7, #0]
 800337a:	701a      	strb	r2, [r3, #0]
}
 800337c:	bf00      	nop
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	bc80      	pop	{r7}
 8003384:	4770      	bx	lr

08003386 <dbc_1st>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Test if the byte is DBC 1st byte */
static int dbc_1st (BYTE c)
{
 8003386:	b480      	push	{r7}
 8003388:	b083      	sub	sp, #12
 800338a:	af00      	add	r7, sp, #0
 800338c:	4603      	mov	r3, r0
 800338e:	71fb      	strb	r3, [r7, #7]
	if (c >= DbcTbl[0]) {
		if (c <= DbcTbl[1]) return 1;
		if (c >= DbcTbl[2] && c <= DbcTbl[3]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d001      	beq.n	800339a <dbc_1st+0x14>
 8003396:	2300      	movs	r3, #0
 8003398:	e000      	b.n	800339c <dbc_1st+0x16>
#endif
	return 0;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bc80      	pop	{r7}
 80033a4:	4770      	bx	lr

080033a6 <dbc_2nd>:


/* Test if the byte is DBC 2nd byte */
static int dbc_2nd (BYTE c)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	4603      	mov	r3, r0
 80033ae:	71fb      	strb	r3, [r7, #7]
		if (c <= DbcTbl[5]) return 1;
		if (c >= DbcTbl[6] && c <= DbcTbl[7]) return 1;
		if (c >= DbcTbl[8] && c <= DbcTbl[9]) return 1;
	}
#else						/* SBCS fixed code page */
	if (c != 0) return 0;	/* Always false */
 80033b0:	79fb      	ldrb	r3, [r7, #7]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <dbc_2nd+0x14>
 80033b6:	2300      	movs	r3, #0
 80033b8:	e000      	b.n	80033bc <dbc_2nd+0x16>
#endif
	return 0;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr

080033c6 <tchar2uni>:

/* Get a Unicode code point from the TCHAR string in defined API encodeing */
static DWORD tchar2uni (	/* Returns a character in UTF-16 encoding (>=0x10000 on surrogate pair, 0xFFFFFFFF on decode error) */
	const TCHAR** str		/* Pointer to pointer to TCHAR string in configured encoding */
)
{
 80033c6:	b580      	push	{r7, lr}
 80033c8:	b086      	sub	sp, #24
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
	DWORD uc;
	const TCHAR *p = *str;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	617b      	str	r3, [r7, #20]

#else		/* ANSI/OEM input */
	BYTE sb;
	WCHAR wc;

	wc = (BYTE)*p++;			/* Get a byte */
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	1c5a      	adds	r2, r3, #1
 80033d8:	617a      	str	r2, [r7, #20]
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	827b      	strh	r3, [r7, #18]
	if (dbc_1st((BYTE)wc)) {	/* Is it a DBC 1st byte? */
 80033de:	8a7b      	ldrh	r3, [r7, #18]
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7ff ffcf 	bl	8003386 <dbc_1st>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d015      	beq.n	800341a <tchar2uni+0x54>
		sb = (BYTE)*p++;		/* Get 2nd byte */
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	617a      	str	r2, [r7, #20]
 80033f4:	781b      	ldrb	r3, [r3, #0]
 80033f6:	747b      	strb	r3, [r7, #17]
		if (!dbc_2nd(sb)) return 0xFFFFFFFF;	/* Invalid code? */
 80033f8:	7c7b      	ldrb	r3, [r7, #17]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7ff ffd3 	bl	80033a6 <dbc_2nd>
 8003400:	4603      	mov	r3, r0
 8003402:	2b00      	cmp	r3, #0
 8003404:	d102      	bne.n	800340c <tchar2uni+0x46>
 8003406:	f04f 33ff 	mov.w	r3, #4294967295
 800340a:	e01d      	b.n	8003448 <tchar2uni+0x82>
		wc = (wc << 8) + sb;	/* Make a DBC */
 800340c:	8a7b      	ldrh	r3, [r7, #18]
 800340e:	021b      	lsls	r3, r3, #8
 8003410:	b29a      	uxth	r2, r3
 8003412:	7c7b      	ldrb	r3, [r7, #17]
 8003414:	b29b      	uxth	r3, r3
 8003416:	4413      	add	r3, r2
 8003418:	827b      	strh	r3, [r7, #18]
	}
	if (wc != 0) {
 800341a:	8a7b      	ldrh	r3, [r7, #18]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00d      	beq.n	800343c <tchar2uni+0x76>
		wc = ff_oem2uni(wc, CODEPAGE);	/* ANSI/OEM ==> Unicode */
 8003420:	8a7b      	ldrh	r3, [r7, #18]
 8003422:	f240 11b5 	movw	r1, #437	@ 0x1b5
 8003426:	4618      	mov	r0, r3
 8003428:	f004 fa00 	bl	800782c <ff_oem2uni>
 800342c:	4603      	mov	r3, r0
 800342e:	827b      	strh	r3, [r7, #18]
		if (wc == 0) return 0xFFFFFFFF;	/* Invalid code? */
 8003430:	8a7b      	ldrh	r3, [r7, #18]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d102      	bne.n	800343c <tchar2uni+0x76>
 8003436:	f04f 33ff 	mov.w	r3, #4294967295
 800343a:	e005      	b.n	8003448 <tchar2uni+0x82>
	}
	uc = wc;
 800343c:	8a7b      	ldrh	r3, [r7, #18]
 800343e:	60fb      	str	r3, [r7, #12]

#endif
	*str = p;	/* Next read pointer */
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	697a      	ldr	r2, [r7, #20]
 8003444:	601a      	str	r2, [r3, #0]
	return uc;
 8003446:	68fb      	ldr	r3, [r7, #12]
}
 8003448:	4618      	mov	r0, r3
 800344a:	3718      	adds	r7, #24
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <put_utf>:
static UINT put_utf (	/* Returns number of encoding units written (0:buffer overflow or wrong encoding) */
	DWORD chr,	/* UTF-16 encoded character (Surrogate pair if >=0x10000) */
	TCHAR* buf,	/* Output buffer */
	UINT szb	/* Size of the buffer */
)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b086      	sub	sp, #24
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	60b9      	str	r1, [r7, #8]
 800345a:	607a      	str	r2, [r7, #4]
	return 1;

#else						/* ANSI/OEM output */
	WCHAR wc;

	wc = ff_uni2oem(chr, CODEPAGE);
 800345c:	f240 11b5 	movw	r1, #437	@ 0x1b5
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f004 f9ab 	bl	80077bc <ff_uni2oem>
 8003466:	4603      	mov	r3, r0
 8003468:	82fb      	strh	r3, [r7, #22]
	if (wc >= 0x100) {	/* Is this a DBC? */
 800346a:	8afb      	ldrh	r3, [r7, #22]
 800346c:	2bff      	cmp	r3, #255	@ 0xff
 800346e:	d914      	bls.n	800349a <put_utf+0x4a>
		if (szb < 2) return 0;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d801      	bhi.n	800347a <put_utf+0x2a>
 8003476:	2300      	movs	r3, #0
 8003478:	e01e      	b.n	80034b8 <put_utf+0x68>
		*buf++ = (char)(wc >> 8);	/* Store DBC 1st byte */
 800347a:	8afb      	ldrh	r3, [r7, #22]
 800347c:	0a1b      	lsrs	r3, r3, #8
 800347e:	b299      	uxth	r1, r3
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	1c5a      	adds	r2, r3, #1
 8003484:	60ba      	str	r2, [r7, #8]
 8003486:	b2ca      	uxtb	r2, r1
 8003488:	701a      	strb	r2, [r3, #0]
		*buf++ = (TCHAR)wc;			/* Store DBC 2nd byte */
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	60ba      	str	r2, [r7, #8]
 8003490:	8afa      	ldrh	r2, [r7, #22]
 8003492:	b2d2      	uxtb	r2, r2
 8003494:	701a      	strb	r2, [r3, #0]
		return 2;
 8003496:	2302      	movs	r3, #2
 8003498:	e00e      	b.n	80034b8 <put_utf+0x68>
	}
	if (wc == 0 || szb < 1) return 0;	/* Invalid character or buffer overflow? */
 800349a:	8afb      	ldrh	r3, [r7, #22]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <put_utf+0x56>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <put_utf+0x5a>
 80034a6:	2300      	movs	r3, #0
 80034a8:	e006      	b.n	80034b8 <put_utf+0x68>
	*buf++ = (TCHAR)wc;					/* Store the character */
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	1c5a      	adds	r2, r3, #1
 80034ae:	60ba      	str	r2, [r7, #8]
 80034b0:	8afa      	ldrh	r2, [r7, #22]
 80034b2:	b2d2      	uxtb	r2, r2
 80034b4:	701a      	strb	r2, [r3, #0]
	return 1;
 80034b6:	2301      	movs	r3, #1
#endif
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3718      	adds	r7, #24
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <sync_window>:
/*-----------------------------------------------------------------------*/
#if !FF_FS_READONLY
static FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs			/* Filesystem object */
)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
	FRESULT res = FR_OK;
 80034c8:	2300      	movs	r3, #0
 80034ca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Is the disk access window dirty? */
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	791b      	ldrb	r3, [r3, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d02c      	beq.n	800352e <sync_window+0x6e>
		if (disk_write(fs->pdrv, fs->win, fs->winsect, 1) == RES_OK) {	/* Write it back into the volume */
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	7858      	ldrb	r0, [r3, #1]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034e2:	2301      	movs	r3, #1
 80034e4:	f7ff fd2c 	bl	8002f40 <disk_write>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d11d      	bne.n	800352a <sync_window+0x6a>
			fs->wflag = 0;	/* Clear window dirty flag */
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	711a      	strb	r2, [r3, #4]
			if (fs->winsect - fs->fatbase < fs->fsize) {	/* Is it in the 1st FAT? */
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034fc:	1ad2      	subs	r2, r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003502:	429a      	cmp	r2, r3
 8003504:	d213      	bcs.n	800352e <sync_window+0x6e>
				if (fs->n_fats == 2) disk_write(fs->pdrv, fs->win, fs->winsect + fs->fsize, 1);	/* Reflect it to 2nd FAT if needed */
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	78db      	ldrb	r3, [r3, #3]
 800350a:	2b02      	cmp	r3, #2
 800350c:	d10f      	bne.n	800352e <sync_window+0x6e>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	7858      	ldrb	r0, [r3, #1]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003520:	441a      	add	r2, r3
 8003522:	2301      	movs	r3, #1
 8003524:	f7ff fd0c 	bl	8002f40 <disk_write>
 8003528:	e001      	b.n	800352e <sync_window+0x6e>
			}
		} else {
			res = FR_DISK_ERR;
 800352a:	2301      	movs	r3, #1
 800352c:	73fb      	strb	r3, [r7, #15]
		}
	}
	return res;
 800352e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <move_window>:

static FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs,		/* Filesystem object */
	LBA_t sect		/* Sector LBA to make appearance in the fs->win[] */
)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003542:	2300      	movs	r3, #0
 8003544:	73fb      	strb	r3, [r7, #15]


	if (sect != fs->winsect) {	/* Window offset changed? */
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d01b      	beq.n	8003588 <move_window+0x50>
#if !FF_FS_READONLY
		res = sync_window(fs);		/* Flush the window */
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f7ff ffb5 	bl	80034c0 <sync_window>
 8003556:	4603      	mov	r3, r0
 8003558:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800355a:	7bfb      	ldrb	r3, [r7, #15]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d113      	bne.n	8003588 <move_window+0x50>
			if (disk_read(fs->pdrv, fs->win, sect, 1) != RES_OK) {
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	7858      	ldrb	r0, [r3, #1]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800356a:	2301      	movs	r3, #1
 800356c:	683a      	ldr	r2, [r7, #0]
 800356e:	f7ff fcca 	bl	8002f06 <disk_read>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d004      	beq.n	8003582 <move_window+0x4a>
				sect = (LBA_t)0 - 1;	/* Invalidate window if read data is not valid */
 8003578:	f04f 33ff 	mov.w	r3, #4294967295
 800357c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800357e:	2301      	movs	r3, #1
 8003580:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sect;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
	}
	return res;
 8003588:	7bfb      	ldrb	r3, [r7, #15]
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
	...

08003594 <sync_fs>:
/*-----------------------------------------------------------------------*/

static FRESULT sync_fs (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS* fs		/* Filesystem object */
)
{
 8003594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003598:	b08a      	sub	sp, #40	@ 0x28
 800359a:	af00      	add	r7, sp, #0
 800359c:	61f8      	str	r0, [r7, #28]
	FRESULT res;


	res = sync_window(fs);
 800359e:	69f8      	ldr	r0, [r7, #28]
 80035a0:	f7ff ff8e 	bl	80034c0 <sync_window>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (res == FR_OK) {
 80035aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	f040 80c7 	bne.w	8003742 <sync_fs+0x1ae>
		if (fs->fsi_flag == 1) {	/* Allocation changed? */
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	795b      	ldrb	r3, [r3, #5]
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	f040 80b5 	bne.w	8003728 <sync_fs+0x194>
			fs->fsi_flag = 0;
 80035be:	69fa      	ldr	r2, [r7, #28]
 80035c0:	2300      	movs	r3, #0
 80035c2:	7153      	strb	r3, [r2, #5]
			if (fs->fs_type == FS_FAT32) {	/* FAT32: Update FSInfo sector */
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b03      	cmp	r3, #3
 80035ca:	d141      	bne.n	8003650 <sync_fs+0xbc>
				/* Create FSInfo structure */
				memset(fs->win, 0, sizeof fs->win);
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	3350      	adds	r3, #80	@ 0x50
 80035d0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80035d4:	2100      	movs	r1, #0
 80035d6:	4618      	mov	r0, r3
 80035d8:	f004 f9f4 	bl	80079c4 <memset>
				st_dword(fs->win + FSI_LeadSig, 0x41615252);		/* Leading signature */
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	3350      	adds	r3, #80	@ 0x50
 80035e0:	495b      	ldr	r1, [pc, #364]	@ (8003750 <sync_fs+0x1bc>)
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff fe1d 	bl	8003222 <st_dword>
				st_dword(fs->win + FSI_StrucSig, 0x61417272);		/* Structure signature */
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	3350      	adds	r3, #80	@ 0x50
 80035ec:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80035f0:	4958      	ldr	r1, [pc, #352]	@ (8003754 <sync_fs+0x1c0>)
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7ff fe15 	bl	8003222 <st_dword>
				st_dword(fs->win + FSI_Free_Count, fs->free_clst);	/* Number of free clusters */
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	3350      	adds	r3, #80	@ 0x50
 80035fc:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8003600:	69fb      	ldr	r3, [r7, #28]
 8003602:	69db      	ldr	r3, [r3, #28]
 8003604:	4619      	mov	r1, r3
 8003606:	4610      	mov	r0, r2
 8003608:	f7ff fe0b 	bl	8003222 <st_dword>
				st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);	/* Last allocated culuster */
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	3350      	adds	r3, #80	@ 0x50
 8003610:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	699b      	ldr	r3, [r3, #24]
 8003618:	4619      	mov	r1, r3
 800361a:	4610      	mov	r0, r2
 800361c:	f7ff fe01 	bl	8003222 <st_dword>
				st_dword(fs->win + FSI_TrailSig, 0xAA550000);		/* Trailing signature */
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	3350      	adds	r3, #80	@ 0x50
 8003624:	f503 73f9 	add.w	r3, r3, #498	@ 0x1f2
 8003628:	494b      	ldr	r1, [pc, #300]	@ (8003758 <sync_fs+0x1c4>)
 800362a:	4618      	mov	r0, r3
 800362c:	f7ff fdf9 	bl	8003222 <st_dword>
				disk_write(fs->pdrv, fs->win, fs->winsect = fs->volbase + 1, 1);	/* Write it into the FSInfo sector (Next to VBR) */
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	7858      	ldrb	r0, [r3, #1]
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	64da      	str	r2, [r3, #76]	@ 0x4c
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003648:	2301      	movs	r3, #1
 800364a:	f7ff fc79 	bl	8002f40 <disk_write>
 800364e:	e06b      	b.n	8003728 <sync_fs+0x194>
			}
#if FF_FS_EXFAT
			else if (fs->fs_type == FS_EXFAT) {	/* exFAT: Update PercInUse field in BPB */
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b04      	cmp	r3, #4
 8003656:	d167      	bne.n	8003728 <sync_fs+0x194>
				if (disk_read(fs->pdrv, fs->win, fs->winsect = fs->volbase, 1) == RES_OK) {	/* Load VBR */
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	7858      	ldrb	r0, [r3, #1]
 800365c:	69fb      	ldr	r3, [r7, #28]
 800365e:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 8003662:	69fb      	ldr	r3, [r7, #28]
 8003664:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	64da      	str	r2, [r3, #76]	@ 0x4c
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800366e:	2301      	movs	r3, #1
 8003670:	f7ff fc49 	bl	8002f06 <disk_read>
 8003674:	4603      	mov	r3, r0
 8003676:	2b00      	cmp	r3, #0
 8003678:	d156      	bne.n	8003728 <sync_fs+0x194>
					BYTE perc_inuse = (fs->free_clst <= fs->n_fatent - 2) ? (BYTE)((QWORD)(fs->n_fatent - 2 - fs->free_clst) * 100 / (fs->n_fatent - 2)) : 0xFF;	/* Precent in use 0-100 or 0xFF(unknown) */
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	69da      	ldr	r2, [r3, #28]
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003682:	3b02      	subs	r3, #2
 8003684:	429a      	cmp	r2, r3
 8003686:	d836      	bhi.n	80036f6 <sync_fs+0x162>
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	69db      	ldr	r3, [r3, #28]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	3b02      	subs	r3, #2
 8003694:	2200      	movs	r2, #0
 8003696:	4698      	mov	r8, r3
 8003698:	4691      	mov	r9, r2
 800369a:	4642      	mov	r2, r8
 800369c:	464b      	mov	r3, r9
 800369e:	1891      	adds	r1, r2, r2
 80036a0:	6039      	str	r1, [r7, #0]
 80036a2:	415b      	adcs	r3, r3
 80036a4:	607b      	str	r3, [r7, #4]
 80036a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036aa:	eb12 0408 	adds.w	r4, r2, r8
 80036ae:	eb43 0509 	adc.w	r5, r3, r9
 80036b2:	f04f 0200 	mov.w	r2, #0
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	016b      	lsls	r3, r5, #5
 80036bc:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 80036c0:	0162      	lsls	r2, r4, #5
 80036c2:	eb14 0a02 	adds.w	sl, r4, r2
 80036c6:	eb45 0b03 	adc.w	fp, r5, r3
 80036ca:	eb1a 0308 	adds.w	r3, sl, r8
 80036ce:	613b      	str	r3, [r7, #16]
 80036d0:	eb4b 0309 	adc.w	r3, fp, r9
 80036d4:	617b      	str	r3, [r7, #20]
 80036d6:	69fb      	ldr	r3, [r7, #28]
 80036d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036da:	3b02      	subs	r3, #2
 80036dc:	2200      	movs	r2, #0
 80036de:	60bb      	str	r3, [r7, #8]
 80036e0:	60fa      	str	r2, [r7, #12]
 80036e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80036e6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80036ea:	f7fc fd2f 	bl	800014c <__aeabi_uldivmod>
 80036ee:	4602      	mov	r2, r0
 80036f0:	460b      	mov	r3, r1
 80036f2:	b2d3      	uxtb	r3, r2
 80036f4:	e000      	b.n	80036f8 <sync_fs+0x164>
 80036f6:	23ff      	movs	r3, #255	@ 0xff
 80036f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

					if (fs->win[BPB_PercInUseEx] != perc_inuse) {	/* Write it back into VBR if needed */
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	f893 30c0 	ldrb.w	r3, [r3, #192]	@ 0xc0
 8003702:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003706:	429a      	cmp	r2, r3
 8003708:	d00e      	beq.n	8003728 <sync_fs+0x194>
						fs->win[BPB_PercInUseEx] = perc_inuse;
 800370a:	69fb      	ldr	r3, [r7, #28]
 800370c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003710:	f883 20c0 	strb.w	r2, [r3, #192]	@ 0xc0
						disk_write(fs->pdrv, fs->win, fs->winsect, 1);
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	7858      	ldrb	r0, [r3, #1]
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003722:	2301      	movs	r3, #1
 8003724:	f7ff fc0c 	bl	8002f40 <disk_write>
				}
			}
#endif
		}
		/* Make sure that no pending write process in the lower layer */
		if (disk_ioctl(fs->pdrv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	785b      	ldrb	r3, [r3, #1]
 800372c:	2200      	movs	r2, #0
 800372e:	2100      	movs	r1, #0
 8003730:	4618      	mov	r0, r3
 8003732:	f7ff fc22 	bl	8002f7a <disk_ioctl>
 8003736:	4603      	mov	r3, r0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d002      	beq.n	8003742 <sync_fs+0x1ae>
 800373c:	2301      	movs	r3, #1
 800373e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	return res;
 8003742:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003746:	4618      	mov	r0, r3
 8003748:	3728      	adds	r7, #40	@ 0x28
 800374a:	46bd      	mov	sp, r7
 800374c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003750:	41615252 	.word	0x41615252
 8003754:	61417272 	.word	0x61417272
 8003758:	aa550000 	.word	0xaa550000

0800375c <clst2sect>:

static LBA_t clst2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* Filesystem object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800375c:	b480      	push	{r7}
 800375e:	b083      	sub	sp, #12
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	6039      	str	r1, [r7, #0]
	clst -= 2;		/* Cluster number is origin from 2 */
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	3b02      	subs	r3, #2
 800376a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Is it invalid cluster number? */
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003770:	3b02      	subs	r3, #2
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d301      	bcc.n	800377c <clst2sect+0x20>
 8003778:	2300      	movs	r3, #0
 800377a:	e008      	b.n	800378e <clst2sect+0x32>
	return fs->database + (LBA_t)fs->csize * clst;	/* Start sector number of the cluster */
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	895b      	ldrh	r3, [r3, #10]
 8003784:	4619      	mov	r1, r3
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	fb01 f303 	mul.w	r3, r1, r3
 800378c:	4413      	add	r3, r2
}
 800378e:	4618      	mov	r0, r3
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	bc80      	pop	{r7}
 8003796:	4770      	bx	lr

08003798 <get_fat>:

static DWORD get_fat (		/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	FFOBJID* obj,	/* Corresponding object */
	DWORD clst		/* Cluster number to get the value */
)
{
 8003798:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800379c:	b088      	sub	sp, #32
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	61bb      	str	r3, [r7, #24]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	2b01      	cmp	r3, #1
 80037ae:	d904      	bls.n	80037ba <get_fat+0x22>
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	d302      	bcc.n	80037c0 <get_fat+0x28>
		val = 1;	/* Internal error */
 80037ba:	2301      	movs	r3, #1
 80037bc:	61fb      	str	r3, [r7, #28]
 80037be:	e144      	b.n	8003a4a <get_fat+0x2b2>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80037c0:	f04f 33ff 	mov.w	r3, #4294967295
 80037c4:	61fb      	str	r3, [r7, #28]

		switch (fs->fs_type) {
 80037c6:	69bb      	ldr	r3, [r7, #24]
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	2b03      	cmp	r3, #3
 80037ce:	f200 8130 	bhi.w	8003a32 <get_fat+0x29a>
 80037d2:	a201      	add	r2, pc, #4	@ (adr r2, 80037d8 <get_fat+0x40>)
 80037d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d8:	080037e9 	.word	0x080037e9
 80037dc:	08003895 	.word	0x08003895
 80037e0:	080038e1 	.word	0x080038e1
 80037e4:	08003931 	.word	0x08003931
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	085b      	lsrs	r3, r3, #1
 80037f0:	68fa      	ldr	r2, [r7, #12]
 80037f2:	4413      	add	r3, r2
 80037f4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	899b      	ldrh	r3, [r3, #12]
 80037fe:	4619      	mov	r1, r3
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	fbb3 f3f1 	udiv	r3, r3, r1
 8003806:	4413      	add	r3, r2
 8003808:	4619      	mov	r1, r3
 800380a:	69b8      	ldr	r0, [r7, #24]
 800380c:	f7ff fe94 	bl	8003538 <move_window>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	f040 8110 	bne.w	8003a38 <get_fat+0x2a0>
			wc = fs->win[bc++ % SS(fs)];		/* Get 1st byte of the entry */
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	1c5a      	adds	r2, r3, #1
 800381c:	60fa      	str	r2, [r7, #12]
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	8992      	ldrh	r2, [r2, #12]
 8003822:	fbb3 f1f2 	udiv	r1, r3, r2
 8003826:	fb01 f202 	mul.w	r2, r1, r2
 800382a:	1a9b      	subs	r3, r3, r2
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4413      	add	r3, r2
 8003830:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003834:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	899b      	ldrh	r3, [r3, #12]
 800383e:	4619      	mov	r1, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	fbb3 f3f1 	udiv	r3, r3, r1
 8003846:	4413      	add	r3, r2
 8003848:	4619      	mov	r1, r3
 800384a:	69b8      	ldr	r0, [r7, #24]
 800384c:	f7ff fe74 	bl	8003538 <move_window>
 8003850:	4603      	mov	r3, r0
 8003852:	2b00      	cmp	r3, #0
 8003854:	f040 80f2 	bne.w	8003a3c <get_fat+0x2a4>
			wc |= fs->win[bc % SS(fs)] << 8;	/* Merge 2nd byte of the entry */
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	899b      	ldrh	r3, [r3, #12]
 800385c:	461a      	mov	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	fbb3 f1f2 	udiv	r1, r3, r2
 8003864:	fb01 f202 	mul.w	r2, r1, r2
 8003868:	1a9b      	subs	r3, r3, r2
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4413      	add	r3, r2
 800386e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003872:	021b      	lsls	r3, r3, #8
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	4313      	orrs	r3, r2
 8003878:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);	/* Adjust bit position */
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	2b00      	cmp	r3, #0
 8003882:	d002      	beq.n	800388a <get_fat+0xf2>
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	091b      	lsrs	r3, r3, #4
 8003888:	e002      	b.n	8003890 <get_fat+0xf8>
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003890:	61fb      	str	r3, [r7, #28]
			break;
 8003892:	e0da      	b.n	8003a4a <get_fat+0x2b2>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003898:	69bb      	ldr	r3, [r7, #24]
 800389a:	899b      	ldrh	r3, [r3, #12]
 800389c:	085b      	lsrs	r3, r3, #1
 800389e:	b29b      	uxth	r3, r3
 80038a0:	4619      	mov	r1, r3
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	fbb3 f3f1 	udiv	r3, r3, r1
 80038a8:	4413      	add	r3, r2
 80038aa:	4619      	mov	r1, r3
 80038ac:	69b8      	ldr	r0, [r7, #24]
 80038ae:	f7ff fe43 	bl	8003538 <move_window>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f040 80c3 	bne.w	8003a40 <get_fat+0x2a8>
			val = ld_word(fs->win + clst * 2 % SS(fs));		/* Simple WORD array */
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	005b      	lsls	r3, r3, #1
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	8992      	ldrh	r2, [r2, #12]
 80038c8:	fbb3 f0f2 	udiv	r0, r3, r2
 80038cc:	fb00 f202 	mul.w	r2, r0, r2
 80038d0:	1a9b      	subs	r3, r3, r2
 80038d2:	440b      	add	r3, r1
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7ff fb77 	bl	8002fc8 <ld_word>
 80038da:	4603      	mov	r3, r0
 80038dc:	61fb      	str	r3, [r7, #28]
			break;
 80038de:	e0b4      	b.n	8003a4a <get_fat+0x2b2>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	899b      	ldrh	r3, [r3, #12]
 80038e8:	089b      	lsrs	r3, r3, #2
 80038ea:	b29b      	uxth	r3, r3
 80038ec:	4619      	mov	r1, r3
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	fbb3 f3f1 	udiv	r3, r3, r1
 80038f4:	4413      	add	r3, r2
 80038f6:	4619      	mov	r1, r3
 80038f8:	69b8      	ldr	r0, [r7, #24]
 80038fa:	f7ff fe1d 	bl	8003538 <move_window>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	f040 809f 	bne.w	8003a44 <get_fat+0x2ac>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;	/* Simple DWORD array but mask out upper 4 bits */
 8003906:	69bb      	ldr	r3, [r7, #24]
 8003908:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	8992      	ldrh	r2, [r2, #12]
 8003914:	fbb3 f0f2 	udiv	r0, r3, r2
 8003918:	fb00 f202 	mul.w	r2, r0, r2
 800391c:	1a9b      	subs	r3, r3, r2
 800391e:	440b      	add	r3, r1
 8003920:	4618      	mov	r0, r3
 8003922:	f7ff fb69 	bl	8002ff8 <ld_dword>
 8003926:	4603      	mov	r3, r0
 8003928:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800392c:	61fb      	str	r3, [r7, #28]
			break;
 800392e:	e08c      	b.n	8003a4a <get_fat+0x2b2>
#if FF_FS_EXFAT
		case FS_EXFAT :
			if ((obj->objsize != 0 && obj->sclust != 0) || obj->stat == 0) {	/* Object except root dir must have valid data length */
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003936:	4313      	orrs	r3, r2
 8003938:	d003      	beq.n	8003942 <get_fat+0x1aa>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d103      	bne.n	800394a <get_fat+0x1b2>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	79db      	ldrb	r3, [r3, #7]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d170      	bne.n	8003a2c <get_fat+0x294>
				DWORD cofs = clst - obj->sclust;	/* Offset from start cluster */
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	683a      	ldr	r2, [r7, #0]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	617b      	str	r3, [r7, #20]
				DWORD clen = (DWORD)((LBA_t)((obj->objsize - 1) / SS(fs)) / fs->csize);	/* Number of clusters - 1 */
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800395a:	1e54      	subs	r4, r2, #1
 800395c:	f143 35ff 	adc.w	r5, r3, #4294967295
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	899b      	ldrh	r3, [r3, #12]
 8003964:	b29b      	uxth	r3, r3
 8003966:	2200      	movs	r2, #0
 8003968:	4698      	mov	r8, r3
 800396a:	4691      	mov	r9, r2
 800396c:	4642      	mov	r2, r8
 800396e:	464b      	mov	r3, r9
 8003970:	4620      	mov	r0, r4
 8003972:	4629      	mov	r1, r5
 8003974:	f7fc fbea 	bl	800014c <__aeabi_uldivmod>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	69bb      	ldr	r3, [r7, #24]
 800397e:	895b      	ldrh	r3, [r3, #10]
 8003980:	fbb2 f3f3 	udiv	r3, r2, r3
 8003984:	613b      	str	r3, [r7, #16]

				if (obj->stat == 2 && cofs <= clen) {	/* Is it a contiguous chain? */
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	79db      	ldrb	r3, [r3, #7]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d10e      	bne.n	80039ac <get_fat+0x214>
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	429a      	cmp	r2, r3
 8003994:	d80a      	bhi.n	80039ac <get_fat+0x214>
					val = (cofs == clen) ? 0x7FFFFFFF : clst + 1;	/* No data on the FAT, generate the value */
 8003996:	697a      	ldr	r2, [r7, #20]
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	429a      	cmp	r2, r3
 800399c:	d002      	beq.n	80039a4 <get_fat+0x20c>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	3301      	adds	r3, #1
 80039a2:	e001      	b.n	80039a8 <get_fat+0x210>
 80039a4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80039a8:	61fb      	str	r3, [r7, #28]
					break;
 80039aa:	e04e      	b.n	8003a4a <get_fat+0x2b2>
				}
				if (obj->stat == 3 && cofs < obj->n_cont) {	/* Is it in the 1st fragment? */
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	79db      	ldrb	r3, [r3, #7]
 80039b0:	2b03      	cmp	r3, #3
 80039b2:	d108      	bne.n	80039c6 <get_fat+0x22e>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	697a      	ldr	r2, [r7, #20]
 80039ba:	429a      	cmp	r2, r3
 80039bc:	d203      	bcs.n	80039c6 <get_fat+0x22e>
					val = clst + 1; 	/* Generate the value */
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	3301      	adds	r3, #1
 80039c2:	61fb      	str	r3, [r7, #28]
					break;
 80039c4:	e041      	b.n	8003a4a <get_fat+0x2b2>
				}
				if (obj->stat != 2) {	/* Get value from FAT if FAT chain is valid */
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	79db      	ldrb	r3, [r3, #7]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d02e      	beq.n	8003a2c <get_fat+0x294>
					if (obj->n_frag != 0) {	/* Is it on the growing edge? */
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	69db      	ldr	r3, [r3, #28]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <get_fat+0x246>
						val = 0x7FFFFFFF;	/* Generate EOC */
 80039d6:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80039da:	61fb      	str	r3, [r7, #28]
					} else {
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
					}
					break;
 80039dc:	e035      	b.n	8003a4a <get_fat+0x2b2>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80039de:	69bb      	ldr	r3, [r7, #24]
 80039e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80039e2:	69bb      	ldr	r3, [r7, #24]
 80039e4:	899b      	ldrh	r3, [r3, #12]
 80039e6:	089b      	lsrs	r3, r3, #2
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	4619      	mov	r1, r3
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80039f2:	4413      	add	r3, r2
 80039f4:	4619      	mov	r1, r3
 80039f6:	69b8      	ldr	r0, [r7, #24]
 80039f8:	f7ff fd9e 	bl	8003538 <move_window>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d122      	bne.n	8003a48 <get_fat+0x2b0>
						val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x7FFFFFFF;
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	8992      	ldrh	r2, [r2, #12]
 8003a10:	fbb3 f0f2 	udiv	r0, r3, r2
 8003a14:	fb00 f202 	mul.w	r2, r0, r2
 8003a18:	1a9b      	subs	r3, r3, r2
 8003a1a:	440b      	add	r3, r1
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff faeb 	bl	8002ff8 <ld_dword>
 8003a22:	4603      	mov	r3, r0
 8003a24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003a28:	61fb      	str	r3, [r7, #28]
					break;
 8003a2a:	e00e      	b.n	8003a4a <get_fat+0x2b2>
				}
			}
			val = 1;	/* Internal error */
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	61fb      	str	r3, [r7, #28]
			break;
 8003a30:	e00b      	b.n	8003a4a <get_fat+0x2b2>
#endif
		default:
			val = 1;	/* Internal error */
 8003a32:	2301      	movs	r3, #1
 8003a34:	61fb      	str	r3, [r7, #28]
 8003a36:	e008      	b.n	8003a4a <get_fat+0x2b2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003a38:	bf00      	nop
 8003a3a:	e006      	b.n	8003a4a <get_fat+0x2b2>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003a3c:	bf00      	nop
 8003a3e:	e004      	b.n	8003a4a <get_fat+0x2b2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003a40:	bf00      	nop
 8003a42:	e002      	b.n	8003a4a <get_fat+0x2b2>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003a44:	bf00      	nop
 8003a46:	e000      	b.n	8003a4a <get_fat+0x2b2>
						if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003a48:	bf00      	nop
		}
	}

	return val;
 8003a4a:	69fb      	ldr	r3, [r7, #28]
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3720      	adds	r7, #32
 8003a50:	46bd      	mov	sp, r7
 8003a52:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a56:	bf00      	nop

08003a58 <put_fat>:
static FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding filesystem object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003a58:	b590      	push	{r4, r7, lr}
 8003a5a:	b089      	sub	sp, #36	@ 0x24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003a64:	2302      	movs	r3, #2
 8003a66:	77fb      	strb	r3, [r7, #31]


	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	f240 810d 	bls.w	8003c8a <put_fat+0x232>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a74:	68ba      	ldr	r2, [r7, #8]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	f080 8107 	bcs.w	8003c8a <put_fat+0x232>
		switch (fs->fs_type) {
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	f300 8102 	bgt.w	8003c8a <put_fat+0x232>
 8003a86:	2b03      	cmp	r3, #3
 8003a88:	f280 80b3 	bge.w	8003bf2 <put_fat+0x19a>
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d003      	beq.n	8003a98 <put_fat+0x40>
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	f000 8083 	beq.w	8003b9c <put_fat+0x144>
 8003a96:	e0f8      	b.n	8003c8a <put_fat+0x232>
		case FS_FAT12:
			bc = (UINT)clst; bc += bc / 2;	/* bc: byte offset of the entry */
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	61bb      	str	r3, [r7, #24]
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	085b      	lsrs	r3, r3, #1
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	899b      	ldrh	r3, [r3, #12]
 8003aae:	4619      	mov	r1, r3
 8003ab0:	69bb      	ldr	r3, [r7, #24]
 8003ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ab6:	4413      	add	r3, r2
 8003ab8:	4619      	mov	r1, r3
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f7ff fd3c 	bl	8003538 <move_window>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003ac4:	7ffb      	ldrb	r3, [r7, #31]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f040 80d8 	bne.w	8003c7c <put_fat+0x224>
			p = fs->win + bc++ % SS(fs);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	1c5a      	adds	r2, r3, #1
 8003ad6:	61ba      	str	r2, [r7, #24]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	8992      	ldrh	r2, [r2, #12]
 8003adc:	fbb3 f0f2 	udiv	r0, r3, r2
 8003ae0:	fb00 f202 	mul.w	r2, r0, r2
 8003ae4:	1a9b      	subs	r3, r3, r2
 8003ae6:	440b      	add	r3, r1
 8003ae8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;	/* Update 1st byte */
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	f003 0301 	and.w	r3, r3, #1
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d00d      	beq.n	8003b10 <put_fat+0xb8>
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	b25b      	sxtb	r3, r3
 8003afa:	f003 030f 	and.w	r3, r3, #15
 8003afe:	b25a      	sxtb	r2, r3
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	b25b      	sxtb	r3, r3
 8003b04:	011b      	lsls	r3, r3, #4
 8003b06:	b25b      	sxtb	r3, r3
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	b25b      	sxtb	r3, r3
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	e001      	b.n	8003b14 <put_fat+0xbc>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	b2db      	uxtb	r3, r3
 8003b14:	697a      	ldr	r2, [r7, #20]
 8003b16:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	899b      	ldrh	r3, [r3, #12]
 8003b26:	4619      	mov	r1, r3
 8003b28:	69bb      	ldr	r3, [r7, #24]
 8003b2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003b2e:	4413      	add	r3, r2
 8003b30:	4619      	mov	r1, r3
 8003b32:	68f8      	ldr	r0, [r7, #12]
 8003b34:	f7ff fd00 	bl	8003538 <move_window>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003b3c:	7ffb      	ldrb	r3, [r7, #31]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f040 809e 	bne.w	8003c80 <put_fat+0x228>
			p = fs->win + bc % SS(fs);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	899b      	ldrh	r3, [r3, #12]
 8003b4e:	461a      	mov	r2, r3
 8003b50:	69bb      	ldr	r3, [r7, #24]
 8003b52:	fbb3 f0f2 	udiv	r0, r3, r2
 8003b56:	fb00 f202 	mul.w	r2, r0, r2
 8003b5a:	1a9b      	subs	r3, r3, r2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));	/* Update 2nd byte */
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <put_fat+0x11a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	091b      	lsrs	r3, r3, #4
 8003b6e:	b2db      	uxtb	r3, r3
 8003b70:	e00e      	b.n	8003b90 <put_fat+0x138>
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	781b      	ldrb	r3, [r3, #0]
 8003b76:	b25b      	sxtb	r3, r3
 8003b78:	f023 030f 	bic.w	r3, r3, #15
 8003b7c:	b25a      	sxtb	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	0a1b      	lsrs	r3, r3, #8
 8003b82:	b25b      	sxtb	r3, r3
 8003b84:	f003 030f 	and.w	r3, r3, #15
 8003b88:	b25b      	sxtb	r3, r3
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	b25b      	sxtb	r3, r3
 8003b8e:	b2db      	uxtb	r3, r3
 8003b90:	697a      	ldr	r2, [r7, #20]
 8003b92:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2201      	movs	r2, #1
 8003b98:	711a      	strb	r2, [r3, #4]
			break;
 8003b9a:	e076      	b.n	8003c8a <put_fat+0x232>

		case FS_FAT16:
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	899b      	ldrh	r3, [r3, #12]
 8003ba4:	085b      	lsrs	r3, r3, #1
 8003ba6:	b29b      	uxth	r3, r3
 8003ba8:	4619      	mov	r1, r3
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	fbb3 f3f1 	udiv	r3, r3, r1
 8003bb0:	4413      	add	r3, r2
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f7ff fcbf 	bl	8003538 <move_window>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003bbe:	7ffb      	ldrb	r3, [r7, #31]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d15f      	bne.n	8003c84 <put_fat+0x22c>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);	/* Simple WORD array */
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	005b      	lsls	r3, r3, #1
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	8992      	ldrh	r2, [r2, #12]
 8003bd2:	fbb3 f0f2 	udiv	r0, r3, r2
 8003bd6:	fb00 f202 	mul.w	r2, r0, r2
 8003bda:	1a9b      	subs	r3, r3, r2
 8003bdc:	440b      	add	r3, r1
 8003bde:	687a      	ldr	r2, [r7, #4]
 8003be0:	b292      	uxth	r2, r2
 8003be2:	4611      	mov	r1, r2
 8003be4:	4618      	mov	r0, r3
 8003be6:	f7ff fb02 	bl	80031ee <st_word>
			fs->wflag = 1;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2201      	movs	r2, #1
 8003bee:	711a      	strb	r2, [r3, #4]
			break;
 8003bf0:	e04b      	b.n	8003c8a <put_fat+0x232>

		case FS_FAT32:
#if FF_FS_EXFAT
		case FS_EXFAT:
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	899b      	ldrh	r3, [r3, #12]
 8003bfa:	089b      	lsrs	r3, r3, #2
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	4619      	mov	r1, r3
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c06:	4413      	add	r3, r2
 8003c08:	4619      	mov	r1, r3
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f7ff fc94 	bl	8003538 <move_window>
 8003c10:	4603      	mov	r3, r0
 8003c12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003c14:	7ffb      	ldrb	r3, [r7, #31]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d136      	bne.n	8003c88 <put_fat+0x230>
			if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d017      	beq.n	8003c52 <put_fat+0x1fa>
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	8992      	ldrh	r2, [r2, #12]
 8003c36:	fbb3 f0f2 	udiv	r0, r3, r2
 8003c3a:	fb00 f202 	mul.w	r2, r0, r2
 8003c3e:	1a9b      	subs	r3, r3, r2
 8003c40:	440b      	add	r3, r1
 8003c42:	4618      	mov	r0, r3
 8003c44:	f7ff f9d8 	bl	8002ff8 <ld_dword>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003c4e:	4323      	orrs	r3, r4
 8003c50:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	009b      	lsls	r3, r3, #2
 8003c5c:	68fa      	ldr	r2, [r7, #12]
 8003c5e:	8992      	ldrh	r2, [r2, #12]
 8003c60:	fbb3 f0f2 	udiv	r0, r3, r2
 8003c64:	fb00 f202 	mul.w	r2, r0, r2
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	4618      	mov	r0, r3
 8003c70:	f7ff fad7 	bl	8003222 <st_dword>
			fs->wflag = 1;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2201      	movs	r2, #1
 8003c78:	711a      	strb	r2, [r3, #4]
			break;
 8003c7a:	e006      	b.n	8003c8a <put_fat+0x232>
			if (res != FR_OK) break;
 8003c7c:	bf00      	nop
 8003c7e:	e004      	b.n	8003c8a <put_fat+0x232>
			if (res != FR_OK) break;
 8003c80:	bf00      	nop
 8003c82:	e002      	b.n	8003c8a <put_fat+0x232>
			if (res != FR_OK) break;
 8003c84:	bf00      	nop
 8003c86:	e000      	b.n	8003c8a <put_fat+0x232>
			if (res != FR_OK) break;
 8003c88:	bf00      	nop
		}
	}
	return res;
 8003c8a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3724      	adds	r7, #36	@ 0x24
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd90      	pop	{r4, r7, pc}

08003c94 <find_bitmap>:
static DWORD find_bitmap (	/* 0:Not found, 2..:Cluster block found, 0xFFFFFFFF:Disk error */
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to scan from */
	DWORD ncl	/* Number of contiguous clusters to find (1..) */
)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b08a      	sub	sp, #40	@ 0x28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
	BYTE bm, bv;
	UINT i;
	DWORD val, scl, ctr;


	clst -= 2;	/* The first bit in the bitmap corresponds to cluster #2 */
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	3b02      	subs	r3, #2
 8003ca4:	60bb      	str	r3, [r7, #8]
	if (clst >= fs->n_fatent - 2) clst = 0;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003caa:	3b02      	subs	r3, #2
 8003cac:	68ba      	ldr	r2, [r7, #8]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	d301      	bcc.n	8003cb6 <find_bitmap+0x22>
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60bb      	str	r3, [r7, #8]
	scl = val = clst; ctr = 0;
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	61fb      	str	r3, [r7, #28]
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	61bb      	str	r3, [r7, #24]
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	617b      	str	r3, [r7, #20]
	for (;;) {
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003cc6:	69fb      	ldr	r3, [r7, #28]
 8003cc8:	08db      	lsrs	r3, r3, #3
 8003cca:	68f9      	ldr	r1, [r7, #12]
 8003ccc:	8989      	ldrh	r1, [r1, #12]
 8003cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8003cd2:	4413      	add	r3, r2
 8003cd4:	4619      	mov	r1, r3
 8003cd6:	68f8      	ldr	r0, [r7, #12]
 8003cd8:	f7ff fc2e 	bl	8003538 <move_window>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d002      	beq.n	8003ce8 <find_bitmap+0x54>
 8003ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ce6:	e058      	b.n	8003d9a <find_bitmap+0x106>
		i = val / 8 % SS(fs); bm = 1 << (val % 8);
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	08db      	lsrs	r3, r3, #3
 8003cec:	68fa      	ldr	r2, [r7, #12]
 8003cee:	8992      	ldrh	r2, [r2, #12]
 8003cf0:	fbb3 f1f2 	udiv	r1, r3, r2
 8003cf4:	fb01 f202 	mul.w	r2, r1, r2
 8003cf8:	1a9b      	subs	r3, r3, r2
 8003cfa:	623b      	str	r3, [r7, #32]
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	f003 0307 	and.w	r3, r3, #7
 8003d02:	2201      	movs	r2, #1
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		do {
			do {
				bv = fs->win[i] & bm; bm <<= 1;		/* Get bit value */
 8003d0c:	68fa      	ldr	r2, [r7, #12]
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	4413      	add	r3, r2
 8003d12:	3350      	adds	r3, #80	@ 0x50
 8003d14:	781a      	ldrb	r2, [r3, #0]
 8003d16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	74fb      	strb	r3, [r7, #19]
 8003d1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d22:	005b      	lsls	r3, r3, #1
 8003d24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				if (++val >= fs->n_fatent - 2) {	/* Next cluster (with wrap-around) */
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	61fb      	str	r3, [r7, #28]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d32:	3b02      	subs	r3, #2
 8003d34:	69fa      	ldr	r2, [r7, #28]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d307      	bcc.n	8003d4a <find_bitmap+0xb6>
					val = 0; bm = 0; i = SS(fs);
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	899b      	ldrh	r3, [r3, #12]
 8003d48:	623b      	str	r3, [r7, #32]
				}
				if (bv == 0) {	/* Is it a free cluster? */
 8003d4a:	7cfb      	ldrb	r3, [r7, #19]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d109      	bne.n	8003d64 <find_bitmap+0xd0>
					if (++ctr == ncl) return scl + 2;	/* Check if run length is sufficient for required */
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	3301      	adds	r3, #1
 8003d54:	617b      	str	r3, [r7, #20]
 8003d56:	697a      	ldr	r2, [r7, #20]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	429a      	cmp	r2, r3
 8003d5c:	d106      	bne.n	8003d6c <find_bitmap+0xd8>
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	3302      	adds	r3, #2
 8003d62:	e01a      	b.n	8003d9a <find_bitmap+0x106>
				} else {
					scl = val; ctr = 0;		/* Encountered a cluster in-use, restart to scan */
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	61bb      	str	r3, [r7, #24]
 8003d68:	2300      	movs	r3, #0
 8003d6a:	617b      	str	r3, [r7, #20]
				}
				if (val == clst) return 0;	/* All cluster scanned? */
 8003d6c:	69fa      	ldr	r2, [r7, #28]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	429a      	cmp	r2, r3
 8003d72:	d101      	bne.n	8003d78 <find_bitmap+0xe4>
 8003d74:	2300      	movs	r3, #0
 8003d76:	e010      	b.n	8003d9a <find_bitmap+0x106>
			} while (bm != 0);
 8003d78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d1c5      	bne.n	8003d0c <find_bitmap+0x78>
			bm = 1;
 8003d80:	2301      	movs	r3, #1
 8003d82:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		} while (++i < SS(fs));
 8003d86:	6a3b      	ldr	r3, [r7, #32]
 8003d88:	3301      	adds	r3, #1
 8003d8a:	623b      	str	r3, [r7, #32]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	899b      	ldrh	r3, [r3, #12]
 8003d90:	461a      	mov	r2, r3
 8003d92:	6a3b      	ldr	r3, [r7, #32]
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d3b9      	bcc.n	8003d0c <find_bitmap+0x78>
		if (move_window(fs, fs->bitbase + val / 8 / SS(fs)) != FR_OK) return 0xFFFFFFFF;
 8003d98:	e793      	b.n	8003cc2 <find_bitmap+0x2e>
	}
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3728      	adds	r7, #40	@ 0x28
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}

08003da2 <change_bitmap>:
	FATFS* fs,	/* Filesystem object */
	DWORD clst,	/* Cluster number to change from */
	DWORD ncl,	/* Number of clusters to be changed */
	int bv		/* bit value to be set (0 or 1) */
)
{
 8003da2:	b580      	push	{r7, lr}
 8003da4:	b088      	sub	sp, #32
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	60f8      	str	r0, [r7, #12]
 8003daa:	60b9      	str	r1, [r7, #8]
 8003dac:	607a      	str	r2, [r7, #4]
 8003dae:	603b      	str	r3, [r7, #0]
	BYTE bm;
	UINT i;
	LBA_t sect;


	clst -= 2;	/* The first bit corresponds to cluster #2 */
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	3b02      	subs	r3, #2
 8003db4:	60bb      	str	r3, [r7, #8]
	sect = fs->bitbase + clst / 8 / SS(fs);	/* Sector address */
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003dba:	68bb      	ldr	r3, [r7, #8]
 8003dbc:	08db      	lsrs	r3, r3, #3
 8003dbe:	68f9      	ldr	r1, [r7, #12]
 8003dc0:	8989      	ldrh	r1, [r1, #12]
 8003dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003dc6:	4413      	add	r3, r2
 8003dc8:	617b      	str	r3, [r7, #20]
	i = clst / 8 % SS(fs);					/* Byte offset in the sector */
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	08db      	lsrs	r3, r3, #3
 8003dce:	68fa      	ldr	r2, [r7, #12]
 8003dd0:	8992      	ldrh	r2, [r2, #12]
 8003dd2:	fbb3 f1f2 	udiv	r1, r3, r2
 8003dd6:	fb01 f202 	mul.w	r2, r1, r2
 8003dda:	1a9b      	subs	r3, r3, r2
 8003ddc:	61bb      	str	r3, [r7, #24]
	bm = 1 << (clst % 8);					/* Bit mask in the byte */
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	f003 0307 	and.w	r3, r3, #7
 8003de4:	2201      	movs	r2, #1
 8003de6:	fa02 f303 	lsl.w	r3, r2, r3
 8003dea:	77fb      	strb	r3, [r7, #31]
	for (;;) {
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	1c5a      	adds	r2, r3, #1
 8003df0:	617a      	str	r2, [r7, #20]
 8003df2:	4619      	mov	r1, r3
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f7ff fb9f 	bl	8003538 <move_window>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <change_bitmap+0x62>
 8003e00:	2301      	movs	r3, #1
 8003e02:	e03f      	b.n	8003e84 <change_bitmap+0xe2>
		do {
			do {
				if (bv == (int)((fs->win[i] & bm) != 0)) return FR_INT_ERR;	/* Is the bit expected value? */
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	4413      	add	r3, r2
 8003e0a:	3350      	adds	r3, #80	@ 0x50
 8003e0c:	781a      	ldrb	r2, [r3, #0]
 8003e0e:	7ffb      	ldrb	r3, [r7, #31]
 8003e10:	4013      	ands	r3, r2
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	bf14      	ite	ne
 8003e18:	2301      	movne	r3, #1
 8003e1a:	2300      	moveq	r3, #0
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	461a      	mov	r2, r3
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d101      	bne.n	8003e2a <change_bitmap+0x88>
 8003e26:	2302      	movs	r3, #2
 8003e28:	e02c      	b.n	8003e84 <change_bitmap+0xe2>
				fs->win[i] ^= bm;	/* Flip the bit */
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	4413      	add	r3, r2
 8003e30:	3350      	adds	r3, #80	@ 0x50
 8003e32:	781a      	ldrb	r2, [r3, #0]
 8003e34:	7ffb      	ldrb	r3, [r7, #31]
 8003e36:	4053      	eors	r3, r2
 8003e38:	b2d9      	uxtb	r1, r3
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	4413      	add	r3, r2
 8003e40:	3350      	adds	r3, #80	@ 0x50
 8003e42:	460a      	mov	r2, r1
 8003e44:	701a      	strb	r2, [r3, #0]
				fs->wflag = 1;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	711a      	strb	r2, [r3, #4]
				if (--ncl == 0) return FR_OK;	/* All bits processed? */
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	3b01      	subs	r3, #1
 8003e50:	607b      	str	r3, [r7, #4]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d101      	bne.n	8003e5c <change_bitmap+0xba>
 8003e58:	2300      	movs	r3, #0
 8003e5a:	e013      	b.n	8003e84 <change_bitmap+0xe2>
			} while (bm <<= 1);		/* Next bit */
 8003e5c:	7ffb      	ldrb	r3, [r7, #31]
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	77fb      	strb	r3, [r7, #31]
 8003e62:	7ffb      	ldrb	r3, [r7, #31]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d1cd      	bne.n	8003e04 <change_bitmap+0x62>
			bm = 1;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	77fb      	strb	r3, [r7, #31]
		} while (++i < SS(fs));		/* Next byte */
 8003e6c:	69bb      	ldr	r3, [r7, #24]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	61bb      	str	r3, [r7, #24]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	899b      	ldrh	r3, [r3, #12]
 8003e76:	461a      	mov	r2, r3
 8003e78:	69bb      	ldr	r3, [r7, #24]
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d3c2      	bcc.n	8003e04 <change_bitmap+0x62>
		i = 0;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	61bb      	str	r3, [r7, #24]
		if (move_window(fs, sect++) != FR_OK) return FR_DISK_ERR;
 8003e82:	e7b3      	b.n	8003dec <change_bitmap+0x4a>
	}
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3720      	adds	r7, #32
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <fill_first_frag>:
/*---------------------------------------------*/

static FRESULT fill_first_frag (
	FFOBJID* obj	/* Pointer to the corresponding object */
)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD cl, n;


	if (obj->stat == 3) {	/* Has the object been changed 'fragmented' in this session? */
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	79db      	ldrb	r3, [r3, #7]
 8003e98:	2b03      	cmp	r3, #3
 8003e9a:	d121      	bne.n	8003ee0 <fill_first_frag+0x54>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	617b      	str	r3, [r7, #20]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	e014      	b.n	8003ed4 <fill_first_frag+0x48>
			res = put_fat(obj->fs, cl, cl + 1);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6818      	ldr	r0, [r3, #0]
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	3301      	adds	r3, #1
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	6979      	ldr	r1, [r7, #20]
 8003eb6:	f7ff fdcf 	bl	8003a58 <put_fat>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) return res;
 8003ebe:	7bfb      	ldrb	r3, [r7, #15]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <fill_first_frag+0x3c>
 8003ec4:	7bfb      	ldrb	r3, [r7, #15]
 8003ec6:	e00c      	b.n	8003ee2 <fill_first_frag+0x56>
		for (cl = obj->sclust, n = obj->n_cont; n; cl++, n--) {	/* Create cluster chain on the FAT */
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	617b      	str	r3, [r7, #20]
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	613b      	str	r3, [r7, #16]
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1e7      	bne.n	8003eaa <fill_first_frag+0x1e>
		}
		obj->stat = 0;	/* Change status 'FAT chain is valid' */
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	71da      	strb	r2, [r3, #7]
	}
	return FR_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <fill_last_frag>:
static FRESULT fill_last_frag (
	FFOBJID* obj,	/* Pointer to the corresponding object */
	DWORD lcl,		/* Last cluster of the fragment */
	DWORD term		/* Value to set the last FAT entry */
)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b086      	sub	sp, #24
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	60f8      	str	r0, [r7, #12]
 8003ef2:	60b9      	str	r1, [r7, #8]
 8003ef4:	607a      	str	r2, [r7, #4]
	FRESULT res;


	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 8003ef6:	e020      	b.n	8003f3a <fill_last_frag+0x50>
		res = put_fat(obj->fs, lcl - obj->n_frag + 1, (obj->n_frag > 1) ? lcl - obj->n_frag + 2 : term);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	6818      	ldr	r0, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	69db      	ldr	r3, [r3, #28]
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	1c59      	adds	r1, r3, #1
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	69db      	ldr	r3, [r3, #28]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d905      	bls.n	8003f1a <fill_last_frag+0x30>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	3302      	adds	r3, #2
 8003f18:	e000      	b.n	8003f1c <fill_last_frag+0x32>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	f7ff fd9b 	bl	8003a58 <put_fat>
 8003f22:	4603      	mov	r3, r0
 8003f24:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8003f26:	7dfb      	ldrb	r3, [r7, #23]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <fill_last_frag+0x46>
 8003f2c:	7dfb      	ldrb	r3, [r7, #23]
 8003f2e:	e009      	b.n	8003f44 <fill_last_frag+0x5a>
		obj->n_frag--;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	69db      	ldr	r3, [r3, #28]
 8003f34:	1e5a      	subs	r2, r3, #1
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	61da      	str	r2, [r3, #28]
	while (obj->n_frag > 0) {	/* Create the chain of last fragment */
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d1da      	bne.n	8003ef8 <fill_last_frag+0xe>
	}
	return FR_OK;
 8003f42:	2300      	movs	r3, #0
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <remove_chain>:
static FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0 if entire chain) */
)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08a      	sub	sp, #40	@ 0x28
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	61bb      	str	r3, [r7, #24]
#if FF_FS_EXFAT || FF_USE_TRIM
	DWORD scl = clst, ecl = clst;
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	623b      	str	r3, [r7, #32]
#endif
#if FF_USE_TRIM
	LBA_t rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d904      	bls.n	8003f7a <remove_chain+0x2e>
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f74:	68ba      	ldr	r2, [r7, #8]
 8003f76:	429a      	cmp	r2, r3
 8003f78:	d301      	bcc.n	8003f7e <remove_chain+0x32>
 8003f7a:	2302      	movs	r3, #2
 8003f7c:	e0c4      	b.n	8004108 <remove_chain+0x1bc>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst != 0 && (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d014      	beq.n	8003fae <remove_chain+0x62>
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d103      	bne.n	8003f94 <remove_chain+0x48>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	79db      	ldrb	r3, [r3, #7]
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d00c      	beq.n	8003fae <remove_chain+0x62>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003f94:	f04f 32ff 	mov.w	r2, #4294967295
 8003f98:	6879      	ldr	r1, [r7, #4]
 8003f9a:	69b8      	ldr	r0, [r7, #24]
 8003f9c:	f7ff fd5c 	bl	8003a58 <put_fat>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8003fa4:	7ffb      	ldrb	r3, [r7, #31]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <remove_chain+0x62>
 8003faa:	7ffb      	ldrb	r3, [r7, #31]
 8003fac:	e0ac      	b.n	8004108 <remove_chain+0x1bc>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003fae:	68b9      	ldr	r1, [r7, #8]
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f7ff fbf1 	bl	8003798 <get_fat>
 8003fb6:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d055      	beq.n	800406a <remove_chain+0x11e>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d101      	bne.n	8003fc8 <remove_chain+0x7c>
 8003fc4:	2302      	movs	r3, #2
 8003fc6:	e09f      	b.n	8004108 <remove_chain+0x1bc>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fce:	d101      	bne.n	8003fd4 <remove_chain+0x88>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e099      	b.n	8004108 <remove_chain+0x1bc>
		if (!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) {
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b04      	cmp	r3, #4
 8003fda:	d00b      	beq.n	8003ff4 <remove_chain+0xa8>
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003fdc:	2200      	movs	r2, #0
 8003fde:	68b9      	ldr	r1, [r7, #8]
 8003fe0:	69b8      	ldr	r0, [r7, #24]
 8003fe2:	f7ff fd39 	bl	8003a58 <put_fat>
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8003fea:	7ffb      	ldrb	r3, [r7, #31]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d001      	beq.n	8003ff4 <remove_chain+0xa8>
 8003ff0:	7ffb      	ldrb	r3, [r7, #31]
 8003ff2:	e089      	b.n	8004108 <remove_chain+0x1bc>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update allocation information if it is valid */
 8003ff4:	69bb      	ldr	r3, [r7, #24]
 8003ff6:	69da      	ldr	r2, [r3, #28]
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ffc:	3b02      	subs	r3, #2
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d20b      	bcs.n	800401a <remove_chain+0xce>
			fs->free_clst++;
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	69db      	ldr	r3, [r3, #28]
 8004006:	1c5a      	adds	r2, r3, #1
 8004008:	69bb      	ldr	r3, [r7, #24]
 800400a:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	795b      	ldrb	r3, [r3, #5]
 8004010:	f043 0301 	orr.w	r3, r3, #1
 8004014:	b2da      	uxtb	r2, r3
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	715a      	strb	r2, [r3, #5]
		}
#if FF_FS_EXFAT || FF_USE_TRIM
		if (ecl + 1 == nxt) {	/* Is next cluster contiguous? */
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	3301      	adds	r3, #1
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	429a      	cmp	r2, r3
 8004022:	d102      	bne.n	800402a <remove_chain+0xde>
			ecl = nxt;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	623b      	str	r3, [r7, #32]
 8004028:	e017      	b.n	800405a <remove_chain+0x10e>
		} else {				/* End of contiguous cluster block */
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 800402a:	69bb      	ldr	r3, [r7, #24]
 800402c:	781b      	ldrb	r3, [r3, #0]
 800402e:	2b04      	cmp	r3, #4
 8004030:	d10f      	bne.n	8004052 <remove_chain+0x106>
				res = change_bitmap(fs, scl, ecl - scl + 1, 0);	/* Mark the cluster block 'free' on the bitmap */
 8004032:	6a3a      	ldr	r2, [r7, #32]
 8004034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004036:	1ad3      	subs	r3, r2, r3
 8004038:	1c5a      	adds	r2, r3, #1
 800403a:	2300      	movs	r3, #0
 800403c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800403e:	69b8      	ldr	r0, [r7, #24]
 8004040:	f7ff feaf 	bl	8003da2 <change_bitmap>
 8004044:	4603      	mov	r3, r0
 8004046:	77fb      	strb	r3, [r7, #31]
				if (res != FR_OK) return res;
 8004048:	7ffb      	ldrb	r3, [r7, #31]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <remove_chain+0x106>
 800404e:	7ffb      	ldrb	r3, [r7, #31]
 8004050:	e05a      	b.n	8004108 <remove_chain+0x1bc>
#if FF_USE_TRIM
			rt[0] = clst2sect(fs, scl);					/* Start of data area to be freed */
			rt[1] = clst2sect(fs, ecl) + fs->csize - 1;	/* End of data area to be freed */
			disk_ioctl(fs->pdrv, CTRL_TRIM, rt);		/* Inform storage device that the data in the block may be erased */
#endif
			scl = ecl = nxt;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	623b      	str	r3, [r7, #32]
 8004056:	6a3b      	ldr	r3, [r7, #32]
 8004058:	627b      	str	r3, [r7, #36]	@ 0x24
		}
#endif
		clst = nxt;					/* Next cluster */
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat until the last link */
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004062:	68ba      	ldr	r2, [r7, #8]
 8004064:	429a      	cmp	r2, r3
 8004066:	d3a2      	bcc.n	8003fae <remove_chain+0x62>
 8004068:	e000      	b.n	800406c <remove_chain+0x120>
		if (nxt == 0) break;				/* Empty cluster? */
 800406a:	bf00      	nop

#if FF_FS_EXFAT
	/* Some post processes for chain status */
	if (fs->fs_type == FS_EXFAT) {
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b04      	cmp	r3, #4
 8004072:	d148      	bne.n	8004106 <remove_chain+0x1ba>
		if (pclst == 0) {	/* Has the entire chain been removed? */
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d103      	bne.n	8004082 <remove_chain+0x136>
			obj->stat = 0;		/* Change the chain status 'initial' */
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	71da      	strb	r2, [r3, #7]
 8004080:	e041      	b.n	8004106 <remove_chain+0x1ba>
		} else {
			if (obj->stat == 0) {	/* Is it a fragmented chain from the beginning of this session? */
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	79db      	ldrb	r3, [r3, #7]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d129      	bne.n	80040de <remove_chain+0x192>
				clst = obj->sclust;		/* Follow the chain to check if it gets contiguous */
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
 8004090:	e017      	b.n	80040c2 <remove_chain+0x176>
					nxt = get_fat(obj, clst);
 8004092:	68b9      	ldr	r1, [r7, #8]
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f7ff fb7f 	bl	8003798 <get_fat>
 800409a:	6178      	str	r0, [r7, #20]
					if (nxt < 2) return FR_INT_ERR;
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d801      	bhi.n	80040a6 <remove_chain+0x15a>
 80040a2:	2302      	movs	r3, #2
 80040a4:	e030      	b.n	8004108 <remove_chain+0x1bc>
					if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ac:	d101      	bne.n	80040b2 <remove_chain+0x166>
 80040ae:	2301      	movs	r3, #1
 80040b0:	e02a      	b.n	8004108 <remove_chain+0x1bc>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 80040b2:	68bb      	ldr	r3, [r7, #8]
 80040b4:	3301      	adds	r3, #1
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	429a      	cmp	r2, r3
 80040ba:	d107      	bne.n	80040cc <remove_chain+0x180>
					clst++;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	3301      	adds	r3, #1
 80040c0:	60bb      	str	r3, [r7, #8]
				while (clst != pclst) {
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d1e3      	bne.n	8004092 <remove_chain+0x146>
 80040ca:	e000      	b.n	80040ce <remove_chain+0x182>
					if (nxt != clst + 1) break;	/* Not contiguous? */
 80040cc:	bf00      	nop
				}
				if (clst == pclst) {	/* Has the chain got contiguous again? */
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	429a      	cmp	r2, r3
 80040d4:	d117      	bne.n	8004106 <remove_chain+0x1ba>
					obj->stat = 2;		/* Change the chain status 'contiguous' */
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	2202      	movs	r2, #2
 80040da:	71da      	strb	r2, [r3, #7]
 80040dc:	e013      	b.n	8004106 <remove_chain+0x1ba>
				}
			} else {
				if (obj->stat == 3 && pclst >= obj->sclust && pclst <= obj->sclust + obj->n_cont) {	/* Was the chain fragmented in this session and got contiguous again? */
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	79db      	ldrb	r3, [r3, #7]
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	d10f      	bne.n	8004106 <remove_chain+0x1ba>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d30a      	bcc.n	8004106 <remove_chain+0x1ba>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	689a      	ldr	r2, [r3, #8]
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	4413      	add	r3, r2
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d802      	bhi.n	8004106 <remove_chain+0x1ba>
					obj->stat = 2;	/* Change the chain status 'contiguous' */
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2202      	movs	r2, #2
 8004104:	71da      	strb	r2, [r3, #7]
				}
			}
		}
	}
#endif
	return FR_OK;
 8004106:	2300      	movs	r3, #0
}
 8004108:	4618      	mov	r0, r3
 800410a:	3728      	adds	r7, #40	@ 0x28
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}

08004110 <create_chain>:

static DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FFOBJID* obj,		/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b088      	sub	sp, #32
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10d      	bne.n	8004142 <create_chain+0x32>
		scl = fs->last_clst;				/* Suggested cluster to start to find */
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	699b      	ldr	r3, [r3, #24]
 800412a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800412c:	69bb      	ldr	r3, [r7, #24]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d004      	beq.n	800413c <create_chain+0x2c>
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	429a      	cmp	r2, r3
 800413a:	d31b      	bcc.n	8004174 <create_chain+0x64>
 800413c:	2301      	movs	r3, #1
 800413e:	61bb      	str	r3, [r7, #24]
 8004140:	e018      	b.n	8004174 <create_chain+0x64>
	}
	else {				/* Stretch a chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004142:	6839      	ldr	r1, [r7, #0]
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f7ff fb27 	bl	8003798 <get_fat>
 800414a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Test for insanity */
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d801      	bhi.n	8004156 <create_chain+0x46>
 8004152:	2301      	movs	r3, #1
 8004154:	e117      	b.n	8004386 <create_chain+0x276>
		if (cs == 0xFFFFFFFF) return cs;	/* Test for disk error */
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800415c:	d101      	bne.n	8004162 <create_chain+0x52>
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	e111      	b.n	8004386 <create_chain+0x276>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	429a      	cmp	r2, r3
 800416a:	d201      	bcs.n	8004170 <create_chain+0x60>
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	e10a      	b.n	8004386 <create_chain+0x276>
		scl = clst;							/* Cluster to start to find */
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	61bb      	str	r3, [r7, #24]
	}
	if (fs->free_clst == 0) return 0;		/* No free cluster */
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d101      	bne.n	8004180 <create_chain+0x70>
 800417c:	2300      	movs	r3, #0
 800417e:	e102      	b.n	8004386 <create_chain+0x276>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b04      	cmp	r3, #4
 8004186:	d165      	bne.n	8004254 <create_chain+0x144>
		ncl = find_bitmap(fs, scl, 1);				/* Find a free cluster */
 8004188:	2201      	movs	r2, #1
 800418a:	69b9      	ldr	r1, [r7, #24]
 800418c:	6938      	ldr	r0, [r7, #16]
 800418e:	f7ff fd81 	bl	8003c94 <find_bitmap>
 8004192:	61f8      	str	r0, [r7, #28]
		if (ncl == 0 || ncl == 0xFFFFFFFF) return ncl;	/* No free cluster or hard error? */
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <create_chain+0x92>
 800419a:	69fb      	ldr	r3, [r7, #28]
 800419c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a0:	d101      	bne.n	80041a6 <create_chain+0x96>
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	e0ef      	b.n	8004386 <create_chain+0x276>
		res = change_bitmap(fs, ncl, 1, 1);			/* Mark the cluster 'in use' */
 80041a6:	2301      	movs	r3, #1
 80041a8:	2201      	movs	r2, #1
 80041aa:	69f9      	ldr	r1, [r7, #28]
 80041ac:	6938      	ldr	r0, [r7, #16]
 80041ae:	f7ff fdf8 	bl	8003da2 <change_bitmap>
 80041b2:	4603      	mov	r3, r0
 80041b4:	75fb      	strb	r3, [r7, #23]
		if (res == FR_INT_ERR) return 1;
 80041b6:	7dfb      	ldrb	r3, [r7, #23]
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d101      	bne.n	80041c0 <create_chain+0xb0>
 80041bc:	2301      	movs	r3, #1
 80041be:	e0e2      	b.n	8004386 <create_chain+0x276>
		if (res == FR_DISK_ERR) return 0xFFFFFFFF;
 80041c0:	7dfb      	ldrb	r3, [r7, #23]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d102      	bne.n	80041cc <create_chain+0xbc>
 80041c6:	f04f 33ff 	mov.w	r3, #4294967295
 80041ca:	e0dc      	b.n	8004386 <create_chain+0x276>
		if (clst == 0) {							/* Is it a new chain? */
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d103      	bne.n	80041da <create_chain+0xca>
			obj->stat = 2;							/* Set status 'contiguous' */
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2202      	movs	r2, #2
 80041d6:	71da      	strb	r2, [r3, #7]
 80041d8:	e011      	b.n	80041fe <create_chain+0xee>
		} else {									/* It is a stretched chain */
			if (obj->stat == 2 && ncl != scl + 1) {	/* Is the chain got fragmented? */
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	79db      	ldrb	r3, [r3, #7]
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d10d      	bne.n	80041fe <create_chain+0xee>
 80041e2:	69bb      	ldr	r3, [r7, #24]
 80041e4:	3301      	adds	r3, #1
 80041e6:	69fa      	ldr	r2, [r7, #28]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d008      	beq.n	80041fe <create_chain+0xee>
				obj->n_cont = scl - obj->sclust;	/* Set size of the contiguous part */
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	1ad2      	subs	r2, r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	619a      	str	r2, [r3, #24]
				obj->stat = 3;						/* Change status 'just fragmented' */
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2203      	movs	r2, #3
 80041fc:	71da      	strb	r2, [r3, #7]
			}
		}
		if (obj->stat != 2) {	/* Is the file non-contiguous? */
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	79db      	ldrb	r3, [r3, #7]
 8004202:	2b02      	cmp	r3, #2
 8004204:	f000 8098 	beq.w	8004338 <create_chain+0x228>
			if (ncl == clst + 1) {	/* Is the cluster next to previous one? */
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	3301      	adds	r3, #1
 800420c:	69fa      	ldr	r2, [r7, #28]
 800420e:	429a      	cmp	r2, r3
 8004210:	d10b      	bne.n	800422a <create_chain+0x11a>
				obj->n_frag = obj->n_frag ? obj->n_frag + 1 : 2;	/* Increment size of last framgent */
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d003      	beq.n	8004222 <create_chain+0x112>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	3301      	adds	r3, #1
 8004220:	e000      	b.n	8004224 <create_chain+0x114>
 8004222:	2302      	movs	r3, #2
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	61d3      	str	r3, [r2, #28]
 8004228:	e086      	b.n	8004338 <create_chain+0x228>
			} else {				/* New fragment */
				if (obj->n_frag == 0) obj->n_frag = 1;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d102      	bne.n	8004238 <create_chain+0x128>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2201      	movs	r2, #1
 8004236:	61da      	str	r2, [r3, #28]
				res = fill_last_frag(obj, clst, ncl);	/* Fill last fragment on the FAT and link it to new one */
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	6839      	ldr	r1, [r7, #0]
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f7ff fe54 	bl	8003eea <fill_last_frag>
 8004242:	4603      	mov	r3, r0
 8004244:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) obj->n_frag = 1;
 8004246:	7dfb      	ldrb	r3, [r7, #23]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d175      	bne.n	8004338 <create_chain+0x228>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	61da      	str	r2, [r3, #28]
 8004252:	e071      	b.n	8004338 <create_chain+0x228>
			}
		}
	} else
#endif
	{	/* On the FAT/FAT32 volume */
		ncl = 0;
 8004254:	2300      	movs	r3, #0
 8004256:	61fb      	str	r3, [r7, #28]
		if (scl == clst) {						/* Stretching an existing chain? */
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	429a      	cmp	r2, r3
 800425e:	d129      	bne.n	80042b4 <create_chain+0x1a4>
			ncl = scl + 1;						/* Test if next cluster is free */
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	3301      	adds	r3, #1
 8004264:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) ncl = 2;
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800426a:	69fa      	ldr	r2, [r7, #28]
 800426c:	429a      	cmp	r2, r3
 800426e:	d301      	bcc.n	8004274 <create_chain+0x164>
 8004270:	2302      	movs	r3, #2
 8004272:	61fb      	str	r3, [r7, #28]
			cs = get_fat(obj, ncl);				/* Get next cluster status */
 8004274:	69f9      	ldr	r1, [r7, #28]
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7ff fa8e 	bl	8003798 <get_fat>
 800427c:	60f8      	str	r0, [r7, #12]
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d003      	beq.n	800428c <create_chain+0x17c>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428a:	d101      	bne.n	8004290 <create_chain+0x180>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	e07a      	b.n	8004386 <create_chain+0x276>
			if (cs != 0) {						/* Not free? */
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00e      	beq.n	80042b4 <create_chain+0x1a4>
				cs = fs->last_clst;				/* Start at suggested cluster if it is valid */
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	699b      	ldr	r3, [r3, #24]
 800429a:	60fb      	str	r3, [r7, #12]
				if (cs >= 2 && cs < fs->n_fatent) scl = cs;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d906      	bls.n	80042b0 <create_chain+0x1a0>
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d201      	bcs.n	80042b0 <create_chain+0x1a0>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	61bb      	str	r3, [r7, #24]
				ncl = 0;
 80042b0:	2300      	movs	r3, #0
 80042b2:	61fb      	str	r3, [r7, #28]
			}
		}
		if (ncl == 0) {	/* The new cluster cannot be contiguous and find another fragment */
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d129      	bne.n	800430e <create_chain+0x1fe>
			ncl = scl;	/* Start cluster */
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	61fb      	str	r3, [r7, #28]
			for (;;) {
				ncl++;							/* Next cluster */
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	3301      	adds	r3, #1
 80042c2:	61fb      	str	r3, [r7, #28]
				if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c8:	69fa      	ldr	r2, [r7, #28]
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d307      	bcc.n	80042de <create_chain+0x1ce>
					ncl = 2;
 80042ce:	2302      	movs	r3, #2
 80042d0:	61fb      	str	r3, [r7, #28]
					if (ncl > scl) return 0;	/* No free cluster found? */
 80042d2:	69fa      	ldr	r2, [r7, #28]
 80042d4:	69bb      	ldr	r3, [r7, #24]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d901      	bls.n	80042de <create_chain+0x1ce>
 80042da:	2300      	movs	r3, #0
 80042dc:	e053      	b.n	8004386 <create_chain+0x276>
				}
				cs = get_fat(obj, ncl);			/* Get the cluster status */
 80042de:	69f9      	ldr	r1, [r7, #28]
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	f7ff fa59 	bl	8003798 <get_fat>
 80042e6:	60f8      	str	r0, [r7, #12]
				if (cs == 0) break;				/* Found a free cluster? */
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00e      	beq.n	800430c <create_chain+0x1fc>
				if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* Test for error */
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d003      	beq.n	80042fc <create_chain+0x1ec>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fa:	d101      	bne.n	8004300 <create_chain+0x1f0>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	e042      	b.n	8004386 <create_chain+0x276>
				if (ncl == scl) return 0;		/* No free cluster found? */
 8004300:	69fa      	ldr	r2, [r7, #28]
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	429a      	cmp	r2, r3
 8004306:	d1da      	bne.n	80042be <create_chain+0x1ae>
 8004308:	2300      	movs	r3, #0
 800430a:	e03c      	b.n	8004386 <create_chain+0x276>
				if (cs == 0) break;				/* Found a free cluster? */
 800430c:	bf00      	nop
			}
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);		/* Mark the new cluster 'EOC' */
 800430e:	f04f 32ff 	mov.w	r2, #4294967295
 8004312:	69f9      	ldr	r1, [r7, #28]
 8004314:	6938      	ldr	r0, [r7, #16]
 8004316:	f7ff fb9f 	bl	8003a58 <put_fat>
 800431a:	4603      	mov	r3, r0
 800431c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800431e:	7dfb      	ldrb	r3, [r7, #23]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d109      	bne.n	8004338 <create_chain+0x228>
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d006      	beq.n	8004338 <create_chain+0x228>
			res = put_fat(fs, clst, ncl);		/* Link it from the previous one if needed */
 800432a:	69fa      	ldr	r2, [r7, #28]
 800432c:	6839      	ldr	r1, [r7, #0]
 800432e:	6938      	ldr	r0, [r7, #16]
 8004330:	f7ff fb92 	bl	8003a58 <put_fat>
 8004334:	4603      	mov	r3, r0
 8004336:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update allocation information if the function succeeded */
 8004338:	7dfb      	ldrb	r3, [r7, #23]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d11a      	bne.n	8004374 <create_chain+0x264>
		fs->last_clst = ncl;
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	69fa      	ldr	r2, [r7, #28]
 8004342:	619a      	str	r2, [r3, #24]
		if (fs->free_clst > 0 && fs->free_clst <= fs->n_fatent - 2) {
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d01b      	beq.n	8004384 <create_chain+0x274>
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	69da      	ldr	r2, [r3, #28]
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004354:	3b02      	subs	r3, #2
 8004356:	429a      	cmp	r2, r3
 8004358:	d814      	bhi.n	8004384 <create_chain+0x274>
			fs->free_clst--;
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	1e5a      	subs	r2, r3, #1
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	61da      	str	r2, [r3, #28]
			fs->fsi_flag |= 1;
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	795b      	ldrb	r3, [r3, #5]
 8004368:	f043 0301 	orr.w	r3, r3, #1
 800436c:	b2da      	uxtb	r2, r3
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	715a      	strb	r2, [r3, #5]
 8004372:	e007      	b.n	8004384 <create_chain+0x274>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004374:	7dfb      	ldrb	r3, [r7, #23]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d102      	bne.n	8004380 <create_chain+0x270>
 800437a:	f04f 33ff 	mov.w	r3, #4294967295
 800437e:	e000      	b.n	8004382 <create_chain+0x272>
 8004380:	2301      	movs	r3, #1
 8004382:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004384:	69fb      	ldr	r3, [r7, #28]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3720      	adds	r7, #32
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}

0800438e <dir_clear>:
#if !FF_FS_READONLY
static FRESULT dir_clear (	/* Returns FR_OK or FR_DISK_ERR */
	FATFS *fs,		/* Filesystem object */
	DWORD clst		/* Directory table to clear */
)
{
 800438e:	b580      	push	{r7, lr}
 8004390:	b086      	sub	sp, #24
 8004392:	af00      	add	r7, sp, #0
 8004394:	6078      	str	r0, [r7, #4]
 8004396:	6039      	str	r1, [r7, #0]
	LBA_t sect;
	UINT n, szb;
	BYTE *ibuf;


	if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f7ff f891 	bl	80034c0 <sync_window>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d001      	beq.n	80043a8 <dir_clear+0x1a>
 80043a4:	2301      	movs	r3, #1
 80043a6:	e036      	b.n	8004416 <dir_clear+0x88>
	sect = clst2sect(fs, clst);		/* Top of the cluster */
 80043a8:	6839      	ldr	r1, [r7, #0]
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7ff f9d6 	bl	800375c <clst2sect>
 80043b0:	6138      	str	r0, [r7, #16]
	fs->winsect = sect;				/* Set window to top of the cluster */
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	64da      	str	r2, [r3, #76]	@ 0x4c
	memset(fs->win, 0, sizeof fs->win);	/* Clear window buffer */
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	3350      	adds	r3, #80	@ 0x50
 80043bc:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80043c0:	2100      	movs	r1, #0
 80043c2:	4618      	mov	r0, r3
 80043c4:	f003 fafe 	bl	80079c4 <memset>
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
		ff_memfree(ibuf);
	} else
#endif
	{
		ibuf = fs->win; szb = 1;	/* Use window buffer (many single-sector writes may take a time) */
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	3350      	adds	r3, #80	@ 0x50
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	2301      	movs	r3, #1
 80043d0:	60bb      	str	r3, [r7, #8]
		for (n = 0; n < fs->csize && disk_write(fs->pdrv, ibuf, sect + n, szb) == RES_OK; n += szb) ;	/* Fill the cluster with 0 */
 80043d2:	2300      	movs	r3, #0
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	e003      	b.n	80043e0 <dir_clear+0x52>
 80043d8:	697a      	ldr	r2, [r7, #20]
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	4413      	add	r3, r2
 80043de:	617b      	str	r3, [r7, #20]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	895b      	ldrh	r3, [r3, #10]
 80043e4:	461a      	mov	r2, r3
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d20b      	bcs.n	8004404 <dir_clear+0x76>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	7858      	ldrb	r0, [r3, #1]
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	441a      	add	r2, r3
 80043f6:	68bb      	ldr	r3, [r7, #8]
 80043f8:	68f9      	ldr	r1, [r7, #12]
 80043fa:	f7fe fda1 	bl	8002f40 <disk_write>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0e9      	beq.n	80043d8 <dir_clear+0x4a>
	}
	return (n == fs->csize) ? FR_OK : FR_DISK_ERR;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	895b      	ldrh	r3, [r3, #10]
 8004408:	461a      	mov	r2, r3
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	4293      	cmp	r3, r2
 800440e:	bf14      	ite	ne
 8004410:	2301      	movne	r3, #1
 8004412:	2300      	moveq	r3, #0
 8004414:	b2db      	uxtb	r3, r3
}
 8004416:	4618      	mov	r0, r3
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}

0800441e <dir_sdi>:

static FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800441e:	b580      	push	{r7, lr}
 8004420:	b086      	sub	sp, #24
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
 8004426:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	2b04      	cmp	r3, #4
 8004434:	d102      	bne.n	800443c <dir_sdi+0x1e>
 8004436:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800443a:	e001      	b.n	8004440 <dir_sdi+0x22>
 800443c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d904      	bls.n	8004450 <dir_sdi+0x32>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	f003 031f 	and.w	r3, r3, #31
 800444c:	2b00      	cmp	r3, #0
 800444e:	d001      	beq.n	8004454 <dir_sdi+0x36>
		return FR_INT_ERR;
 8004450:	2302      	movs	r3, #2
 8004452:	e074      	b.n	800453e <dir_sdi+0x120>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	631a      	str	r2, [r3, #48]	@ 0x30
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d109      	bne.n	800447a <dir_sdi+0x5c>
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b02      	cmp	r3, #2
 800446c:	d905      	bls.n	800447a <dir_sdi+0x5c>
		clst = (DWORD)fs->dirbase;
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004472:	617b      	str	r3, [r7, #20]
		if (FF_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	71da      	strb	r2, [r3, #7]
	}

	if (clst == 0) {	/* Static table (root-directory on the FAT volume) */
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d10c      	bne.n	800449a <dir_sdi+0x7c>
		if (ofs / SZDIRE >= fs->n_rootdir) return FR_INT_ERR;	/* Is index out of range? */
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	095b      	lsrs	r3, r3, #5
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	8912      	ldrh	r2, [r2, #8]
 8004488:	4293      	cmp	r3, r2
 800448a:	d301      	bcc.n	8004490 <dir_sdi+0x72>
 800448c:	2302      	movs	r3, #2
 800448e:	e056      	b.n	800453e <dir_sdi+0x120>
		dp->sect = fs->dirbase;
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	639a      	str	r2, [r3, #56]	@ 0x38
 8004498:	e02d      	b.n	80044f6 <dir_sdi+0xd8>

	} else {			/* Dynamic table (sub-directory or root-directory on the FAT32/exFAT volume) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	895b      	ldrh	r3, [r3, #10]
 800449e:	461a      	mov	r2, r3
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	899b      	ldrh	r3, [r3, #12]
 80044a4:	fb02 f303 	mul.w	r3, r2, r3
 80044a8:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80044aa:	e019      	b.n	80044e0 <dir_sdi+0xc2>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6979      	ldr	r1, [r7, #20]
 80044b0:	4618      	mov	r0, r3
 80044b2:	f7ff f971 	bl	8003798 <get_fat>
 80044b6:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044be:	d101      	bne.n	80044c4 <dir_sdi+0xa6>
 80044c0:	2301      	movs	r3, #1
 80044c2:	e03c      	b.n	800453e <dir_sdi+0x120>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d904      	bls.n	80044d4 <dir_sdi+0xb6>
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d301      	bcc.n	80044d8 <dir_sdi+0xba>
 80044d4:	2302      	movs	r3, #2
 80044d6:	e032      	b.n	800453e <dir_sdi+0x120>
			ofs -= csz;
 80044d8:	683a      	ldr	r2, [r7, #0]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d2e1      	bcs.n	80044ac <dir_sdi+0x8e>
		}
		dp->sect = clst2sect(fs, clst);
 80044e8:	6979      	ldr	r1, [r7, #20]
 80044ea:	6938      	ldr	r0, [r7, #16]
 80044ec:	f7ff f936 	bl	800375c <clst2sect>
 80044f0:	4602      	mov	r2, r0
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	639a      	str	r2, [r3, #56]	@ 0x38
	}
	dp->clust = clst;					/* Current cluster# */
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	697a      	ldr	r2, [r7, #20]
 80044fa:	635a      	str	r2, [r3, #52]	@ 0x34
	if (dp->sect == 0) return FR_INT_ERR;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004500:	2b00      	cmp	r3, #0
 8004502:	d101      	bne.n	8004508 <dir_sdi+0xea>
 8004504:	2302      	movs	r3, #2
 8004506:	e01a      	b.n	800453e <dir_sdi+0x120>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	899b      	ldrh	r3, [r3, #12]
 8004510:	4619      	mov	r1, r3
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	fbb3 f3f1 	udiv	r3, r3, r1
 8004518:	441a      	add	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	639a      	str	r2, [r3, #56]	@ 0x38
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	899b      	ldrh	r3, [r3, #12]
 8004528:	461a      	mov	r2, r3
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004530:	fb00 f202 	mul.w	r2, r0, r2
 8004534:	1a9b      	subs	r3, r3, r2
 8004536:	18ca      	adds	r2, r1, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <dir_next>:

static FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,				/* Pointer to the directory object */
	int stretch				/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b086      	sub	sp, #24
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	613b      	str	r3, [r7, #16]


	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800455a:	3320      	adds	r3, #32
 800455c:	60fb      	str	r3, [r7, #12]
	if (ofs >= (DWORD)((FF_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) dp->sect = 0;	/* Disable it if the offset reached the max value */
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	2b04      	cmp	r3, #4
 8004564:	d102      	bne.n	800456c <dir_next+0x26>
 8004566:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800456a:	e001      	b.n	8004570 <dir_next+0x2a>
 800456c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	429a      	cmp	r2, r3
 8004574:	d802      	bhi.n	800457c <dir_next+0x36>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	639a      	str	r2, [r3, #56]	@ 0x38
	if (dp->sect == 0) return FR_NO_FILE;	/* Report EOT if it has been disabled */
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004580:	2b00      	cmp	r3, #0
 8004582:	d101      	bne.n	8004588 <dir_next+0x42>
 8004584:	2304      	movs	r3, #4
 8004586:	e08f      	b.n	80046a8 <dir_next+0x162>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	899b      	ldrh	r3, [r3, #12]
 800458c:	461a      	mov	r2, r3
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	fbb3 f1f2 	udiv	r1, r3, r2
 8004594:	fb01 f202 	mul.w	r2, r1, r2
 8004598:	1a9b      	subs	r3, r3, r2
 800459a:	2b00      	cmp	r3, #0
 800459c:	d171      	bne.n	8004682 <dir_next+0x13c>
		dp->sect++;				/* Next sector */
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	639a      	str	r2, [r3, #56]	@ 0x38

		if (dp->clust == 0) {	/* Static table */
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10a      	bne.n	80045c6 <dir_next+0x80>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	095b      	lsrs	r3, r3, #5
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	8912      	ldrh	r2, [r2, #8]
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d362      	bcc.n	8004682 <dir_next+0x13c>
				dp->sect = 0; return FR_NO_FILE;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80045c2:	2304      	movs	r3, #4
 80045c4:	e070      	b.n	80046a8 <dir_next+0x162>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {	/* Cluster changed? */
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	899b      	ldrh	r3, [r3, #12]
 80045ca:	461a      	mov	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80045d2:	693a      	ldr	r2, [r7, #16]
 80045d4:	8952      	ldrh	r2, [r2, #10]
 80045d6:	3a01      	subs	r2, #1
 80045d8:	4013      	ands	r3, r2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d151      	bne.n	8004682 <dir_next+0x13c>
				clst = get_fat(&dp->obj, dp->clust);		/* Get next cluster */
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80045e4:	4619      	mov	r1, r3
 80045e6:	4610      	mov	r0, r2
 80045e8:	f7ff f8d6 	bl	8003798 <get_fat>
 80045ec:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;			/* Internal error */
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d801      	bhi.n	80045f8 <dir_next+0xb2>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e057      	b.n	80046a8 <dir_next+0x162>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045fe:	d101      	bne.n	8004604 <dir_next+0xbe>
 8004600:	2301      	movs	r3, #1
 8004602:	e051      	b.n	80046a8 <dir_next+0x162>
				if (clst >= fs->n_fatent) {					/* It reached end of dynamic table */
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	429a      	cmp	r2, r3
 800460c:	d32f      	bcc.n	800466e <dir_next+0x128>
#if !FF_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d104      	bne.n	800461e <dir_next+0xd8>
						dp->sect = 0; return FR_NO_FILE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	639a      	str	r2, [r3, #56]	@ 0x38
 800461a:	2304      	movs	r3, #4
 800461c:	e044      	b.n	80046a8 <dir_next+0x162>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004624:	4619      	mov	r1, r3
 8004626:	4610      	mov	r0, r2
 8004628:	f7ff fd72 	bl	8004110 <create_chain>
 800462c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <dir_next+0xf2>
 8004634:	2307      	movs	r3, #7
 8004636:	e037      	b.n	80046a8 <dir_next+0x162>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d101      	bne.n	8004642 <dir_next+0xfc>
 800463e:	2302      	movs	r3, #2
 8004640:	e032      	b.n	80046a8 <dir_next+0x162>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004648:	d101      	bne.n	800464e <dir_next+0x108>
 800464a:	2301      	movs	r3, #1
 800464c:	e02c      	b.n	80046a8 <dir_next+0x162>
					if (dir_clear(fs, clst) != FR_OK) return FR_DISK_ERR;	/* Clean up the stretched table */
 800464e:	6979      	ldr	r1, [r7, #20]
 8004650:	6938      	ldr	r0, [r7, #16]
 8004652:	f7ff fe9c 	bl	800438e <dir_clear>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <dir_next+0x11a>
 800465c:	2301      	movs	r3, #1
 800465e:	e023      	b.n	80046a8 <dir_next+0x162>
					if (FF_FS_EXFAT) dp->obj.stat |= 4;			/* exFAT: The directory has been stretched */
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	79db      	ldrb	r3, [r3, #7]
 8004664:	f043 0304 	orr.w	r3, r3, #4
 8004668:	b2da      	uxtb	r2, r3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	71da      	strb	r2, [r3, #7]
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	635a      	str	r2, [r3, #52]	@ 0x34
				dp->sect = clst2sect(fs, clst);
 8004674:	6979      	ldr	r1, [r7, #20]
 8004676:	6938      	ldr	r0, [r7, #16]
 8004678:	f7ff f870 	bl	800375c <clst2sect>
 800467c:	4602      	mov	r2, r0
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	639a      	str	r2, [r3, #56]	@ 0x38
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	631a      	str	r2, [r3, #48]	@ 0x30
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	899b      	ldrh	r3, [r3, #12]
 8004692:	461a      	mov	r2, r3
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	fbb3 f0f2 	udiv	r0, r3, r2
 800469a:	fb00 f202 	mul.w	r2, r0, r2
 800469e:	1a9b      	subs	r3, r3, r2
 80046a0:	18ca      	adds	r2, r1, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	63da      	str	r2, [r3, #60]	@ 0x3c

	return FR_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3718      	adds	r7, #24
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <dir_alloc>:

static FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,				/* Pointer to the directory object */
	UINT n_ent				/* Number of contiguous entries to allocate */
)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80046c0:	2100      	movs	r1, #0
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7ff feab 	bl	800441e <dir_sdi>
 80046c8:	4603      	mov	r3, r0
 80046ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80046cc:	7dfb      	ldrb	r3, [r7, #23]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d140      	bne.n	8004754 <dir_alloc+0xa4>
		n = 0;
 80046d2:	2300      	movs	r3, #0
 80046d4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046da:	4619      	mov	r1, r3
 80046dc:	68f8      	ldr	r0, [r7, #12]
 80046de:	f7fe ff2b 	bl	8003538 <move_window>
 80046e2:	4603      	mov	r3, r0
 80046e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80046e6:	7dfb      	ldrb	r3, [r7, #23]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d132      	bne.n	8004752 <dir_alloc+0xa2>
#if FF_FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {	/* Is the entry free? */
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b04      	cmp	r3, #4
 80046f2:	d108      	bne.n	8004706 <dir_alloc+0x56>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	b25b      	sxtb	r3, r3
 80046fc:	43db      	mvns	r3, r3
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	09db      	lsrs	r3, r3, #7
 8004702:	b2db      	uxtb	r3, r3
 8004704:	e00f      	b.n	8004726 <dir_alloc+0x76>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	2be5      	cmp	r3, #229	@ 0xe5
 800470e:	d004      	beq.n	800471a <dir_alloc+0x6a>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d101      	bne.n	800471e <dir_alloc+0x6e>
 800471a:	2301      	movs	r3, #1
 800471c:	e000      	b.n	8004720 <dir_alloc+0x70>
 800471e:	2300      	movs	r3, #0
 8004720:	f003 0301 	and.w	r3, r3, #1
 8004724:	b2db      	uxtb	r3, r3
 8004726:	2b00      	cmp	r3, #0
 8004728:	d007      	beq.n	800473a <dir_alloc+0x8a>
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {	/* Is the entry free? */
#endif
				if (++n == n_ent) break;	/* Is a block of contiguous free entries found? */
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	3301      	adds	r3, #1
 800472e:	613b      	str	r3, [r7, #16]
 8004730:	693a      	ldr	r2, [r7, #16]
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	429a      	cmp	r2, r3
 8004736:	d102      	bne.n	800473e <dir_alloc+0x8e>
 8004738:	e00c      	b.n	8004754 <dir_alloc+0xa4>
			} else {
				n = 0;				/* Not a free entry, restart to search */
 800473a:	2300      	movs	r3, #0
 800473c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);	/* Next entry with table stretch enabled */
 800473e:	2101      	movs	r1, #1
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7ff ff00 	bl	8004546 <dir_next>
 8004746:	4603      	mov	r3, r0
 8004748:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);
 800474a:	7dfb      	ldrb	r3, [r7, #23]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d0c2      	beq.n	80046d6 <dir_alloc+0x26>
 8004750:	e000      	b.n	8004754 <dir_alloc+0xa4>
			if (res != FR_OK) break;
 8004752:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004754:	7dfb      	ldrb	r3, [r7, #23]
 8004756:	2b04      	cmp	r3, #4
 8004758:	d101      	bne.n	800475e <dir_alloc+0xae>
 800475a:	2307      	movs	r3, #7
 800475c:	75fb      	strb	r3, [r7, #23]
	return res;
 800475e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3718      	adds	r7, #24
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <ld_clust>:

static DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,			/* Pointer to the fs object */
	const BYTE* dir		/* Pointer to the key entry */
)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b084      	sub	sp, #16
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	331a      	adds	r3, #26
 8004776:	4618      	mov	r0, r3
 8004778:	f7fe fc26 	bl	8002fc8 <ld_word>
 800477c:	4603      	mov	r3, r0
 800477e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b03      	cmp	r3, #3
 8004786:	d109      	bne.n	800479c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	3314      	adds	r3, #20
 800478c:	4618      	mov	r0, r3
 800478e:	f7fe fc1b 	bl	8002fc8 <ld_word>
 8004792:	4603      	mov	r3, r0
 8004794:	041b      	lsls	r3, r3, #16
 8004796:	68fa      	ldr	r2, [r7, #12]
 8004798:	4313      	orrs	r3, r2
 800479a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800479c:	68fb      	ldr	r3, [r7, #12]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}

080047a6 <st_clust>:
static void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80047a6:	b580      	push	{r7, lr}
 80047a8:	b084      	sub	sp, #16
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	60f8      	str	r0, [r7, #12]
 80047ae:	60b9      	str	r1, [r7, #8]
 80047b0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	331a      	adds	r3, #26
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	b292      	uxth	r2, r2
 80047ba:	4611      	mov	r1, r2
 80047bc:	4618      	mov	r0, r3
 80047be:	f7fe fd16 	bl	80031ee <st_word>
	if (fs->fs_type == FS_FAT32) {
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2b03      	cmp	r3, #3
 80047c8:	d109      	bne.n	80047de <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	f103 0214 	add.w	r2, r3, #20
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	0c1b      	lsrs	r3, r3, #16
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	4619      	mov	r1, r3
 80047d8:	4610      	mov	r0, r2
 80047da:	f7fe fd08 	bl	80031ee <st_word>
	}
}
 80047de:	bf00      	nop
 80047e0:	3710      	adds	r7, #16
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
	...

080047e8 <cmp_lfn>:

static int cmp_lfn (		/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN to be compared */
	BYTE* dir				/* Pointer to the LFN entry */
)
{
 80047e8:	b590      	push	{r4, r7, lr}
 80047ea:	b087      	sub	sp, #28
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
	UINT ni, di;
	WCHAR pchr, chr;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check if LDIR_FstClusLO is 0 */
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	331a      	adds	r3, #26
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7fe fbe6 	bl	8002fc8 <ld_word>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d001      	beq.n	8004806 <cmp_lfn+0x1e>
 8004802:	2300      	movs	r3, #0
 8004804:	e059      	b.n	80048ba <cmp_lfn+0xd2>

	ni = (UINT)((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the name to be compared */
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800480e:	3b01      	subs	r3, #1
 8004810:	461a      	mov	r2, r3
 8004812:	4613      	mov	r3, r2
 8004814:	005b      	lsls	r3, r3, #1
 8004816:	4413      	add	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	617b      	str	r3, [r7, #20]

	for (pchr = 1, di = 0; di < 13; di++) {	/* Process all characters in the entry */
 800481e:	2301      	movs	r3, #1
 8004820:	81fb      	strh	r3, [r7, #14]
 8004822:	2300      	movs	r3, #0
 8004824:	613b      	str	r3, [r7, #16]
 8004826:	e032      	b.n	800488e <cmp_lfn+0xa6>
		chr = ld_word(dir + LfnOfs[di]);	/* Pick a character from the entry */
 8004828:	4a26      	ldr	r2, [pc, #152]	@ (80048c4 <cmp_lfn+0xdc>)
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	4413      	add	r3, r2
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	461a      	mov	r2, r3
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	4413      	add	r3, r2
 8004836:	4618      	mov	r0, r3
 8004838:	f7fe fbc6 	bl	8002fc8 <ld_word>
 800483c:	4603      	mov	r3, r0
 800483e:	81bb      	strh	r3, [r7, #12]
		if (pchr != 0) {
 8004840:	89fb      	ldrh	r3, [r7, #14]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d019      	beq.n	800487a <cmp_lfn+0x92>
			if (ni >= FF_MAX_LFN + 1 || ff_wtoupper(chr) != ff_wtoupper(lfnbuf[ni++])) {	/* Compare it with name */
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	2bff      	cmp	r3, #255	@ 0xff
 800484a:	d811      	bhi.n	8004870 <cmp_lfn+0x88>
 800484c:	89bb      	ldrh	r3, [r7, #12]
 800484e:	4618      	mov	r0, r3
 8004850:	f003 f818 	bl	8007884 <ff_wtoupper>
 8004854:	4604      	mov	r4, r0
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	1c5a      	adds	r2, r3, #1
 800485a:	617a      	str	r2, [r7, #20]
 800485c:	005b      	lsls	r3, r3, #1
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	4413      	add	r3, r2
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	4618      	mov	r0, r3
 8004866:	f003 f80d 	bl	8007884 <ff_wtoupper>
 800486a:	4603      	mov	r3, r0
 800486c:	429c      	cmp	r4, r3
 800486e:	d001      	beq.n	8004874 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8004870:	2300      	movs	r3, #0
 8004872:	e022      	b.n	80048ba <cmp_lfn+0xd2>
			}
			pchr = chr;
 8004874:	89bb      	ldrh	r3, [r7, #12]
 8004876:	81fb      	strh	r3, [r7, #14]
 8004878:	e006      	b.n	8004888 <cmp_lfn+0xa0>
		} else {
			if (chr != 0xFFFF) return 0;	/* Check filler */
 800487a:	89bb      	ldrh	r3, [r7, #12]
 800487c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004880:	4293      	cmp	r3, r2
 8004882:	d001      	beq.n	8004888 <cmp_lfn+0xa0>
 8004884:	2300      	movs	r3, #0
 8004886:	e018      	b.n	80048ba <cmp_lfn+0xd2>
	for (pchr = 1, di = 0; di < 13; di++) {	/* Process all characters in the entry */
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	3301      	adds	r3, #1
 800488c:	613b      	str	r3, [r7, #16]
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	2b0c      	cmp	r3, #12
 8004892:	d9c9      	bls.n	8004828 <cmp_lfn+0x40>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && pchr && lfnbuf[ni]) return 0;	/* Last name segment matched but different length */
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	781b      	ldrb	r3, [r3, #0]
 8004898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00b      	beq.n	80048b8 <cmp_lfn+0xd0>
 80048a0:	89fb      	ldrh	r3, [r7, #14]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d008      	beq.n	80048b8 <cmp_lfn+0xd0>
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	4413      	add	r3, r2
 80048ae:	881b      	ldrh	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d001      	beq.n	80048b8 <cmp_lfn+0xd0>
 80048b4:	2300      	movs	r3, #0
 80048b6:	e000      	b.n	80048ba <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80048b8:	2301      	movs	r3, #1
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	371c      	adds	r7, #28
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd90      	pop	{r4, r7, pc}
 80048c2:	bf00      	nop
 80048c4:	08007af0 	.word	0x08007af0

080048c8 <pick_lfn>:

static int pick_lfn (	/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the name buffer to be stored */
	const BYTE* dir		/* Pointer to the LFN entry */
)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
	UINT ni, di;
	WCHAR pchr, chr;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check if LDIR_FstClusLO is 0 */
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	331a      	adds	r3, #26
 80048d6:	4618      	mov	r0, r3
 80048d8:	f7fe fb76 	bl	8002fc8 <ld_word>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <pick_lfn+0x1e>
 80048e2:	2300      	movs	r3, #0
 80048e4:	e051      	b.n	800498a <pick_lfn+0xc2>

	ni = (UINT)((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the name buffer */
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80048ee:	3b01      	subs	r3, #1
 80048f0:	461a      	mov	r2, r3
 80048f2:	4613      	mov	r3, r2
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	4413      	add	r3, r2
 80048f8:	009b      	lsls	r3, r3, #2
 80048fa:	4413      	add	r3, r2
 80048fc:	617b      	str	r3, [r7, #20]

	for (pchr = 1, di = 0; di < 13; di++) {		/* Process all characters in the entry */
 80048fe:	2301      	movs	r3, #1
 8004900:	81fb      	strh	r3, [r7, #14]
 8004902:	2300      	movs	r3, #0
 8004904:	613b      	str	r3, [r7, #16]
 8004906:	e028      	b.n	800495a <pick_lfn+0x92>
		chr = ld_word(dir + LfnOfs[di]);		/* Pick a character from the entry */
 8004908:	4a22      	ldr	r2, [pc, #136]	@ (8004994 <pick_lfn+0xcc>)
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	4413      	add	r3, r2
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	461a      	mov	r2, r3
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	4413      	add	r3, r2
 8004916:	4618      	mov	r0, r3
 8004918:	f7fe fb56 	bl	8002fc8 <ld_word>
 800491c:	4603      	mov	r3, r0
 800491e:	81bb      	strh	r3, [r7, #12]
		if (pchr != 0) {
 8004920:	89fb      	ldrh	r3, [r7, #14]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00f      	beq.n	8004946 <pick_lfn+0x7e>
			if (ni >= FF_MAX_LFN + 1) return 0;	/* Buffer overflow? */
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2bff      	cmp	r3, #255	@ 0xff
 800492a:	d901      	bls.n	8004930 <pick_lfn+0x68>
 800492c:	2300      	movs	r3, #0
 800492e:	e02c      	b.n	800498a <pick_lfn+0xc2>
			lfnbuf[ni++] = pchr = chr;			/* Store it */
 8004930:	89bb      	ldrh	r3, [r7, #12]
 8004932:	81fb      	strh	r3, [r7, #14]
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	1c5a      	adds	r2, r3, #1
 8004938:	617a      	str	r2, [r7, #20]
 800493a:	005b      	lsls	r3, r3, #1
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	4413      	add	r3, r2
 8004940:	89fa      	ldrh	r2, [r7, #14]
 8004942:	801a      	strh	r2, [r3, #0]
 8004944:	e006      	b.n	8004954 <pick_lfn+0x8c>
		} else {
			if (chr != 0xFFFF) return 0;		/* Check filler */
 8004946:	89bb      	ldrh	r3, [r7, #12]
 8004948:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800494c:	4293      	cmp	r3, r2
 800494e:	d001      	beq.n	8004954 <pick_lfn+0x8c>
 8004950:	2300      	movs	r3, #0
 8004952:	e01a      	b.n	800498a <pick_lfn+0xc2>
	for (pchr = 1, di = 0; di < 13; di++) {		/* Process all characters in the entry */
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	3301      	adds	r3, #1
 8004958:	613b      	str	r3, [r7, #16]
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	2b0c      	cmp	r3, #12
 800495e:	d9d3      	bls.n	8004908 <pick_lfn+0x40>
		}
	}

	if (dir[LDIR_Ord] & LLEF && pchr != 0) {	/* Put terminator if it is the last LFN part and not terminated */
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004968:	2b00      	cmp	r3, #0
 800496a:	d00d      	beq.n	8004988 <pick_lfn+0xc0>
 800496c:	89fb      	ldrh	r3, [r7, #14]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <pick_lfn+0xc0>
		if (ni >= FF_MAX_LFN + 1) return 0;		/* Buffer overflow? */
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	2bff      	cmp	r3, #255	@ 0xff
 8004976:	d901      	bls.n	800497c <pick_lfn+0xb4>
 8004978:	2300      	movs	r3, #0
 800497a:	e006      	b.n	800498a <pick_lfn+0xc2>
		lfnbuf[ni] = 0;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	005b      	lsls	r3, r3, #1
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	4413      	add	r3, r2
 8004984:	2200      	movs	r2, #0
 8004986:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 8004988:	2301      	movs	r3, #1
}
 800498a:	4618      	mov	r0, r3
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}
 8004992:	bf00      	nop
 8004994:	08007af0 	.word	0x08007af0

08004998 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b088      	sub	sp, #32
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	4611      	mov	r1, r2
 80049a4:	461a      	mov	r2, r3
 80049a6:	460b      	mov	r3, r1
 80049a8:	71fb      	strb	r3, [r7, #7]
 80049aa:	4613      	mov	r3, r2
 80049ac:	71bb      	strb	r3, [r7, #6]
	UINT ni, di;
	WCHAR chr;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	330d      	adds	r3, #13
 80049b2:	79ba      	ldrb	r2, [r7, #6]
 80049b4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute */
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	330b      	adds	r3, #11
 80049ba:	220f      	movs	r2, #15
 80049bc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	330c      	adds	r3, #12
 80049c2:	2200      	movs	r2, #0
 80049c4:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	331a      	adds	r3, #26
 80049ca:	2100      	movs	r1, #0
 80049cc:	4618      	mov	r0, r3
 80049ce:	f7fe fc0e 	bl	80031ee <st_word>

	ni = (UINT)(ord - 1) * 13;		/* Offset in the name */
 80049d2:	79fb      	ldrb	r3, [r7, #7]
 80049d4:	3b01      	subs	r3, #1
 80049d6:	461a      	mov	r2, r3
 80049d8:	4613      	mov	r3, r2
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	4413      	add	r3, r2
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	61fb      	str	r3, [r7, #28]
	di = chr = 0;
 80049e4:	2300      	movs	r3, #0
 80049e6:	82fb      	strh	r3, [r7, #22]
 80049e8:	2300      	movs	r3, #0
 80049ea:	61bb      	str	r3, [r7, #24]
	do {	/* Fill the directory entry */
		if (chr != 0xFFFF) chr = lfn[ni++];	/* Get an effective character */
 80049ec:	8afb      	ldrh	r3, [r7, #22]
 80049ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d007      	beq.n	8004a06 <put_lfn+0x6e>
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	61fa      	str	r2, [r7, #28]
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	68fa      	ldr	r2, [r7, #12]
 8004a00:	4413      	add	r3, r2
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[di], chr);	/* Set it */
 8004a06:	4a17      	ldr	r2, [pc, #92]	@ (8004a64 <put_lfn+0xcc>)
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	4413      	add	r3, r2
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	461a      	mov	r2, r3
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4413      	add	r3, r2
 8004a14:	8afa      	ldrh	r2, [r7, #22]
 8004a16:	4611      	mov	r1, r2
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7fe fbe8 	bl	80031ee <st_word>
		if (chr == 0) chr = 0xFFFF;		/* Padding characters after the terminator */
 8004a1e:	8afb      	ldrh	r3, [r7, #22]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d102      	bne.n	8004a2a <put_lfn+0x92>
 8004a24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004a28:	82fb      	strh	r3, [r7, #22]
	} while (++di < 13);
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	61bb      	str	r3, [r7, #24]
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	2b0c      	cmp	r3, #12
 8004a34:	d9da      	bls.n	80049ec <put_lfn+0x54>
	if (chr == 0xFFFF || !lfn[ni]) ord |= LLEF;	/* Last LFN part is the start of an enrty set */
 8004a36:	8afb      	ldrh	r3, [r7, #22]
 8004a38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d006      	beq.n	8004a4e <put_lfn+0xb6>
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	005b      	lsls	r3, r3, #1
 8004a44:	68fa      	ldr	r2, [r7, #12]
 8004a46:	4413      	add	r3, r2
 8004a48:	881b      	ldrh	r3, [r3, #0]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d103      	bne.n	8004a56 <put_lfn+0xbe>
 8004a4e:	79fb      	ldrb	r3, [r7, #7]
 8004a50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a54:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set order in the entry set */
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	79fa      	ldrb	r2, [r7, #7]
 8004a5a:	701a      	strb	r2, [r3, #0]
}
 8004a5c:	bf00      	nop
 8004a5e:	3720      	adds	r7, #32
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}
 8004a64:	08007af0 	.word	0x08007af0

08004a68 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN in directory form */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b08c      	sub	sp, #48	@ 0x30
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	60f8      	str	r0, [r7, #12]
 8004a70:	60b9      	str	r1, [r7, #8]
 8004a72:	607a      	str	r2, [r7, #4]
 8004a74:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD crc_sreg;


	memcpy(dst, src, 11);	/* Prepare the SFN to be modified */
 8004a76:	220b      	movs	r2, #11
 8004a78:	68b9      	ldr	r1, [r7, #8]
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f002 ffdc 	bl	8007a38 <memcpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	2b05      	cmp	r3, #5
 8004a84:	d92b      	bls.n	8004ade <gen_numname+0x76>
		crc_sreg = seq;
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC value as a hash of LFN */
 8004a8a:	e022      	b.n	8004ad2 <gen_numname+0x6a>
			wc = *lfn++;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	1c9a      	adds	r2, r3, #2
 8004a90:	607a      	str	r2, [r7, #4]
 8004a92:	881b      	ldrh	r3, [r3, #0]
 8004a94:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8004a96:	2300      	movs	r3, #0
 8004a98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a9a:	e017      	b.n	8004acc <gen_numname+0x64>
				crc_sreg = (crc_sreg << 1) + (wc & 1);
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	005a      	lsls	r2, r3, #1
 8004aa0:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004aa2:	f003 0301 	and.w	r3, r3, #1
 8004aa6:	4413      	add	r3, r2
 8004aa8:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8004aaa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004aac:	085b      	lsrs	r3, r3, #1
 8004aae:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (crc_sreg & 0x10000) crc_sreg ^= 0x11021;
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d005      	beq.n	8004ac6 <gen_numname+0x5e>
 8004aba:	69fb      	ldr	r3, [r7, #28]
 8004abc:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8004ac0:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8004ac4:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8004ac6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac8:	3301      	adds	r3, #1
 8004aca:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ace:	2b0f      	cmp	r3, #15
 8004ad0:	d9e4      	bls.n	8004a9c <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC value as a hash of LFN */
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	881b      	ldrh	r3, [r3, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1d8      	bne.n	8004a8c <gen_numname+0x24>
			}
		}
		seq = (UINT)crc_sreg;
 8004ada:	69fb      	ldr	r3, [r7, #28]
 8004adc:	603b      	str	r3, [r7, #0]
	}

	/* Make suffix (~ + hexdecimal) */
	i = 7;
 8004ade:	2307      	movs	r3, #7
 8004ae0:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0'); seq /= 16;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	f003 030f 	and.w	r3, r3, #15
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	3330      	adds	r3, #48	@ 0x30
 8004aee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	091b      	lsrs	r3, r3, #4
 8004af6:	603b      	str	r3, [r7, #0]
		if (c > '9') c += 7;
 8004af8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004afc:	2b39      	cmp	r3, #57	@ 0x39
 8004afe:	d904      	bls.n	8004b0a <gen_numname+0xa2>
 8004b00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004b04:	3307      	adds	r3, #7
 8004b06:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8004b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0c:	1e5a      	subs	r2, r3, #1
 8004b0e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004b10:	3330      	adds	r3, #48	@ 0x30
 8004b12:	443b      	add	r3, r7
 8004b14:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8004b18:	f803 2c1c 	strb.w	r2, [r3, #-28]
	} while (i && seq);
 8004b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d002      	beq.n	8004b28 <gen_numname+0xc0>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1dc      	bne.n	8004ae2 <gen_numname+0x7a>
	ns[i] = '~';
 8004b28:	f107 0214 	add.w	r2, r7, #20
 8004b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b2e:	4413      	add	r3, r2
 8004b30:	227e      	movs	r2, #126	@ 0x7e
 8004b32:	701a      	strb	r2, [r3, #0]

	/* Append the suffix to the SFN body */
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 8004b34:	2300      	movs	r3, #0
 8004b36:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b38:	e014      	b.n	8004b64 <gen_numname+0xfc>
		if (dbc_1st(dst[j])) {	/* To avoid DBC break up */
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b3e:	4413      	add	r3, r2
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fe fc1f 	bl	8003386 <dbc_1st>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d007      	beq.n	8004b5e <gen_numname+0xf6>
			if (j == i - 1) break;
 8004b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b50:	3b01      	subs	r3, #1
 8004b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b54:	429a      	cmp	r2, r3
 8004b56:	d010      	beq.n	8004b7a <gen_numname+0x112>
			j++;
 8004b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5a:	3301      	adds	r3, #1
 8004b5c:	627b      	str	r3, [r7, #36]	@ 0x24
	for (j = 0; j < i && dst[j] != ' '; j++) {	/* Find the offset to append */
 8004b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b60:	3301      	adds	r3, #1
 8004b62:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d207      	bcs.n	8004b7c <gen_numname+0x114>
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b70:	4413      	add	r3, r2
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	2b20      	cmp	r3, #32
 8004b76:	d1e0      	bne.n	8004b3a <gen_numname+0xd2>
 8004b78:	e000      	b.n	8004b7c <gen_numname+0x114>
			if (j == i - 1) break;
 8004b7a:	bf00      	nop
		}
	}
	do {	/* Append the suffix */
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7e:	2b07      	cmp	r3, #7
 8004b80:	d807      	bhi.n	8004b92 <gen_numname+0x12a>
 8004b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b84:	1c5a      	adds	r2, r3, #1
 8004b86:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004b88:	3330      	adds	r3, #48	@ 0x30
 8004b8a:	443b      	add	r3, r7
 8004b8c:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8004b90:	e000      	b.n	8004b94 <gen_numname+0x12c>
 8004b92:	2120      	movs	r1, #32
 8004b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b96:	1c5a      	adds	r2, r3, #1
 8004b98:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	460a      	mov	r2, r1
 8004ba0:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba4:	2b07      	cmp	r3, #7
 8004ba6:	d9e9      	bls.n	8004b7c <gen_numname+0x114>
}
 8004ba8:	bf00      	nop
 8004baa:	bf00      	nop
 8004bac:	3730      	adds	r7, #48	@ 0x30
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <sum_sfn>:
/*-----------------------------------------------------------------------*/

static BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004bb2:	b480      	push	{r7}
 8004bb4:	b085      	sub	sp, #20
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8004bbe:	230b      	movs	r3, #11
 8004bc0:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004bc2:	7bfb      	ldrb	r3, [r7, #15]
 8004bc4:	b2da      	uxtb	r2, r3
 8004bc6:	0852      	lsrs	r2, r2, #1
 8004bc8:	01db      	lsls	r3, r3, #7
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	b2da      	uxtb	r2, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	1c59      	adds	r1, r3, #1
 8004bd2:	6079      	str	r1, [r7, #4]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	4413      	add	r3, r2
 8004bd8:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	3b01      	subs	r3, #1
 8004bde:	60bb      	str	r3, [r7, #8]
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d1ed      	bne.n	8004bc2 <sum_sfn+0x10>
	return sum;
 8004be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3714      	adds	r7, #20
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bc80      	pop	{r7}
 8004bf0:	4770      	bx	lr

08004bf2 <xdir_sum>:
/*-----------------------------------------------------------------------*/

static WORD xdir_sum (	/* Get checksum of the directoly entry block */
	const BYTE* dir		/* Directory entry block to be calculated */
)
{
 8004bf2:	b480      	push	{r7}
 8004bf4:	b087      	sub	sp, #28
 8004bf6:	af00      	add	r7, sp, #0
 8004bf8:	6078      	str	r0, [r7, #4]
	UINT i, szblk;
	WORD sum;


	szblk = ((UINT)dir[XDIR_NumSec] + 1) * SZDIRE;	/* Number of bytes of the entry block */
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	3301      	adds	r3, #1
 8004bfe:	781b      	ldrb	r3, [r3, #0]
 8004c00:	3301      	adds	r3, #1
 8004c02:	015b      	lsls	r3, r3, #5
 8004c04:	60fb      	str	r3, [r7, #12]
	for (i = sum = 0; i < szblk; i++) {
 8004c06:	2300      	movs	r3, #0
 8004c08:	827b      	strh	r3, [r7, #18]
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	617b      	str	r3, [r7, #20]
 8004c0e:	e015      	b.n	8004c3c <xdir_sum+0x4a>
		if (i == XDIR_SetSum) {	/* Skip 2-byte sum field */
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d103      	bne.n	8004c1e <xdir_sum+0x2c>
			i++;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	3301      	adds	r3, #1
 8004c1a:	617b      	str	r3, [r7, #20]
 8004c1c:	e00b      	b.n	8004c36 <xdir_sum+0x44>
		} else {
			sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + dir[i];
 8004c1e:	8a7b      	ldrh	r3, [r7, #18]
 8004c20:	b29a      	uxth	r2, r3
 8004c22:	0852      	lsrs	r2, r2, #1
 8004c24:	03db      	lsls	r3, r3, #15
 8004c26:	4313      	orrs	r3, r2
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	6879      	ldr	r1, [r7, #4]
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	440a      	add	r2, r1
 8004c30:	7812      	ldrb	r2, [r2, #0]
 8004c32:	4413      	add	r3, r2
 8004c34:	827b      	strh	r3, [r7, #18]
	for (i = sum = 0; i < szblk; i++) {
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	617b      	str	r3, [r7, #20]
 8004c3c:	697a      	ldr	r2, [r7, #20]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d3e5      	bcc.n	8004c10 <xdir_sum+0x1e>
		}
	}
	return sum;
 8004c44:	8a7b      	ldrh	r3, [r7, #18]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	371c      	adds	r7, #28
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bc80      	pop	{r7}
 8004c4e:	4770      	bx	lr

08004c50 <xname_sum>:


static WORD xname_sum (	/* Get check sum (to be used as hash) of the file name */
	const WCHAR* name	/* File name to be calculated */
)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
	WCHAR chr;
	WORD sum = 0;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	81fb      	strh	r3, [r7, #14]


	while ((chr = *name++) != 0) {
 8004c5c:	e01b      	b.n	8004c96 <xname_sum+0x46>
		chr = (WCHAR)ff_wtoupper(chr);		/* File name needs to be up-case converted */
 8004c5e:	89bb      	ldrh	r3, [r7, #12]
 8004c60:	4618      	mov	r0, r3
 8004c62:	f002 fe0f 	bl	8007884 <ff_wtoupper>
 8004c66:	4603      	mov	r3, r0
 8004c68:	81bb      	strh	r3, [r7, #12]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr & 0xFF);
 8004c6a:	89fb      	ldrh	r3, [r7, #14]
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	0852      	lsrs	r2, r2, #1
 8004c70:	03db      	lsls	r3, r3, #15
 8004c72:	4313      	orrs	r3, r2
 8004c74:	b29a      	uxth	r2, r3
 8004c76:	89bb      	ldrh	r3, [r7, #12]
 8004c78:	b2db      	uxtb	r3, r3
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	4413      	add	r3, r2
 8004c7e:	81fb      	strh	r3, [r7, #14]
		sum = ((sum & 1) ? 0x8000 : 0) + (sum >> 1) + (chr >> 8);
 8004c80:	89fb      	ldrh	r3, [r7, #14]
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	0852      	lsrs	r2, r2, #1
 8004c86:	03db      	lsls	r3, r3, #15
 8004c88:	4313      	orrs	r3, r2
 8004c8a:	b29a      	uxth	r2, r3
 8004c8c:	89bb      	ldrh	r3, [r7, #12]
 8004c8e:	0a1b      	lsrs	r3, r3, #8
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	4413      	add	r3, r2
 8004c94:	81fb      	strh	r3, [r7, #14]
	while ((chr = *name++) != 0) {
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	1c9a      	adds	r2, r3, #2
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	881b      	ldrh	r3, [r3, #0]
 8004c9e:	81bb      	strh	r3, [r7, #12]
 8004ca0:	89bb      	ldrh	r3, [r7, #12]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1db      	bne.n	8004c5e <xname_sum+0xe>
	}
	return sum;
 8004ca6:	89fb      	ldrh	r3, [r7, #14]
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <load_xdir>:
/*------------------------------------*/

static FRESULT load_xdir (	/* FR_INT_ERR: invalid entry block */
	DIR* dp					/* Reading directory object pointing top of the entry block to load */
)
{
 8004cb0:	b590      	push	{r4, r7, lr}
 8004cb2:	b087      	sub	sp, #28
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT i, sz_ent;
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the on-memory directory entry block 85+C0+C1s */
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	60fb      	str	r3, [r7, #12]


	/* Load file-directory entry */
	res = move_window(dp->obj.fs, dp->sect);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc8:	4619      	mov	r1, r3
 8004cca:	4610      	mov	r0, r2
 8004ccc:	f7fe fc34 	bl	8003538 <move_window>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004cd4:	7dfb      	ldrb	r3, [r7, #23]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d001      	beq.n	8004cde <load_xdir+0x2e>
 8004cda:	7dfb      	ldrb	r3, [r7, #23]
 8004cdc:	e0a9      	b.n	8004e32 <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_FILEDIR) return FR_INT_ERR;	/* Invalid order? */
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	2b85      	cmp	r3, #133	@ 0x85
 8004ce6:	d001      	beq.n	8004cec <load_xdir+0x3c>
 8004ce8:	2302      	movs	r3, #2
 8004cea:	e0a2      	b.n	8004e32 <load_xdir+0x182>
	memcpy(dirb + 0 * SZDIRE, dp->dir, SZDIRE);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f002 fe9f 	bl	8007a38 <memcpy>
	sz_ent = ((UINT)dirb[XDIR_NumSec] + 1) * SZDIRE;	/* Size of this entry block */
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	3301      	adds	r3, #1
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	3301      	adds	r3, #1
 8004d02:	015b      	lsls	r3, r3, #5
 8004d04:	60bb      	str	r3, [r7, #8]
	if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;	/* Invalid block size? */
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	2b5f      	cmp	r3, #95	@ 0x5f
 8004d0a:	d903      	bls.n	8004d14 <load_xdir+0x64>
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8004d12:	d901      	bls.n	8004d18 <load_xdir+0x68>
 8004d14:	2302      	movs	r3, #2
 8004d16:	e08c      	b.n	8004e32 <load_xdir+0x182>

	/* Load stream extension entry */
	res = dir_next(dp, 0);
 8004d18:	2100      	movs	r1, #0
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7ff fc13 	bl	8004546 <dir_next>
 8004d20:	4603      	mov	r3, r0
 8004d22:	75fb      	strb	r3, [r7, #23]
	if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 8004d24:	7dfb      	ldrb	r3, [r7, #23]
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	d101      	bne.n	8004d2e <load_xdir+0x7e>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004d2e:	7dfb      	ldrb	r3, [r7, #23]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d001      	beq.n	8004d38 <load_xdir+0x88>
 8004d34:	7dfb      	ldrb	r3, [r7, #23]
 8004d36:	e07c      	b.n	8004e32 <load_xdir+0x182>
	res = move_window(dp->obj.fs, dp->sect);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d40:	4619      	mov	r1, r3
 8004d42:	4610      	mov	r0, r2
 8004d44:	f7fe fbf8 	bl	8003538 <move_window>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004d4c:	7dfb      	ldrb	r3, [r7, #23]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <load_xdir+0xa6>
 8004d52:	7dfb      	ldrb	r3, [r7, #23]
 8004d54:	e06d      	b.n	8004e32 <load_xdir+0x182>
	if (dp->dir[XDIR_Type] != ET_STREAM) return FR_INT_ERR;	/* Invalid order? */
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d5a:	781b      	ldrb	r3, [r3, #0]
 8004d5c:	2bc0      	cmp	r3, #192	@ 0xc0
 8004d5e:	d001      	beq.n	8004d64 <load_xdir+0xb4>
 8004d60:	2302      	movs	r3, #2
 8004d62:	e066      	b.n	8004e32 <load_xdir+0x182>
	memcpy(dirb + 1 * SZDIRE, dp->dir, SZDIRE);
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f103 0020 	add.w	r0, r3, #32
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d6e:	2220      	movs	r2, #32
 8004d70:	4619      	mov	r1, r3
 8004d72:	f002 fe61 	bl	8007a38 <memcpy>
	if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;	/* Invalid block size for the name? */
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	3323      	adds	r3, #35	@ 0x23
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	332c      	adds	r3, #44	@ 0x2c
 8004d7e:	4a2f      	ldr	r2, [pc, #188]	@ (8004e3c <load_xdir+0x18c>)
 8004d80:	fba2 2303 	umull	r2, r3, r2, r3
 8004d84:	08db      	lsrs	r3, r3, #3
 8004d86:	015b      	lsls	r3, r3, #5
 8004d88:	68ba      	ldr	r2, [r7, #8]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d201      	bcs.n	8004d92 <load_xdir+0xe2>
 8004d8e:	2302      	movs	r3, #2
 8004d90:	e04f      	b.n	8004e32 <load_xdir+0x182>

	/* Load file name entries */
	i = 2 * SZDIRE;	/* Name offset to load */
 8004d92:	2340      	movs	r3, #64	@ 0x40
 8004d94:	613b      	str	r3, [r7, #16]
	do {
		res = dir_next(dp, 0);
 8004d96:	2100      	movs	r1, #0
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f7ff fbd4 	bl	8004546 <dir_next>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_NO_FILE) res = FR_INT_ERR;	/* It cannot be */
 8004da2:	7dfb      	ldrb	r3, [r7, #23]
 8004da4:	2b04      	cmp	r3, #4
 8004da6:	d101      	bne.n	8004dac <load_xdir+0xfc>
 8004da8:	2302      	movs	r3, #2
 8004daa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8004dac:	7dfb      	ldrb	r3, [r7, #23]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d001      	beq.n	8004db6 <load_xdir+0x106>
 8004db2:	7dfb      	ldrb	r3, [r7, #23]
 8004db4:	e03d      	b.n	8004e32 <load_xdir+0x182>
		res = move_window(dp->obj.fs, dp->sect);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dbe:	4619      	mov	r1, r3
 8004dc0:	4610      	mov	r0, r2
 8004dc2:	f7fe fbb9 	bl	8003538 <move_window>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) return res;
 8004dca:	7dfb      	ldrb	r3, [r7, #23]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d001      	beq.n	8004dd4 <load_xdir+0x124>
 8004dd0:	7dfb      	ldrb	r3, [r7, #23]
 8004dd2:	e02e      	b.n	8004e32 <load_xdir+0x182>
		if (dp->dir[XDIR_Type] != ET_FILENAME) return FR_INT_ERR;	/* Invalid order? */
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	2bc1      	cmp	r3, #193	@ 0xc1
 8004ddc:	d001      	beq.n	8004de2 <load_xdir+0x132>
 8004dde:	2302      	movs	r3, #2
 8004de0:	e027      	b.n	8004e32 <load_xdir+0x182>
		if (i < MAXDIRB(FF_MAX_LFN)) memcpy(dirb + i, dp->dir, SZDIRE);	/* Load name entries only if the object is accessible */
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8004de8:	d208      	bcs.n	8004dfc <load_xdir+0x14c>
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	18d0      	adds	r0, r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004df4:	2220      	movs	r2, #32
 8004df6:	4619      	mov	r1, r3
 8004df8:	f002 fe1e 	bl	8007a38 <memcpy>
	} while ((i += SZDIRE) < sz_ent);
 8004dfc:	693b      	ldr	r3, [r7, #16]
 8004dfe:	3320      	adds	r3, #32
 8004e00:	613b      	str	r3, [r7, #16]
 8004e02:	693a      	ldr	r2, [r7, #16]
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d3c5      	bcc.n	8004d96 <load_xdir+0xe6>

	/* Sanity check (do it for only accessible object) */
	if (i <= MAXDIRB(FF_MAX_LFN)) {
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 8004e10:	d80e      	bhi.n	8004e30 <load_xdir+0x180>
		if (xdir_sum(dirb) != ld_word(dirb + XDIR_SetSum)) return FR_INT_ERR;
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	f7ff feed 	bl	8004bf2 <xdir_sum>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	461c      	mov	r4, r3
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	3302      	adds	r3, #2
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fe f8d1 	bl	8002fc8 <ld_word>
 8004e26:	4603      	mov	r3, r0
 8004e28:	429c      	cmp	r4, r3
 8004e2a:	d001      	beq.n	8004e30 <load_xdir+0x180>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	e000      	b.n	8004e32 <load_xdir+0x182>
	}

	return FR_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	371c      	adds	r7, #28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd90      	pop	{r4, r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	88888889 	.word	0x88888889

08004e40 <init_alloc_info>:

static void init_alloc_info (
	FATFS* fs,		/* Filesystem object */
	FFOBJID* obj	/* Object allocation information to be initialized */
)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
	obj->sclust = ld_dword(fs->dirbuf + XDIR_FstClus);		/* Start cluster */
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	3334      	adds	r3, #52	@ 0x34
 8004e50:	4618      	mov	r0, r3
 8004e52:	f7fe f8d1 	bl	8002ff8 <ld_dword>
 8004e56:	4602      	mov	r2, r0
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	609a      	str	r2, [r3, #8]
	obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	695b      	ldr	r3, [r3, #20]
 8004e60:	3338      	adds	r3, #56	@ 0x38
 8004e62:	4618      	mov	r0, r3
 8004e64:	f7fe f8ea 	bl	800303c <ld_qword>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	6839      	ldr	r1, [r7, #0]
 8004e6e:	e9c1 2304 	strd	r2, r3, [r1, #16]
	obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;				/* Allocation status */
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	3321      	adds	r3, #33	@ 0x21
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	b2da      	uxtb	r2, r3
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	71da      	strb	r2, [r3, #7]
	obj->n_frag = 0;										/* No last fragment info */
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	2200      	movs	r2, #0
 8004e88:	61da      	str	r2, [r3, #28]
}
 8004e8a:	bf00      	nop
 8004e8c:	3708      	adds	r7, #8
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	bd80      	pop	{r7, pc}

08004e92 <load_obj_xdir>:

static FRESULT load_obj_xdir (
	DIR* dp,			/* Blank directory object to be used to access containing directory */
	const FFOBJID* obj	/* Object with its containing directory information */
)
{
 8004e92:	b5b0      	push	{r4, r5, r7, lr}
 8004e94:	b084      	sub	sp, #16
 8004e96:	af00      	add	r7, sp, #0
 8004e98:	6078      	str	r0, [r7, #4]
 8004e9a:	6039      	str	r1, [r7, #0]
	FRESULT res;

	/* Open object containing directory */
	dp->obj.fs = obj->fs;
 8004e9c:	6839      	ldr	r1, [r7, #0]
 8004e9e:	6808      	ldr	r0, [r1, #0]
 8004ea0:	6879      	ldr	r1, [r7, #4]
 8004ea2:	6008      	str	r0, [r1, #0]
	dp->obj.sclust = obj->c_scl;
 8004ea4:	6839      	ldr	r1, [r7, #0]
 8004ea6:	6a08      	ldr	r0, [r1, #32]
 8004ea8:	6879      	ldr	r1, [r7, #4]
 8004eaa:	6088      	str	r0, [r1, #8]
	dp->obj.stat = (BYTE)obj->c_size;
 8004eac:	6839      	ldr	r1, [r7, #0]
 8004eae:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8004eb0:	b2c8      	uxtb	r0, r1
 8004eb2:	6879      	ldr	r1, [r7, #4]
 8004eb4:	71c8      	strb	r0, [r1, #7]
	dp->obj.objsize = obj->c_size & 0xFFFFFF00;
 8004eb6:	6839      	ldr	r1, [r7, #0]
 8004eb8:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8004eba:	2000      	movs	r0, #0
 8004ebc:	460c      	mov	r4, r1
 8004ebe:	4605      	mov	r5, r0
 8004ec0:	f024 02ff 	bic.w	r2, r4, #255	@ 0xff
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	6879      	ldr	r1, [r7, #4]
 8004ec8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	dp->obj.n_frag = 0;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	61da      	str	r2, [r3, #28]
	dp->blk_ofs = obj->c_ofs;
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	64da      	str	r2, [r3, #76]	@ 0x4c

	res = dir_sdi(dp, dp->blk_ofs);	/* Goto object's entry block */
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ede:	4619      	mov	r1, r3
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7ff fa9c 	bl	800441e <dir_sdi>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004eea:	7bfb      	ldrb	r3, [r7, #15]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d104      	bne.n	8004efa <load_obj_xdir+0x68>
		res = load_xdir(dp);		/* Load the object's entry block */
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f7ff fedd 	bl	8004cb0 <load_xdir>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	73fb      	strb	r3, [r7, #15]
	}
	return res;
 8004efa:	7bfb      	ldrb	r3, [r7, #15]
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bdb0      	pop	{r4, r5, r7, pc}

08004f04 <store_xdir>:
/*----------------------------------------*/

static FRESULT store_xdir (
	DIR* dp				/* Pointer to the directory object */
)
{
 8004f04:	b590      	push	{r4, r7, lr}
 8004f06:	b087      	sub	sp, #28
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	UINT nent;
	BYTE *dirb = dp->obj.fs->dirbuf;	/* Pointer to the entry set 85+C0+C1s */
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	60fb      	str	r3, [r7, #12]


	st_word(dirb + XDIR_SetSum, xdir_sum(dirb));	/* Create check sum */
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	1c9c      	adds	r4, r3, #2
 8004f18:	68f8      	ldr	r0, [r7, #12]
 8004f1a:	f7ff fe6a 	bl	8004bf2 <xdir_sum>
 8004f1e:	4603      	mov	r3, r0
 8004f20:	4619      	mov	r1, r3
 8004f22:	4620      	mov	r0, r4
 8004f24:	f7fe f963 	bl	80031ee <st_word>

	/* Store the entry set to the directory */
	nent = dirb[XDIR_NumSec] + 1;	/* Number of entries */
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	3301      	adds	r3, #1
 8004f2c:	781b      	ldrb	r3, [r3, #0]
 8004f2e:	3301      	adds	r3, #1
 8004f30:	613b      	str	r3, [r7, #16]
	res = dir_sdi(dp, dp->blk_ofs);	/* Top of the entry set */
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004f36:	4619      	mov	r1, r3
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f7ff fa70 	bl	800441e <dir_sdi>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8004f42:	e026      	b.n	8004f92 <store_xdir+0x8e>
		/* Set an entry to the directory */
		res = move_window(dp->obj.fs, dp->sect);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681a      	ldr	r2, [r3, #0]
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f4c:	4619      	mov	r1, r3
 8004f4e:	4610      	mov	r0, r2
 8004f50:	f7fe faf2 	bl	8003538 <move_window>
 8004f54:	4603      	mov	r3, r0
 8004f56:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004f58:	7dfb      	ldrb	r3, [r7, #23]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d11d      	bne.n	8004f9a <store_xdir+0x96>
		memcpy(dp->dir, dirb, SZDIRE);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f62:	2220      	movs	r2, #32
 8004f64:	68f9      	ldr	r1, [r7, #12]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f002 fd66 	bl	8007a38 <memcpy>
		dp->obj.fs->wflag = 1;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	2201      	movs	r2, #1
 8004f72:	711a      	strb	r2, [r3, #4]

		if (--nent == 0) break;	/* All done? */
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	3b01      	subs	r3, #1
 8004f78:	613b      	str	r3, [r7, #16]
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d00e      	beq.n	8004f9e <store_xdir+0x9a>
		dirb += SZDIRE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	3320      	adds	r3, #32
 8004f84:	60fb      	str	r3, [r7, #12]
		res = dir_next(dp, 0);	/* Next entry */
 8004f86:	2100      	movs	r1, #0
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	f7ff fadc 	bl	8004546 <dir_next>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	75fb      	strb	r3, [r7, #23]
	while (res == FR_OK) {
 8004f92:	7dfb      	ldrb	r3, [r7, #23]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d0d5      	beq.n	8004f44 <store_xdir+0x40>
 8004f98:	e002      	b.n	8004fa0 <store_xdir+0x9c>
		if (res != FR_OK) break;
 8004f9a:	bf00      	nop
 8004f9c:	e000      	b.n	8004fa0 <store_xdir+0x9c>
		if (--nent == 0) break;	/* All done? */
 8004f9e:	bf00      	nop
	}
	return (res == FR_OK || res == FR_DISK_ERR) ? res : FR_INT_ERR;
 8004fa0:	7dfb      	ldrb	r3, [r7, #23]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <store_xdir+0xa8>
 8004fa6:	7dfb      	ldrb	r3, [r7, #23]
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	d101      	bne.n	8004fb0 <store_xdir+0xac>
 8004fac:	7dfb      	ldrb	r3, [r7, #23]
 8004fae:	e000      	b.n	8004fb2 <store_xdir+0xae>
 8004fb0:	2302      	movs	r3, #2
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	371c      	adds	r7, #28
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd90      	pop	{r4, r7, pc}

08004fba <create_xdir>:

static void create_xdir (
	BYTE* dirb,			/* Pointer to the directory entry block buffer */
	const WCHAR* lfn	/* Pointer to the object name */
)
{
 8004fba:	b590      	push	{r4, r7, lr}
 8004fbc:	b085      	sub	sp, #20
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	6039      	str	r1, [r7, #0]
	BYTE n_c1, nlen;
	WCHAR chr;


	/* Create file-directory and stream-extension entry (1st and 2nd entry) */
	memset(dirb, 0, 2 * SZDIRE);
 8004fc4:	2240      	movs	r2, #64	@ 0x40
 8004fc6:	2100      	movs	r1, #0
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f002 fcfb 	bl	80079c4 <memset>
	dirb[0 * SZDIRE + XDIR_Type] = ET_FILEDIR;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2285      	movs	r2, #133	@ 0x85
 8004fd2:	701a      	strb	r2, [r3, #0]
	dirb[1 * SZDIRE + XDIR_Type] = ET_STREAM;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	3320      	adds	r3, #32
 8004fd8:	22c0      	movs	r2, #192	@ 0xc0
 8004fda:	701a      	strb	r2, [r3, #0]

	/* Create file name entries (3rd enrty and follows) */
	i = SZDIRE * 2;	/* Top of file name entries */
 8004fdc:	2340      	movs	r3, #64	@ 0x40
 8004fde:	60fb      	str	r3, [r7, #12]
	nlen = n_c1 = 0; chr = 1;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	72fb      	strb	r3, [r7, #11]
 8004fe4:	7afb      	ldrb	r3, [r7, #11]
 8004fe6:	72bb      	strb	r3, [r7, #10]
 8004fe8:	2301      	movs	r3, #1
 8004fea:	813b      	strh	r3, [r7, #8]
	do {
		dirb[i++] = ET_FILENAME; dirb[i++] = 0;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	1c5a      	adds	r2, r3, #1
 8004ff0:	60fa      	str	r2, [r7, #12]
 8004ff2:	687a      	ldr	r2, [r7, #4]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	22c1      	movs	r2, #193	@ 0xc1
 8004ff8:	701a      	strb	r2, [r3, #0]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	1c5a      	adds	r2, r3, #1
 8004ffe:	60fa      	str	r2, [r7, #12]
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	4413      	add	r3, r2
 8005004:	2200      	movs	r2, #0
 8005006:	701a      	strb	r2, [r3, #0]
		do {	/* Fill name field */
			if (chr != 0 && (chr = lfn[nlen]) != 0) nlen++;	/* Get a character if exist */
 8005008:	893b      	ldrh	r3, [r7, #8]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00b      	beq.n	8005026 <create_xdir+0x6c>
 800500e:	7abb      	ldrb	r3, [r7, #10]
 8005010:	005b      	lsls	r3, r3, #1
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	4413      	add	r3, r2
 8005016:	881b      	ldrh	r3, [r3, #0]
 8005018:	813b      	strh	r3, [r7, #8]
 800501a:	893b      	ldrh	r3, [r7, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d002      	beq.n	8005026 <create_xdir+0x6c>
 8005020:	7abb      	ldrb	r3, [r7, #10]
 8005022:	3301      	adds	r3, #1
 8005024:	72bb      	strb	r3, [r7, #10]
			st_word(dirb + i, chr); 	/* Store it */
 8005026:	687a      	ldr	r2, [r7, #4]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	4413      	add	r3, r2
 800502c:	893a      	ldrh	r2, [r7, #8]
 800502e:	4611      	mov	r1, r2
 8005030:	4618      	mov	r0, r3
 8005032:	f7fe f8dc 	bl	80031ee <st_word>
			i += 2;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	3302      	adds	r3, #2
 800503a:	60fb      	str	r3, [r7, #12]
		} while (i % SZDIRE != 0);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f003 031f 	and.w	r3, r3, #31
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1e0      	bne.n	8005008 <create_xdir+0x4e>
		n_c1++;
 8005046:	7afb      	ldrb	r3, [r7, #11]
 8005048:	3301      	adds	r3, #1
 800504a:	72fb      	strb	r3, [r7, #11]
	} while (lfn[nlen]);	/* Fill next C1 entry if any char follows */
 800504c:	7abb      	ldrb	r3, [r7, #10]
 800504e:	005b      	lsls	r3, r3, #1
 8005050:	683a      	ldr	r2, [r7, #0]
 8005052:	4413      	add	r3, r2
 8005054:	881b      	ldrh	r3, [r3, #0]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1c8      	bne.n	8004fec <create_xdir+0x32>

	dirb[XDIR_NumName] = nlen;		/* Set name length */
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	3323      	adds	r3, #35	@ 0x23
 800505e:	7aba      	ldrb	r2, [r7, #10]
 8005060:	701a      	strb	r2, [r3, #0]
	dirb[XDIR_NumSec] = 1 + n_c1;	/* Set secondary count (C0 + C1s) */
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	3301      	adds	r3, #1
 8005066:	7afa      	ldrb	r2, [r7, #11]
 8005068:	3201      	adds	r2, #1
 800506a:	b2d2      	uxtb	r2, r2
 800506c:	701a      	strb	r2, [r3, #0]
	st_word(dirb + XDIR_NameHash, xname_sum(lfn));	/* Set name hash */
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f103 0424 	add.w	r4, r3, #36	@ 0x24
 8005074:	6838      	ldr	r0, [r7, #0]
 8005076:	f7ff fdeb 	bl	8004c50 <xname_sum>
 800507a:	4603      	mov	r3, r0
 800507c:	4619      	mov	r1, r3
 800507e:	4620      	mov	r0, r4
 8005080:	f7fe f8b5 	bl	80031ee <st_word>
}
 8005084:	bf00      	nop
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	bd90      	pop	{r4, r7, pc}

0800508c <dir_read>:

static FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 8005096:	2304      	movs	r3, #4
 8005098:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	613b      	str	r3, [r7, #16]
	BYTE attr, b;
#if FF_USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
 80050a0:	23ff      	movs	r3, #255	@ 0xff
 80050a2:	757b      	strb	r3, [r7, #21]
 80050a4:	23ff      	movs	r3, #255	@ 0xff
 80050a6:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 80050a8:	e09f      	b.n	80051ea <dir_read+0x15e>
		res = move_window(fs, dp->sect);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80050ae:	4619      	mov	r1, r3
 80050b0:	6938      	ldr	r0, [r7, #16]
 80050b2:	f7fe fa41 	bl	8003538 <move_window>
 80050b6:	4603      	mov	r3, r0
 80050b8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80050ba:	7dfb      	ldrb	r3, [r7, #23]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	f040 809a 	bne.w	80051f6 <dir_read+0x16a>
		b = dp->dir[DIR_Name];	/* Test for the entry type */
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050c6:	781b      	ldrb	r3, [r3, #0]
 80050c8:	75bb      	strb	r3, [r7, #22]
		if (b == 0) {
 80050ca:	7dbb      	ldrb	r3, [r7, #22]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d102      	bne.n	80050d6 <dir_read+0x4a>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 80050d0:	2304      	movs	r3, #4
 80050d2:	75fb      	strb	r3, [r7, #23]
 80050d4:	e096      	b.n	8005204 <dir_read+0x178>
		}
#if FF_FS_EXFAT
		if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	2b04      	cmp	r3, #4
 80050dc:	d118      	bne.n	8005110 <dir_read+0x84>
			if (FF_USE_LABEL && vol) {
				if (b == ET_VLABEL) break;	/* Volume label entry? */
			} else {
				if (b == ET_FILEDIR) {		/* Start of the file entry block? */
 80050de:	7dbb      	ldrb	r3, [r7, #22]
 80050e0:	2b85      	cmp	r3, #133	@ 0x85
 80050e2:	d179      	bne.n	80051d8 <dir_read+0x14c>
					dp->blk_ofs = dp->dptr;	/* Get location of the block */
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	64da      	str	r2, [r3, #76]	@ 0x4c
					res = load_xdir(dp);	/* Load the entry block */
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f7ff fddf 	bl	8004cb0 <load_xdir>
 80050f2:	4603      	mov	r3, r0
 80050f4:	75fb      	strb	r3, [r7, #23]
					if (res == FR_OK) {
 80050f6:	7dfb      	ldrb	r3, [r7, #23]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d17e      	bne.n	80051fa <dir_read+0x16e>
						dp->obj.attr = fs->dirbuf[XDIR_Attr] & AM_MASK;	/* Get attribute */
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	695b      	ldr	r3, [r3, #20]
 8005100:	3304      	adds	r3, #4
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005108:	b2da      	uxtb	r2, r3
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	719a      	strb	r2, [r3, #6]
					}
					break;
 800510e:	e074      	b.n	80051fa <dir_read+0x16e>
				}
			}
		} else
#endif
		{	/* On the FAT/FAT32 volume */
			dp->obj.attr = attr = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005114:	330b      	adds	r3, #11
 8005116:	781b      	ldrb	r3, [r3, #0]
 8005118:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800511c:	73fb      	strb	r3, [r7, #15]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	7bfa      	ldrb	r2, [r7, #15]
 8005122:	719a      	strb	r2, [r3, #6]
#if FF_USE_LFN		/* LFN configuration */
			if (b == DDEM || b == '.' || (int)((attr & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 8005124:	7dbb      	ldrb	r3, [r7, #22]
 8005126:	2be5      	cmp	r3, #229	@ 0xe5
 8005128:	d00e      	beq.n	8005148 <dir_read+0xbc>
 800512a:	7dbb      	ldrb	r3, [r7, #22]
 800512c:	2b2e      	cmp	r3, #46	@ 0x2e
 800512e:	d00b      	beq.n	8005148 <dir_read+0xbc>
 8005130:	7bfb      	ldrb	r3, [r7, #15]
 8005132:	f023 0320 	bic.w	r3, r3, #32
 8005136:	2b08      	cmp	r3, #8
 8005138:	bf0c      	ite	eq
 800513a:	2301      	moveq	r3, #1
 800513c:	2300      	movne	r3, #0
 800513e:	b2db      	uxtb	r3, r3
 8005140:	461a      	mov	r2, r3
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	4293      	cmp	r3, r2
 8005146:	d002      	beq.n	800514e <dir_read+0xc2>
				ord = 0xFF;
 8005148:	23ff      	movs	r3, #255	@ 0xff
 800514a:	757b      	strb	r3, [r7, #21]
 800514c:	e044      	b.n	80051d8 <dir_read+0x14c>
			} else {
				if (attr == AM_LFN) {	/* An LFN entry is found */
 800514e:	7bfb      	ldrb	r3, [r7, #15]
 8005150:	2b0f      	cmp	r3, #15
 8005152:	d12f      	bne.n	80051b4 <dir_read+0x128>
					if (b & LLEF) {		/* Is it start of an LFN sequence? */
 8005154:	7dbb      	ldrb	r3, [r7, #22]
 8005156:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00d      	beq.n	800517a <dir_read+0xee>
						sum = dp->dir[LDIR_Chksum];
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005162:	7b5b      	ldrb	r3, [r3, #13]
 8005164:	753b      	strb	r3, [r7, #20]
						b &= (BYTE)~LLEF; ord = b;
 8005166:	7dbb      	ldrb	r3, [r7, #22]
 8005168:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800516c:	75bb      	strb	r3, [r7, #22]
 800516e:	7dbb      	ldrb	r3, [r7, #22]
 8005170:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					/* Check LFN validity and capture it */
					ord = (b == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800517a:	7dba      	ldrb	r2, [r7, #22]
 800517c:	7d7b      	ldrb	r3, [r7, #21]
 800517e:	429a      	cmp	r2, r3
 8005180:	d115      	bne.n	80051ae <dir_read+0x122>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005186:	330d      	adds	r3, #13
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	7d3a      	ldrb	r2, [r7, #20]
 800518c:	429a      	cmp	r2, r3
 800518e:	d10e      	bne.n	80051ae <dir_read+0x122>
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	691a      	ldr	r2, [r3, #16]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005198:	4619      	mov	r1, r3
 800519a:	4610      	mov	r0, r2
 800519c:	f7ff fb94 	bl	80048c8 <pick_lfn>
 80051a0:	4603      	mov	r3, r0
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <dir_read+0x122>
 80051a6:	7d7b      	ldrb	r3, [r7, #21]
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	e000      	b.n	80051b0 <dir_read+0x124>
 80051ae:	23ff      	movs	r3, #255	@ 0xff
 80051b0:	757b      	strb	r3, [r7, #21]
 80051b2:	e011      	b.n	80051d8 <dir_read+0x14c>
				} else {				/* An SFN entry is found */
					if (ord != 0 || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 80051b4:	7d7b      	ldrb	r3, [r7, #21]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d109      	bne.n	80051ce <dir_read+0x142>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051be:	4618      	mov	r0, r3
 80051c0:	f7ff fcf7 	bl	8004bb2 <sum_sfn>
 80051c4:	4603      	mov	r3, r0
 80051c6:	461a      	mov	r2, r3
 80051c8:	7d3b      	ldrb	r3, [r7, #20]
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d017      	beq.n	80051fe <dir_read+0x172>
						dp->blk_ofs = 0xFFFFFFFF;	/* It has no LFN. */
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f04f 32ff 	mov.w	r2, #4294967295
 80051d4:	64da      	str	r2, [r3, #76]	@ 0x4c
					}
					break;
 80051d6:	e012      	b.n	80051fe <dir_read+0x172>
			if (b != DDEM && b != '.' && attr != AM_LFN && (int)((attr & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 80051d8:	2100      	movs	r1, #0
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7ff f9b3 	bl	8004546 <dir_next>
 80051e0:	4603      	mov	r3, r0
 80051e2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80051e4:	7dfb      	ldrb	r3, [r7, #23]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d10b      	bne.n	8005202 <dir_read+0x176>
	while (dp->sect) {
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	f47f af5b 	bne.w	80050aa <dir_read+0x1e>
 80051f4:	e006      	b.n	8005204 <dir_read+0x178>
		if (res != FR_OK) break;
 80051f6:	bf00      	nop
 80051f8:	e004      	b.n	8005204 <dir_read+0x178>
					break;
 80051fa:	bf00      	nop
 80051fc:	e002      	b.n	8005204 <dir_read+0x178>
					break;
 80051fe:	bf00      	nop
 8005200:	e000      	b.n	8005204 <dir_read+0x178>
		if (res != FR_OK) break;
 8005202:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 8005204:	7dfb      	ldrb	r3, [r7, #23]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d002      	beq.n	8005210 <dir_read+0x184>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	639a      	str	r2, [r3, #56]	@ 0x38
	return res;
 8005210:	7dfb      	ldrb	r3, [r7, #23]
}
 8005212:	4618      	mov	r0, r3
 8005214:	3718      	adds	r7, #24
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <dir_find>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp					/* Pointer to the directory object with the file name */
)
{
 800521a:	b590      	push	{r4, r7, lr}
 800521c:	b089      	sub	sp, #36	@ 0x24
 800521e:	af00      	add	r7, sp, #0
 8005220:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	60fb      	str	r3, [r7, #12]
	BYTE c;
#if FF_USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005228:	2100      	movs	r1, #0
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f7ff f8f7 	bl	800441e <dir_sdi>
 8005230:	4603      	mov	r3, r0
 8005232:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) return res;
 8005234:	7ffb      	ldrb	r3, [r7, #31]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d001      	beq.n	800523e <dir_find+0x24>
 800523a:	7ffb      	ldrb	r3, [r7, #31]
 800523c:	e112      	b.n	8005464 <dir_find+0x24a>
#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	2b04      	cmp	r3, #4
 8005244:	d164      	bne.n	8005310 <dir_find+0xf6>
		BYTE nc;
		UINT di, ni;
		WORD hash = xname_sum(fs->lfnbuf);		/* Hash value of the name to find */
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	4618      	mov	r0, r3
 800524c:	f7ff fd00 	bl	8004c50 <xname_sum>
 8005250:	4603      	mov	r3, r0
 8005252:	813b      	strh	r3, [r7, #8]

		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 8005254:	e04f      	b.n	80052f6 <dir_find+0xdc>
#if FF_MAX_LFN < 255
			if (fs->dirbuf[XDIR_NumName] > FF_MAX_LFN) continue;		/* Skip comparison if inaccessible object name */
#endif
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	3324      	adds	r3, #36	@ 0x24
 800525c:	4618      	mov	r0, r3
 800525e:	f7fd feb3 	bl	8002fc8 <ld_word>
 8005262:	4603      	mov	r3, r0
 8005264:	461a      	mov	r2, r3
 8005266:	893b      	ldrh	r3, [r7, #8]
 8005268:	4293      	cmp	r3, r2
 800526a:	d143      	bne.n	80052f4 <dir_find+0xda>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8005274:	76fb      	strb	r3, [r7, #27]
 8005276:	2340      	movs	r3, #64	@ 0x40
 8005278:	617b      	str	r3, [r7, #20]
 800527a:	2300      	movs	r3, #0
 800527c:	613b      	str	r3, [r7, #16]
 800527e:	e028      	b.n	80052d2 <dir_find+0xb8>
				if ((di % SZDIRE) == 0) di += 2;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f003 031f 	and.w	r3, r3, #31
 8005286:	2b00      	cmp	r3, #0
 8005288:	d102      	bne.n	8005290 <dir_find+0x76>
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	3302      	adds	r3, #2
 800528e:	617b      	str	r3, [r7, #20]
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	695a      	ldr	r2, [r3, #20]
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	4413      	add	r3, r2
 8005298:	4618      	mov	r0, r3
 800529a:	f7fd fe95 	bl	8002fc8 <ld_word>
 800529e:	4603      	mov	r3, r0
 80052a0:	4618      	mov	r0, r3
 80052a2:	f002 faef 	bl	8007884 <ff_wtoupper>
 80052a6:	4604      	mov	r4, r0
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	005b      	lsls	r3, r3, #1
 80052b0:	4413      	add	r3, r2
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	4618      	mov	r0, r3
 80052b6:	f002 fae5 	bl	8007884 <ff_wtoupper>
 80052ba:	4603      	mov	r3, r0
 80052bc:	429c      	cmp	r4, r3
 80052be:	d10c      	bne.n	80052da <dir_find+0xc0>
			for (nc = fs->dirbuf[XDIR_NumName], di = SZDIRE * 2, ni = 0; nc; nc--, di += 2, ni++) {	/* Compare the name */
 80052c0:	7efb      	ldrb	r3, [r7, #27]
 80052c2:	3b01      	subs	r3, #1
 80052c4:	76fb      	strb	r3, [r7, #27]
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	3302      	adds	r3, #2
 80052ca:	617b      	str	r3, [r7, #20]
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	3301      	adds	r3, #1
 80052d0:	613b      	str	r3, [r7, #16]
 80052d2:	7efb      	ldrb	r3, [r7, #27]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1d3      	bne.n	8005280 <dir_find+0x66>
 80052d8:	e000      	b.n	80052dc <dir_find+0xc2>
				if (ff_wtoupper(ld_word(fs->dirbuf + di)) != ff_wtoupper(fs->lfnbuf[ni])) break;
 80052da:	bf00      	nop
			}
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 80052dc:	7efb      	ldrb	r3, [r7, #27]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d109      	bne.n	80052f6 <dir_find+0xdc>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	691a      	ldr	r2, [r3, #16]
 80052e6:	693b      	ldr	r3, [r7, #16]
 80052e8:	005b      	lsls	r3, r3, #1
 80052ea:	4413      	add	r3, r2
 80052ec:	881b      	ldrh	r3, [r3, #0]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00b      	beq.n	800530a <dir_find+0xf0>
 80052f2:	e000      	b.n	80052f6 <dir_find+0xdc>
			if (ld_word(fs->dirbuf + XDIR_NameHash) != hash) continue;	/* Skip comparison if hash mismatched */
 80052f4:	bf00      	nop
		while ((res = DIR_READ_FILE(dp)) == FR_OK) {	/* Read an item */
 80052f6:	2100      	movs	r1, #0
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7ff fec7 	bl	800508c <dir_read>
 80052fe:	4603      	mov	r3, r0
 8005300:	77fb      	strb	r3, [r7, #31]
 8005302:	7ffb      	ldrb	r3, [r7, #31]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d0a6      	beq.n	8005256 <dir_find+0x3c>
 8005308:	e000      	b.n	800530c <dir_find+0xf2>
			if (nc == 0 && !fs->lfnbuf[ni]) break;	/* Name matched? */
 800530a:	bf00      	nop
		}
		return res;
 800530c:	7ffb      	ldrb	r3, [r7, #31]
 800530e:	e0a9      	b.n	8005464 <dir_find+0x24a>
	}
#endif
	/* On the FAT/FAT32 volume */
#if FF_USE_LFN
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005310:	23ff      	movs	r3, #255	@ 0xff
 8005312:	773b      	strb	r3, [r7, #28]
 8005314:	7f3b      	ldrb	r3, [r7, #28]
 8005316:	777b      	strb	r3, [r7, #29]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f04f 32ff 	mov.w	r2, #4294967295
 800531e:	64da      	str	r2, [r3, #76]	@ 0x4c
#endif
	do {
		res = move_window(fs, dp->sect);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005324:	4619      	mov	r1, r3
 8005326:	68f8      	ldr	r0, [r7, #12]
 8005328:	f7fe f906 	bl	8003538 <move_window>
 800532c:	4603      	mov	r3, r0
 800532e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) break;
 8005330:	7ffb      	ldrb	r3, [r7, #31]
 8005332:	2b00      	cmp	r3, #0
 8005334:	f040 8090 	bne.w	8005458 <dir_find+0x23e>
		c = dp->dir[DIR_Name];
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	77bb      	strb	r3, [r7, #30]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached end of directory table */
 8005340:	7fbb      	ldrb	r3, [r7, #30]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d102      	bne.n	800534c <dir_find+0x132>
 8005346:	2304      	movs	r3, #4
 8005348:	77fb      	strb	r3, [r7, #31]
 800534a:	e08a      	b.n	8005462 <dir_find+0x248>
#if FF_USE_LFN		/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005350:	330b      	adds	r3, #11
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005358:	72fb      	strb	r3, [r7, #11]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	7afa      	ldrb	r2, [r7, #11]
 800535e:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8005360:	7fbb      	ldrb	r3, [r7, #30]
 8005362:	2be5      	cmp	r3, #229	@ 0xe5
 8005364:	d007      	beq.n	8005376 <dir_find+0x15c>
 8005366:	7afb      	ldrb	r3, [r7, #11]
 8005368:	f003 0308 	and.w	r3, r3, #8
 800536c:	2b00      	cmp	r3, #0
 800536e:	d009      	beq.n	8005384 <dir_find+0x16a>
 8005370:	7afb      	ldrb	r3, [r7, #11]
 8005372:	2b0f      	cmp	r3, #15
 8005374:	d006      	beq.n	8005384 <dir_find+0x16a>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005376:	23ff      	movs	r3, #255	@ 0xff
 8005378:	777b      	strb	r3, [r7, #29]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f04f 32ff 	mov.w	r2, #4294967295
 8005380:	64da      	str	r2, [r3, #76]	@ 0x4c
 8005382:	e05e      	b.n	8005442 <dir_find+0x228>
		} else {
			if (a == AM_LFN) {			/* Is it an LFN entry? */
 8005384:	7afb      	ldrb	r3, [r7, #11]
 8005386:	2b0f      	cmp	r3, #15
 8005388:	d136      	bne.n	80053f8 <dir_find+0x1de>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8005390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005394:	2b00      	cmp	r3, #0
 8005396:	d154      	bne.n	8005442 <dir_find+0x228>
					if (c & LLEF) {		/* Is it start of an entry set? */
 8005398:	7fbb      	ldrb	r3, [r7, #30]
 800539a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00d      	beq.n	80053be <dir_find+0x1a4>
						c &= (BYTE)~LLEF;
 80053a2:	7fbb      	ldrb	r3, [r7, #30]
 80053a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053a8:	77bb      	strb	r3, [r7, #30]
						ord = c;					/* Number of LFN entries */
 80053aa:	7fbb      	ldrb	r3, [r7, #30]
 80053ac:	777b      	strb	r3, [r7, #29]
						dp->blk_ofs = dp->dptr;		/* Start offset of LFN */
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	64da      	str	r2, [r3, #76]	@ 0x4c
						sum = dp->dir[LDIR_Chksum];	/* Sum of the SFN */
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ba:	7b5b      	ldrb	r3, [r3, #13]
 80053bc:	773b      	strb	r3, [r7, #28]
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 80053be:	7fba      	ldrb	r2, [r7, #30]
 80053c0:	7f7b      	ldrb	r3, [r7, #29]
 80053c2:	429a      	cmp	r2, r3
 80053c4:	d115      	bne.n	80053f2 <dir_find+0x1d8>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053ca:	330d      	adds	r3, #13
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	7f3a      	ldrb	r2, [r7, #28]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d10e      	bne.n	80053f2 <dir_find+0x1d8>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	691a      	ldr	r2, [r3, #16]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053dc:	4619      	mov	r1, r3
 80053de:	4610      	mov	r0, r2
 80053e0:	f7ff fa02 	bl	80047e8 <cmp_lfn>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <dir_find+0x1d8>
 80053ea:	7f7b      	ldrb	r3, [r7, #29]
 80053ec:	3b01      	subs	r3, #1
 80053ee:	b2db      	uxtb	r3, r3
 80053f0:	e000      	b.n	80053f4 <dir_find+0x1da>
 80053f2:	23ff      	movs	r3, #255	@ 0xff
 80053f4:	777b      	strb	r3, [r7, #29]
 80053f6:	e024      	b.n	8005442 <dir_find+0x228>
				}
			} else {					/* SFN entry */
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80053f8:	7f7b      	ldrb	r3, [r7, #29]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d109      	bne.n	8005412 <dir_find+0x1f8>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005402:	4618      	mov	r0, r3
 8005404:	f7ff fbd5 	bl	8004bb2 <sum_sfn>
 8005408:	4603      	mov	r3, r0
 800540a:	461a      	mov	r2, r3
 800540c:	7f3b      	ldrb	r3, [r7, #28]
 800540e:	4293      	cmp	r3, r2
 8005410:	d024      	beq.n	800545c <dir_find+0x242>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10a      	bne.n	8005436 <dir_find+0x21c>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	3340      	adds	r3, #64	@ 0x40
 8005428:	220b      	movs	r2, #11
 800542a:	4619      	mov	r1, r3
 800542c:	f002 faba 	bl	80079a4 <memcmp>
 8005430:	4603      	mov	r3, r0
 8005432:	2b00      	cmp	r3, #0
 8005434:	d014      	beq.n	8005460 <dir_find+0x246>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Not matched, reset LFN sequence */
 8005436:	23ff      	movs	r3, #255	@ 0xff
 8005438:	777b      	strb	r3, [r7, #29]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	f04f 32ff 	mov.w	r2, #4294967295
 8005440:	64da      	str	r2, [r3, #76]	@ 0x4c
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !memcmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8005442:	2100      	movs	r1, #0
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f7ff f87e 	bl	8004546 <dir_next>
 800544a:	4603      	mov	r3, r0
 800544c:	77fb      	strb	r3, [r7, #31]
	} while (res == FR_OK);
 800544e:	7ffb      	ldrb	r3, [r7, #31]
 8005450:	2b00      	cmp	r3, #0
 8005452:	f43f af65 	beq.w	8005320 <dir_find+0x106>
 8005456:	e004      	b.n	8005462 <dir_find+0x248>
		if (res != FR_OK) break;
 8005458:	bf00      	nop
 800545a:	e002      	b.n	8005462 <dir_find+0x248>
				if (ord == 0 && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800545c:	bf00      	nop
 800545e:	e000      	b.n	8005462 <dir_find+0x248>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !memcmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005460:	bf00      	nop

	return res;
 8005462:	7ffb      	ldrb	r3, [r7, #31]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3724      	adds	r7, #36	@ 0x24
 8005468:	46bd      	mov	sp, r7
 800546a:	bd90      	pop	{r4, r7, pc}

0800546c <dir_register>:
/*-----------------------------------------------------------------------*/

static FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp						/* Target directory with object name to be created */
)
{
 800546c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005470:	b0a0      	sub	sp, #128	@ 0x80
 8005472:	af00      	add	r7, sp, #0
 8005474:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	66fb      	str	r3, [r7, #108]	@ 0x6c
#if FF_USE_LFN		/* LFN configuration */
	UINT n, len, n_ent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 8005482:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <dir_register+0x22>
 800548a:	2306      	movs	r3, #6
 800548c:	e198      	b.n	80057c0 <dir_register+0x354>
	for (len = 0; fs->lfnbuf[len]; len++) ;	/* Get lfn length */
 800548e:	2300      	movs	r3, #0
 8005490:	677b      	str	r3, [r7, #116]	@ 0x74
 8005492:	e002      	b.n	800549a <dir_register+0x2e>
 8005494:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005496:	3301      	adds	r3, #1
 8005498:	677b      	str	r3, [r7, #116]	@ 0x74
 800549a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800549c:	691a      	ldr	r2, [r3, #16]
 800549e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054a0:	005b      	lsls	r3, r3, #1
 80054a2:	4413      	add	r3, r2
 80054a4:	881b      	ldrh	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1f4      	bne.n	8005494 <dir_register+0x28>

#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* On the exFAT volume */
 80054aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	2b04      	cmp	r3, #4
 80054b0:	f040 80aa 	bne.w	8005608 <dir_register+0x19c>
		n_ent = (len + 14) / 15 + 2;	/* Number of entries to allocate (85+C0+C1s) */
 80054b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80054b6:	330e      	adds	r3, #14
 80054b8:	4aa7      	ldr	r2, [pc, #668]	@ (8005758 <dir_register+0x2ec>)
 80054ba:	fba2 2303 	umull	r2, r3, r2, r3
 80054be:	08db      	lsrs	r3, r3, #3
 80054c0:	3302      	adds	r3, #2
 80054c2:	673b      	str	r3, [r7, #112]	@ 0x70
		res = dir_alloc(dp, n_ent);		/* Allocate directory entries */
 80054c4:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7ff f8f2 	bl	80046b0 <dir_alloc>
 80054cc:	4603      	mov	r3, r0
 80054ce:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res != FR_OK) return res;
 80054d2:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d002      	beq.n	80054e0 <dir_register+0x74>
 80054da:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80054de:	e16f      	b.n	80057c0 <dir_register+0x354>
		dp->blk_ofs = dp->dptr - SZDIRE * (n_ent - 1);	/* Set the allocated entry block offset */
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80054e4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80054e6:	3b01      	subs	r3, #1
 80054e8:	015b      	lsls	r3, r3, #5
 80054ea:	1ad2      	subs	r2, r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	64da      	str	r2, [r3, #76]	@ 0x4c

		if (dp->obj.stat & 4) {			/* Has the directory been stretched by new allocation? */
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	79db      	ldrb	r3, [r3, #7]
 80054f4:	f003 0304 	and.w	r3, r3, #4
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d07b      	beq.n	80055f4 <dir_register+0x188>
			dp->obj.stat &= ~4;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	79db      	ldrb	r3, [r3, #7]
 8005500:	f023 0304 	bic.w	r3, r3, #4
 8005504:	b2da      	uxtb	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	71da      	strb	r2, [r3, #7]
			res = fill_first_frag(&dp->obj);	/* Fill the first fragment on the FAT if needed */
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4618      	mov	r0, r3
 800550e:	f7fe fcbd 	bl	8003e8c <fill_first_frag>
 8005512:	4603      	mov	r3, r0
 8005514:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 8005518:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800551c:	2b00      	cmp	r3, #0
 800551e:	d002      	beq.n	8005526 <dir_register+0xba>
 8005520:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005524:	e14c      	b.n	80057c0 <dir_register+0x354>
			res = fill_last_frag(&dp->obj, dp->clust, 0xFFFFFFFF);	/* Fill the last fragment on the FAT if needed */
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800552c:	f04f 32ff 	mov.w	r2, #4294967295
 8005530:	4619      	mov	r1, r3
 8005532:	f7fe fcda 	bl	8003eea <fill_last_frag>
 8005536:	4603      	mov	r3, r0
 8005538:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) return res;
 800553c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005540:	2b00      	cmp	r3, #0
 8005542:	d002      	beq.n	800554a <dir_register+0xde>
 8005544:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005548:	e13a      	b.n	80057c0 <dir_register+0x354>
			if (dp->obj.sclust != 0) {		/* Is it a sub-directory? */
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d050      	beq.n	80055f4 <dir_register+0x188>
				DIR dj;

				res = load_obj_xdir(&dj, &dp->obj);	/* Load the object status */
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	f107 0308 	add.w	r3, r7, #8
 8005558:	4611      	mov	r1, r2
 800555a:	4618      	mov	r0, r3
 800555c:	f7ff fc99 	bl	8004e92 <load_obj_xdir>
 8005560:	4603      	mov	r3, r0
 8005562:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) return res;
 8005566:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800556a:	2b00      	cmp	r3, #0
 800556c:	d002      	beq.n	8005574 <dir_register+0x108>
 800556e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005572:	e125      	b.n	80057c0 <dir_register+0x354>
				dp->obj.objsize += (DWORD)fs->csize * SS(fs);		/* Increase the directory size by cluster size */
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800557a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800557c:	8949      	ldrh	r1, [r1, #10]
 800557e:	4608      	mov	r0, r1
 8005580:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8005582:	8989      	ldrh	r1, [r1, #12]
 8005584:	fb00 f101 	mul.w	r1, r0, r1
 8005588:	2000      	movs	r0, #0
 800558a:	460c      	mov	r4, r1
 800558c:	4605      	mov	r5, r0
 800558e:	eb12 0804 	adds.w	r8, r2, r4
 8005592:	eb43 0905 	adc.w	r9, r3, r5
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	e9c3 8904 	strd	r8, r9, [r3, #16]
				st_qword(fs->dirbuf + XDIR_FileSize, dp->obj.objsize);
 800559c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80055aa:	4608      	mov	r0, r1
 80055ac:	f7fd fe64 	bl	8003278 <st_qword>
				st_qword(fs->dirbuf + XDIR_ValidFileSize, dp->obj.objsize);
 80055b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80055be:	4608      	mov	r0, r1
 80055c0:	f7fd fe5a 	bl	8003278 <st_qword>
				fs->dirbuf[XDIR_GenFlags] = dp->obj.stat | 1;		/* Update the allocation status */
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	79da      	ldrb	r2, [r3, #7]
 80055c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	3321      	adds	r3, #33	@ 0x21
 80055ce:	f042 0201 	orr.w	r2, r2, #1
 80055d2:	b2d2      	uxtb	r2, r2
 80055d4:	701a      	strb	r2, [r3, #0]
				res = store_xdir(&dj);				/* Store the object status */
 80055d6:	f107 0308 	add.w	r3, r7, #8
 80055da:	4618      	mov	r0, r3
 80055dc:	f7ff fc92 	bl	8004f04 <store_xdir>
 80055e0:	4603      	mov	r3, r0
 80055e2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) return res;
 80055e6:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d002      	beq.n	80055f4 <dir_register+0x188>
 80055ee:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80055f2:	e0e5      	b.n	80057c0 <dir_register+0x354>
			}
		}

		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
 80055f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055f6:	695a      	ldr	r2, [r3, #20]
 80055f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	4619      	mov	r1, r3
 80055fe:	4610      	mov	r0, r2
 8005600:	f7ff fcdb 	bl	8004fba <create_xdir>
		return FR_OK;
 8005604:	2300      	movs	r3, #0
 8005606:	e0db      	b.n	80057c0 <dir_register+0x354>
	}
#endif
	/* On the FAT/FAT32 volume */
	memcpy(sn, dp->fn, 12);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 800560e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8005612:	6810      	ldr	r0, [r2, #0]
 8005614:	6851      	ldr	r1, [r2, #4]
 8005616:	6892      	ldr	r2, [r2, #8]
 8005618:	c307      	stmia	r3!, {r0, r1, r2}
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800561a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d033      	beq.n	800568e <dir_register+0x222>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2240      	movs	r2, #64	@ 0x40
 800562a:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		for (n = 1; n < 100; n++) {
 800562e:	2301      	movs	r3, #1
 8005630:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005632:	e016      	b.n	8005662 <dir_register+0x1f6>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 800563a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800563c:	691a      	ldr	r2, [r3, #16]
 800563e:	f107 015c 	add.w	r1, r7, #92	@ 0x5c
 8005642:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005644:	f7ff fa10 	bl	8004a68 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7ff fde6 	bl	800521a <dir_find>
 800564e:	4603      	mov	r3, r0
 8005650:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			if (res != FR_OK) break;
 8005654:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005658:	2b00      	cmp	r3, #0
 800565a:	d106      	bne.n	800566a <dir_register+0x1fe>
		for (n = 1; n < 100; n++) {
 800565c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800565e:	3301      	adds	r3, #1
 8005660:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005662:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005664:	2b63      	cmp	r3, #99	@ 0x63
 8005666:	d9e5      	bls.n	8005634 <dir_register+0x1c8>
 8005668:	e000      	b.n	800566c <dir_register+0x200>
			if (res != FR_OK) break;
 800566a:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800566c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800566e:	2b64      	cmp	r3, #100	@ 0x64
 8005670:	d101      	bne.n	8005676 <dir_register+0x20a>
 8005672:	2307      	movs	r3, #7
 8005674:	e0a4      	b.n	80057c0 <dir_register+0x354>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8005676:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800567a:	2b04      	cmp	r3, #4
 800567c:	d002      	beq.n	8005684 <dir_register+0x218>
 800567e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005682:	e09d      	b.n	80057c0 <dir_register+0x354>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8005684:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
	}

	/* Create an SFN with/without LFNs. */
	n_ent = (sn[NSFLAG] & NS_LFN) ? (len + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800568e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005692:	f003 0302 	and.w	r3, r3, #2
 8005696:	2b00      	cmp	r3, #0
 8005698:	d007      	beq.n	80056aa <dir_register+0x23e>
 800569a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800569c:	330c      	adds	r3, #12
 800569e:	4a2f      	ldr	r2, [pc, #188]	@ (800575c <dir_register+0x2f0>)
 80056a0:	fba2 2303 	umull	r2, r3, r2, r3
 80056a4:	089b      	lsrs	r3, r3, #2
 80056a6:	3301      	adds	r3, #1
 80056a8:	e000      	b.n	80056ac <dir_register+0x240>
 80056aa:	2301      	movs	r3, #1
 80056ac:	673b      	str	r3, [r7, #112]	@ 0x70
	res = dir_alloc(dp, n_ent);		/* Allocate entries */
 80056ae:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f7fe fffd 	bl	80046b0 <dir_alloc>
 80056b6:	4603      	mov	r3, r0
 80056b8:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
	if (res == FR_OK && --n_ent) {	/* Set LFN entry if needed */
 80056bc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d14e      	bne.n	8005762 <dir_register+0x2f6>
 80056c4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056c6:	3b01      	subs	r3, #1
 80056c8:	673b      	str	r3, [r7, #112]	@ 0x70
 80056ca:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d048      	beq.n	8005762 <dir_register+0x2f6>
		res = dir_sdi(dp, dp->dptr - n_ent * SZDIRE);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056d4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80056d6:	015b      	lsls	r3, r3, #5
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	4619      	mov	r1, r3
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f7fe fe9e 	bl	800441e <dir_sdi>
 80056e2:	4603      	mov	r3, r0
 80056e4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 80056e8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d138      	bne.n	8005762 <dir_register+0x2f6>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3340      	adds	r3, #64	@ 0x40
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7ff fa5c 	bl	8004bb2 <sum_sfn>
 80056fa:	4603      	mov	r3, r0
 80056fc:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005704:	4619      	mov	r1, r3
 8005706:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005708:	f7fd ff16 	bl	8003538 <move_window>
 800570c:	4603      	mov	r3, r0
 800570e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
				if (res != FR_OK) break;
 8005712:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005716:	2b00      	cmp	r3, #0
 8005718:	d122      	bne.n	8005760 <dir_register+0x2f4>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)n_ent, sum);
 800571a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800571c:	6918      	ldr	r0, [r3, #16]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8005722:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005724:	b2da      	uxtb	r2, r3
 8005726:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800572a:	f7ff f935 	bl	8004998 <put_lfn>
				fs->wflag = 1;
 800572e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005730:	2201      	movs	r2, #1
 8005732:	711a      	strb	r2, [r3, #4]
				res = dir_next(dp, 0);	/* Next entry */
 8005734:	2100      	movs	r1, #0
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f7fe ff05 	bl	8004546 <dir_next>
 800573c:	4603      	mov	r3, r0
 800573e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
			} while (res == FR_OK && --n_ent);
 8005742:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005746:	2b00      	cmp	r3, #0
 8005748:	d10b      	bne.n	8005762 <dir_register+0x2f6>
 800574a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800574c:	3b01      	subs	r3, #1
 800574e:	673b      	str	r3, [r7, #112]	@ 0x70
 8005750:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005752:	2b00      	cmp	r3, #0
 8005754:	d1d4      	bne.n	8005700 <dir_register+0x294>
 8005756:	e004      	b.n	8005762 <dir_register+0x2f6>
 8005758:	88888889 	.word	0x88888889
 800575c:	4ec4ec4f 	.word	0x4ec4ec4f
				if (res != FR_OK) break;
 8005760:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005762:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005766:	2b00      	cmp	r3, #0
 8005768:	d128      	bne.n	80057bc <dir_register+0x350>
		res = move_window(fs, dp->sect);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800576e:	4619      	mov	r1, r3
 8005770:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005772:	f7fd fee1 	bl	8003538 <move_window>
 8005776:	4603      	mov	r3, r0
 8005778:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
		if (res == FR_OK) {
 800577c:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005780:	2b00      	cmp	r3, #0
 8005782:	d11b      	bne.n	80057bc <dir_register+0x350>
			memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005788:	2220      	movs	r2, #32
 800578a:	2100      	movs	r1, #0
 800578c:	4618      	mov	r0, r3
 800578e:	f002 f919 	bl	80079c4 <memset>
			memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	3340      	adds	r3, #64	@ 0x40
 800579a:	220b      	movs	r2, #11
 800579c:	4619      	mov	r1, r3
 800579e:	f002 f94b 	bl	8007a38 <memcpy>
#if FF_USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 204b 	ldrb.w	r2, [r3, #75]	@ 0x4b
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ac:	330c      	adds	r3, #12
 80057ae:	f002 0218 	and.w	r2, r2, #24
 80057b2:	b2d2      	uxtb	r2, r2
 80057b4:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80057b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80057b8:	2201      	movs	r2, #1
 80057ba:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 80057bc:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3780      	adds	r7, #128	@ 0x80
 80057c4:	46bd      	mov	sp, r7
 80057c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80057ca:	bf00      	nop

080057cc <get_fileinfo>:

static void get_fileinfo (
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno		/* Pointer to the file information to be filled */
)
{
 80057cc:	b5b0      	push	{r4, r5, r7, lr}
 80057ce:	b08a      	sub	sp, #40	@ 0x28
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
	UINT si, di;
#if FF_USE_LFN
	BYTE lcf;
	WCHAR wc, hs;
	FATFS *fs = dp->obj.fs;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	613b      	str	r3, [r7, #16]
#else
	TCHAR c;
#endif


	fno->fname[0] = 0;			/* Invaidate file info */
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	2200      	movs	r2, #0
 80057e0:	769a      	strb	r2, [r3, #26]
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f000 81b6 	beq.w	8005b58 <get_fileinfo+0x38c>

#if FF_USE_LFN		/* LFN configuration */
#if FF_FS_EXFAT
	if (fs->fs_type == FS_EXFAT) {	/* exFAT volume */
 80057ec:	693b      	ldr	r3, [r7, #16]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	2b04      	cmp	r3, #4
 80057f2:	f040 80a6 	bne.w	8005942 <get_fileinfo+0x176>
		UINT nc = 0;
 80057f6:	2300      	movs	r3, #0
 80057f8:	617b      	str	r3, [r7, #20]

		si = SZDIRE * 2; di = 0;	/* 1st C1 entry in the entry block */
 80057fa:	2340      	movs	r3, #64	@ 0x40
 80057fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80057fe:	2300      	movs	r3, #0
 8005800:	623b      	str	r3, [r7, #32]
		hs = 0;
 8005802:	2300      	movs	r3, #0
 8005804:	837b      	strh	r3, [r7, #26]
		while (nc < fs->dirbuf[XDIR_NumName]) {
 8005806:	e048      	b.n	800589a <get_fileinfo+0xce>
			if (si >= MAXDIRB(FF_MAX_LFN)) {	/* Truncated directory block? */
 8005808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580a:	f5b3 7f18 	cmp.w	r3, #608	@ 0x260
 800580e:	d302      	bcc.n	8005816 <get_fileinfo+0x4a>
				di = 0; break;
 8005810:	2300      	movs	r3, #0
 8005812:	623b      	str	r3, [r7, #32]
 8005814:	e049      	b.n	80058aa <get_fileinfo+0xde>
			}
			if ((si % SZDIRE) == 0) si += 2;	/* Skip entry type field */
 8005816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005818:	f003 031f 	and.w	r3, r3, #31
 800581c:	2b00      	cmp	r3, #0
 800581e:	d102      	bne.n	8005826 <get_fileinfo+0x5a>
 8005820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005822:	3302      	adds	r3, #2
 8005824:	627b      	str	r3, [r7, #36]	@ 0x24
			wc = ld_word(fs->dirbuf + si); si += 2; nc++;	/* Get a character */
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	695a      	ldr	r2, [r3, #20]
 800582a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582c:	4413      	add	r3, r2
 800582e:	4618      	mov	r0, r3
 8005830:	f7fd fbca 	bl	8002fc8 <ld_word>
 8005834:	4603      	mov	r3, r0
 8005836:	83bb      	strh	r3, [r7, #28]
 8005838:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800583a:	3302      	adds	r3, #2
 800583c:	627b      	str	r3, [r7, #36]	@ 0x24
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	3301      	adds	r3, #1
 8005842:	617b      	str	r3, [r7, #20]
			if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 8005844:	8b7b      	ldrh	r3, [r7, #26]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d10a      	bne.n	8005860 <get_fileinfo+0x94>
 800584a:	8bbb      	ldrh	r3, [r7, #28]
 800584c:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 8005850:	d306      	bcc.n	8005860 <get_fileinfo+0x94>
 8005852:	8bbb      	ldrh	r3, [r7, #28]
 8005854:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8005858:	d202      	bcs.n	8005860 <get_fileinfo+0x94>
				hs = wc; continue;				/* Get low surrogate */
 800585a:	8bbb      	ldrh	r3, [r7, #28]
 800585c:	837b      	strh	r3, [r7, #26]
 800585e:	e01c      	b.n	800589a <get_fileinfo+0xce>
			}
			nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 8005860:	8b7b      	ldrh	r3, [r7, #26]
 8005862:	041a      	lsls	r2, r3, #16
 8005864:	8bbb      	ldrh	r3, [r7, #28]
 8005866:	ea42 0003 	orr.w	r0, r2, r3
 800586a:	6a3b      	ldr	r3, [r7, #32]
 800586c:	3318      	adds	r3, #24
 800586e:	683a      	ldr	r2, [r7, #0]
 8005870:	4413      	add	r3, r2
 8005872:	1c99      	adds	r1, r3, #2
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 800587a:	461a      	mov	r2, r3
 800587c:	f7fd fde8 	bl	8003450 <put_utf>
 8005880:	60f8      	str	r0, [r7, #12]
			if (nw == 0) {						/* Buffer overflow or wrong char? */
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d102      	bne.n	800588e <get_fileinfo+0xc2>
				di = 0; break;
 8005888:	2300      	movs	r3, #0
 800588a:	623b      	str	r3, [r7, #32]
 800588c:	e00d      	b.n	80058aa <get_fileinfo+0xde>
			}
			di += nw;
 800588e:	6a3a      	ldr	r2, [r7, #32]
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	4413      	add	r3, r2
 8005894:	623b      	str	r3, [r7, #32]
			hs = 0;
 8005896:	2300      	movs	r3, #0
 8005898:	837b      	strh	r3, [r7, #26]
		while (nc < fs->dirbuf[XDIR_NumName]) {
 800589a:	693b      	ldr	r3, [r7, #16]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	3323      	adds	r3, #35	@ 0x23
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	461a      	mov	r2, r3
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d3ae      	bcc.n	8005808 <get_fileinfo+0x3c>
		}
		if (hs != 0) di = 0;					/* Broken surrogate pair? */
 80058aa:	8b7b      	ldrh	r3, [r7, #26]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <get_fileinfo+0xe8>
 80058b0:	2300      	movs	r3, #0
 80058b2:	623b      	str	r3, [r7, #32]
		if (di == 0) fno->fname[di++] = '\?';	/* Inaccessible object name? */
 80058b4:	6a3b      	ldr	r3, [r7, #32]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d106      	bne.n	80058c8 <get_fileinfo+0xfc>
 80058ba:	6a3b      	ldr	r3, [r7, #32]
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	623a      	str	r2, [r7, #32]
 80058c0:	683a      	ldr	r2, [r7, #0]
 80058c2:	4413      	add	r3, r2
 80058c4:	223f      	movs	r2, #63	@ 0x3f
 80058c6:	769a      	strb	r2, [r3, #26]
		fno->fname[di] = 0;						/* Terminate the name */
 80058c8:	683a      	ldr	r2, [r7, #0]
 80058ca:	6a3b      	ldr	r3, [r7, #32]
 80058cc:	4413      	add	r3, r2
 80058ce:	331a      	adds	r3, #26
 80058d0:	2200      	movs	r2, #0
 80058d2:	701a      	strb	r2, [r3, #0]
		fno->altname[0] = 0;					/* exFAT does not support SFN */
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	2200      	movs	r2, #0
 80058d8:	735a      	strb	r2, [r3, #13]

		fno->fattrib = fs->dirbuf[XDIR_Attr] & AM_MASKX;		/* Attribute */
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	695b      	ldr	r3, [r3, #20]
 80058de:	3304      	adds	r3, #4
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	f003 0337 	and.w	r3, r3, #55	@ 0x37
 80058e6:	b2da      	uxtb	r2, r3
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	731a      	strb	r2, [r3, #12]
		fno->fsize = (fno->fattrib & AM_DIR) ? 0 : ld_qword(fs->dirbuf + XDIR_FileSize);	/* Size */
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	7b1b      	ldrb	r3, [r3, #12]
 80058f0:	f003 0310 	and.w	r3, r3, #16
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d108      	bne.n	800590a <get_fileinfo+0x13e>
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	3338      	adds	r3, #56	@ 0x38
 80058fe:	4618      	mov	r0, r3
 8005900:	f7fd fb9c 	bl	800303c <ld_qword>
 8005904:	4602      	mov	r2, r0
 8005906:	460b      	mov	r3, r1
 8005908:	e003      	b.n	8005912 <get_fileinfo+0x146>
 800590a:	f04f 0200 	mov.w	r2, #0
 800590e:	f04f 0300 	mov.w	r3, #0
 8005912:	6839      	ldr	r1, [r7, #0]
 8005914:	e9c1 2300 	strd	r2, r3, [r1]
		fno->ftime = ld_word(fs->dirbuf + XDIR_ModTime + 0);	/* Time */
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	695b      	ldr	r3, [r3, #20]
 800591c:	330c      	adds	r3, #12
 800591e:	4618      	mov	r0, r3
 8005920:	f7fd fb52 	bl	8002fc8 <ld_word>
 8005924:	4603      	mov	r3, r0
 8005926:	461a      	mov	r2, r3
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	815a      	strh	r2, [r3, #10]
		fno->fdate = ld_word(fs->dirbuf + XDIR_ModTime + 2);	/* Date */
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	330e      	adds	r3, #14
 8005932:	4618      	mov	r0, r3
 8005934:	f7fd fb48 	bl	8002fc8 <ld_word>
 8005938:	4603      	mov	r3, r0
 800593a:	461a      	mov	r2, r3
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	811a      	strh	r2, [r3, #8]
		return;
 8005940:	e10b      	b.n	8005b5a <get_fileinfo+0x38e>
	} else
#endif
	{	/* FAT/FAT32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800594a:	d04d      	beq.n	80059e8 <get_fileinfo+0x21c>
			si = di = 0;
 800594c:	2300      	movs	r3, #0
 800594e:	623b      	str	r3, [r7, #32]
 8005950:	6a3b      	ldr	r3, [r7, #32]
 8005952:	627b      	str	r3, [r7, #36]	@ 0x24
			hs = 0;
 8005954:	2300      	movs	r3, #0
 8005956:	837b      	strh	r3, [r7, #26]
			while (fs->lfnbuf[si] != 0) {
 8005958:	e033      	b.n	80059c2 <get_fileinfo+0x1f6>
				wc = fs->lfnbuf[si++];		/* Get an LFN character (UTF-16) */
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	691a      	ldr	r2, [r3, #16]
 800595e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005960:	1c59      	adds	r1, r3, #1
 8005962:	6279      	str	r1, [r7, #36]	@ 0x24
 8005964:	005b      	lsls	r3, r3, #1
 8005966:	4413      	add	r3, r2
 8005968:	881b      	ldrh	r3, [r3, #0]
 800596a:	83bb      	strh	r3, [r7, #28]
				if (hs == 0 && IsSurrogate(wc)) {	/* Is it a surrogate? */
 800596c:	8b7b      	ldrh	r3, [r7, #26]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10a      	bne.n	8005988 <get_fileinfo+0x1bc>
 8005972:	8bbb      	ldrh	r3, [r7, #28]
 8005974:	f5b3 4f58 	cmp.w	r3, #55296	@ 0xd800
 8005978:	d306      	bcc.n	8005988 <get_fileinfo+0x1bc>
 800597a:	8bbb      	ldrh	r3, [r7, #28]
 800597c:	f5b3 4f60 	cmp.w	r3, #57344	@ 0xe000
 8005980:	d202      	bcs.n	8005988 <get_fileinfo+0x1bc>
					hs = wc; continue;		/* Get low surrogate */
 8005982:	8bbb      	ldrh	r3, [r7, #28]
 8005984:	837b      	strh	r3, [r7, #26]
 8005986:	e01c      	b.n	80059c2 <get_fileinfo+0x1f6>
				}
				nw = put_utf((DWORD)hs << 16 | wc, &fno->fname[di], FF_LFN_BUF - di);	/* Store it in API encoding */
 8005988:	8b7b      	ldrh	r3, [r7, #26]
 800598a:	041a      	lsls	r2, r3, #16
 800598c:	8bbb      	ldrh	r3, [r7, #28]
 800598e:	ea42 0003 	orr.w	r0, r2, r3
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	3318      	adds	r3, #24
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	4413      	add	r3, r2
 800599a:	1c99      	adds	r1, r3, #2
 800599c:	6a3b      	ldr	r3, [r7, #32]
 800599e:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 80059a2:	461a      	mov	r2, r3
 80059a4:	f7fd fd54 	bl	8003450 <put_utf>
 80059a8:	60f8      	str	r0, [r7, #12]
				if (nw == 0) {				/* Buffer overflow or wrong char? */
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d102      	bne.n	80059b6 <get_fileinfo+0x1ea>
					di = 0; break;
 80059b0:	2300      	movs	r3, #0
 80059b2:	623b      	str	r3, [r7, #32]
 80059b4:	e00d      	b.n	80059d2 <get_fileinfo+0x206>
				}
				di += nw;
 80059b6:	6a3a      	ldr	r2, [r7, #32]
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	623b      	str	r3, [r7, #32]
				hs = 0;
 80059be:	2300      	movs	r3, #0
 80059c0:	837b      	strh	r3, [r7, #26]
			while (fs->lfnbuf[si] != 0) {
 80059c2:	693b      	ldr	r3, [r7, #16]
 80059c4:	691a      	ldr	r2, [r3, #16]
 80059c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	4413      	add	r3, r2
 80059cc:	881b      	ldrh	r3, [r3, #0]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1c3      	bne.n	800595a <get_fileinfo+0x18e>
			}
			if (hs != 0) di = 0;	/* Broken surrogate pair? */
 80059d2:	8b7b      	ldrh	r3, [r7, #26]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <get_fileinfo+0x210>
 80059d8:	2300      	movs	r3, #0
 80059da:	623b      	str	r3, [r7, #32]
			fno->fname[di] = 0;		/* Terminate the LFN (null string means LFN is invalid) */
 80059dc:	683a      	ldr	r2, [r7, #0]
 80059de:	6a3b      	ldr	r3, [r7, #32]
 80059e0:	4413      	add	r3, r2
 80059e2:	331a      	adds	r3, #26
 80059e4:	2200      	movs	r2, #0
 80059e6:	701a      	strb	r2, [r3, #0]
		}
	}

	si = di = 0;
 80059e8:	2300      	movs	r3, #0
 80059ea:	623b      	str	r3, [r7, #32]
 80059ec:	6a3b      	ldr	r3, [r7, #32]
 80059ee:	627b      	str	r3, [r7, #36]	@ 0x24
	while (si < 11) {		/* Get SFN from SFN entry */
 80059f0:	e027      	b.n	8005a42 <get_fileinfo+0x276>
		wc = dp->dir[si++];			/* Get a char */
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80059f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f8:	1c59      	adds	r1, r3, #1
 80059fa:	6279      	str	r1, [r7, #36]	@ 0x24
 80059fc:	4413      	add	r3, r2
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	83bb      	strh	r3, [r7, #28]
		if (wc == ' ') continue;	/* Skip padding spaces */
 8005a02:	8bbb      	ldrh	r3, [r7, #28]
 8005a04:	2b20      	cmp	r3, #32
 8005a06:	d01b      	beq.n	8005a40 <get_fileinfo+0x274>
		if (wc == RDDEM) wc = DDEM;	/* Restore replaced DDEM character */
 8005a08:	8bbb      	ldrh	r3, [r7, #28]
 8005a0a:	2b05      	cmp	r3, #5
 8005a0c:	d101      	bne.n	8005a12 <get_fileinfo+0x246>
 8005a0e:	23e5      	movs	r3, #229	@ 0xe5
 8005a10:	83bb      	strh	r3, [r7, #28]
		if (si == 9 && di < FF_SFN_BUF) fno->altname[di++] = '.';	/* Insert a . if extension is exist */
 8005a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a14:	2b09      	cmp	r3, #9
 8005a16:	d109      	bne.n	8005a2c <get_fileinfo+0x260>
 8005a18:	6a3b      	ldr	r3, [r7, #32]
 8005a1a:	2b0b      	cmp	r3, #11
 8005a1c:	d806      	bhi.n	8005a2c <get_fileinfo+0x260>
 8005a1e:	6a3b      	ldr	r3, [r7, #32]
 8005a20:	1c5a      	adds	r2, r3, #1
 8005a22:	623a      	str	r2, [r7, #32]
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	4413      	add	r3, r2
 8005a28:	222e      	movs	r2, #46	@ 0x2e
 8005a2a:	735a      	strb	r2, [r3, #13]
		if (nw == 0) {				/* Buffer overflow? */
			di = 0; break;
		}
		di += nw;
#else					/* ANSI/OEM output */
		fno->altname[di++] = (TCHAR)wc;	/* Store it without any conversion */
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	1c5a      	adds	r2, r3, #1
 8005a30:	623a      	str	r2, [r7, #32]
 8005a32:	8bba      	ldrh	r2, [r7, #28]
 8005a34:	b2d1      	uxtb	r1, r2
 8005a36:	683a      	ldr	r2, [r7, #0]
 8005a38:	4413      	add	r3, r2
 8005a3a:	460a      	mov	r2, r1
 8005a3c:	735a      	strb	r2, [r3, #13]
 8005a3e:	e000      	b.n	8005a42 <get_fileinfo+0x276>
		if (wc == ' ') continue;	/* Skip padding spaces */
 8005a40:	bf00      	nop
	while (si < 11) {		/* Get SFN from SFN entry */
 8005a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a44:	2b0a      	cmp	r3, #10
 8005a46:	d9d4      	bls.n	80059f2 <get_fileinfo+0x226>
#endif
	}
	fno->altname[di] = 0;	/* Terminate the SFN  (null string means SFN is invalid) */
 8005a48:	683a      	ldr	r2, [r7, #0]
 8005a4a:	6a3b      	ldr	r3, [r7, #32]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	330d      	adds	r3, #13
 8005a50:	2200      	movs	r2, #0
 8005a52:	701a      	strb	r2, [r3, #0]

	if (fno->fname[0] == 0) {	/* If LFN is invalid, altname[] needs to be copied to fname[] */
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	7e9b      	ldrb	r3, [r3, #26]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d152      	bne.n	8005b02 <get_fileinfo+0x336>
		if (di == 0) {	/* If LFN and SFN both are invalid, this object is inaccessible */
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d107      	bne.n	8005a72 <get_fileinfo+0x2a6>
			fno->fname[di++] = '\?';
 8005a62:	6a3b      	ldr	r3, [r7, #32]
 8005a64:	1c5a      	adds	r2, r3, #1
 8005a66:	623a      	str	r2, [r7, #32]
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	4413      	add	r3, r2
 8005a6c:	223f      	movs	r2, #63	@ 0x3f
 8005a6e:	769a      	strb	r2, [r3, #26]
 8005a70:	e038      	b.n	8005ae4 <get_fileinfo+0x318>
		} else {
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 8005a72:	2300      	movs	r3, #0
 8005a74:	623b      	str	r3, [r7, #32]
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a7a:	2308      	movs	r3, #8
 8005a7c:	77fb      	strb	r3, [r7, #31]
 8005a7e:	e02a      	b.n	8005ad6 <get_fileinfo+0x30a>
				wc = (WCHAR)fno->altname[si];
 8005a80:	683a      	ldr	r2, [r7, #0]
 8005a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a84:	4413      	add	r3, r2
 8005a86:	330d      	adds	r3, #13
 8005a88:	781b      	ldrb	r3, [r3, #0]
 8005a8a:	83bb      	strh	r3, [r7, #28]
				if (wc == '.') lcf = NS_EXT;
 8005a8c:	8bbb      	ldrh	r3, [r7, #28]
 8005a8e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005a90:	d101      	bne.n	8005a96 <get_fileinfo+0x2ca>
 8005a92:	2310      	movs	r3, #16
 8005a94:	77fb      	strb	r3, [r7, #31]
				if (IsUpper(wc) && (dp->dir[DIR_NTres] & lcf)) wc += 0x20;
 8005a96:	8bbb      	ldrh	r3, [r7, #28]
 8005a98:	2b40      	cmp	r3, #64	@ 0x40
 8005a9a:	d90e      	bls.n	8005aba <get_fileinfo+0x2ee>
 8005a9c:	8bbb      	ldrh	r3, [r7, #28]
 8005a9e:	2b5a      	cmp	r3, #90	@ 0x5a
 8005aa0:	d80b      	bhi.n	8005aba <get_fileinfo+0x2ee>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aa6:	330c      	adds	r3, #12
 8005aa8:	781a      	ldrb	r2, [r3, #0]
 8005aaa:	7ffb      	ldrb	r3, [r7, #31]
 8005aac:	4013      	ands	r3, r2
 8005aae:	b2db      	uxtb	r3, r3
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <get_fileinfo+0x2ee>
 8005ab4:	8bbb      	ldrh	r3, [r7, #28]
 8005ab6:	3320      	adds	r3, #32
 8005ab8:	83bb      	strh	r3, [r7, #28]
				fno->fname[di] = (TCHAR)wc;
 8005aba:	8bbb      	ldrh	r3, [r7, #28]
 8005abc:	b2d9      	uxtb	r1, r3
 8005abe:	683a      	ldr	r2, [r7, #0]
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	331a      	adds	r3, #26
 8005ac6:	460a      	mov	r2, r1
 8005ac8:	701a      	strb	r2, [r3, #0]
			for (si = di = 0, lcf = NS_BODY; fno->altname[si]; si++, di++) {	/* Copy altname[] to fname[] with case information */
 8005aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005acc:	3301      	adds	r3, #1
 8005ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	623b      	str	r3, [r7, #32]
 8005ad6:	683a      	ldr	r2, [r7, #0]
 8005ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ada:	4413      	add	r3, r2
 8005adc:	330d      	adds	r3, #13
 8005ade:	781b      	ldrb	r3, [r3, #0]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1cd      	bne.n	8005a80 <get_fileinfo+0x2b4>
			}
		}
		fno->fname[di] = 0;	/* Terminate the LFN */
 8005ae4:	683a      	ldr	r2, [r7, #0]
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	4413      	add	r3, r2
 8005aea:	331a      	adds	r3, #26
 8005aec:	2200      	movs	r2, #0
 8005aee:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) fno->altname[0] = 0;	/* Altname is not needed if neither LFN nor case info is exist. */
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005af4:	330c      	adds	r3, #12
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d102      	bne.n	8005b02 <get_fileinfo+0x336>
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	2200      	movs	r2, #0
 8005b00:	735a      	strb	r2, [r3, #13]
		fno->fname[di++] = c;
	}
	fno->fname[di] = 0;		/* Terminate the SFN */
#endif

	fno->fattrib = dp->dir[DIR_Attr] & AM_MASK;			/* Attribute */
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b06:	330b      	adds	r3, #11
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	731a      	strb	r2, [r3, #12]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);		/* Size */
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b18:	331c      	adds	r3, #28
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f7fd fa6c 	bl	8002ff8 <ld_dword>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2200      	movs	r2, #0
 8005b24:	461c      	mov	r4, r3
 8005b26:	4615      	mov	r5, r2
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	e9c3 4500 	strd	r4, r5, [r3]
	fno->ftime = ld_word(dp->dir + DIR_ModTime + 0);	/* Time */
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b32:	3316      	adds	r3, #22
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7fd fa47 	bl	8002fc8 <ld_word>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	815a      	strh	r2, [r3, #10]
	fno->fdate = ld_word(dp->dir + DIR_ModTime + 2);	/* Date */
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b46:	3318      	adds	r3, #24
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f7fd fa3d 	bl	8002fc8 <ld_word>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	461a      	mov	r2, r3
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	811a      	strh	r2, [r3, #8]
 8005b56:	e000      	b.n	8005b5a <get_fileinfo+0x38e>
	if (dp->sect == 0) return;	/* Exit if read pointer has reached end of directory */
 8005b58:	bf00      	nop
}
 8005b5a:	3728      	adds	r7, #40	@ 0x28
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bdb0      	pop	{r4, r5, r7, pc}

08005b60 <create_name>:

static FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,					/* Pointer to the directory object */
	const TCHAR** path			/* Pointer to pointer to the segment in the path string */
)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b08a      	sub	sp, #40	@ 0x28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	6039      	str	r1, [r7, #0]
	DWORD uc;
	UINT i, ni, si, di;


	/* Create LFN into LFN working buffer */
	p = *path; lfn = dp->obj.fs->lfnbuf; di = 0;
 8005b6a:	683b      	ldr	r3, [r7, #0]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	60bb      	str	r3, [r7, #8]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	613b      	str	r3, [r7, #16]
 8005b78:	2300      	movs	r3, #0
 8005b7a:	617b      	str	r3, [r7, #20]
	for (;;) {
		uc = tchar2uni(&p);			/* Get a character */
 8005b7c:	f107 0308 	add.w	r3, r7, #8
 8005b80:	4618      	mov	r0, r3
 8005b82:	f7fd fc20 	bl	80033c6 <tchar2uni>
 8005b86:	60f8      	str	r0, [r7, #12]
		if (uc == 0xFFFFFFFF) return FR_INVALID_NAME;		/* Invalid code or UTF decode error */
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b8e:	d101      	bne.n	8005b94 <create_name+0x34>
 8005b90:	2306      	movs	r3, #6
 8005b92:	e207      	b.n	8005fa4 <create_name+0x444>
		if (uc >= 0x10000) lfn[di++] = (WCHAR)(uc >> 16);	/* Store high surrogate if needed */
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b9a:	d309      	bcc.n	8005bb0 <create_name+0x50>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	0c19      	lsrs	r1, r3, #16
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	1c5a      	adds	r2, r3, #1
 8005ba4:	617a      	str	r2, [r7, #20]
 8005ba6:	005b      	lsls	r3, r3, #1
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	4413      	add	r3, r2
 8005bac:	b28a      	uxth	r2, r1
 8005bae:	801a      	strh	r2, [r3, #0]
		wc = (WCHAR)uc;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc < ' ' || IsSeparator(wc)) break;	/* Break if end of the path or a separator is found */
 8005bb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005bb6:	2b1f      	cmp	r3, #31
 8005bb8:	d920      	bls.n	8005bfc <create_name+0x9c>
 8005bba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005bbc:	2b2f      	cmp	r3, #47	@ 0x2f
 8005bbe:	d01d      	beq.n	8005bfc <create_name+0x9c>
 8005bc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005bc2:	2b5c      	cmp	r3, #92	@ 0x5c
 8005bc4:	d01a      	beq.n	8005bfc <create_name+0x9c>
		if (wc < 0x80 && strchr("*:<>|\"\?\x7F", (int)wc)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8005bc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005bc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bca:	d809      	bhi.n	8005be0 <create_name+0x80>
 8005bcc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005bce:	4619      	mov	r1, r3
 8005bd0:	4894      	ldr	r0, [pc, #592]	@ (8005e24 <create_name+0x2c4>)
 8005bd2:	f001 feff 	bl	80079d4 <strchr>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d001      	beq.n	8005be0 <create_name+0x80>
 8005bdc:	2306      	movs	r3, #6
 8005bde:	e1e1      	b.n	8005fa4 <create_name+0x444>
		if (di >= FF_MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	2bfe      	cmp	r3, #254	@ 0xfe
 8005be4:	d901      	bls.n	8005bea <create_name+0x8a>
 8005be6:	2306      	movs	r3, #6
 8005be8:	e1dc      	b.n	8005fa4 <create_name+0x444>
		lfn[di++] = wc;				/* Store the Unicode character */
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	1c5a      	adds	r2, r3, #1
 8005bee:	617a      	str	r2, [r7, #20]
 8005bf0:	005b      	lsls	r3, r3, #1
 8005bf2:	693a      	ldr	r2, [r7, #16]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005bf8:	801a      	strh	r2, [r3, #0]
		uc = tchar2uni(&p);			/* Get a character */
 8005bfa:	e7bf      	b.n	8005b7c <create_name+0x1c>
	}
	if (wc < ' ') {				/* Stopped at end of the path? */
 8005bfc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005bfe:	2b1f      	cmp	r3, #31
 8005c00:	d806      	bhi.n	8005c10 <create_name+0xb0>
		cf = NS_LAST;			/* Last segment */
 8005c02:	2304      	movs	r3, #4
 8005c04:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005c08:	e014      	b.n	8005c34 <create_name+0xd4>
	} else {					/* Stopped at a separator */
		while (IsSeparator(*p)) p++;	/* Skip duplicated separators if exist */
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	3301      	adds	r3, #1
 8005c0e:	60bb      	str	r3, [r7, #8]
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	781b      	ldrb	r3, [r3, #0]
 8005c14:	2b2f      	cmp	r3, #47	@ 0x2f
 8005c16:	d0f8      	beq.n	8005c0a <create_name+0xaa>
 8005c18:	68bb      	ldr	r3, [r7, #8]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	2b5c      	cmp	r3, #92	@ 0x5c
 8005c1e:	d0f4      	beq.n	8005c0a <create_name+0xaa>
		cf = 0;					/* Next segment may follow */
 8005c20:	2300      	movs	r3, #0
 8005c22:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (IsTerminator(*p)) cf = NS_LAST;	/* Ignore terminating separator */
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	2b1f      	cmp	r3, #31
 8005c2c:	d802      	bhi.n	8005c34 <create_name+0xd4>
 8005c2e:	2304      	movs	r3, #4
 8005c30:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}
	*path = p;					/* Return pointer to the next segment */
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	601a      	str	r2, [r3, #0]

#if FF_FS_RPATH != 0
	if ((di == 1 && lfn[di - 1] == '.') ||
 8005c3a:	697b      	ldr	r3, [r7, #20]
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	d109      	bne.n	8005c54 <create_name+0xf4>
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005c46:	3b01      	subs	r3, #1
 8005c48:	005b      	lsls	r3, r3, #1
 8005c4a:	693a      	ldr	r2, [r7, #16]
 8005c4c:	4413      	add	r3, r2
 8005c4e:	881b      	ldrh	r3, [r3, #0]
 8005c50:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c52:	d016      	beq.n	8005c82 <create_name+0x122>
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	2b02      	cmp	r3, #2
 8005c58:	d14e      	bne.n	8005cf8 <create_name+0x198>
		(di == 2 && lfn[di - 1] == '.' && lfn[di - 2] == '.')) {	/* Is this segment a dot name? */
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005c60:	3b01      	subs	r3, #1
 8005c62:	005b      	lsls	r3, r3, #1
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	4413      	add	r3, r2
 8005c68:	881b      	ldrh	r3, [r3, #0]
 8005c6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c6c:	d144      	bne.n	8005cf8 <create_name+0x198>
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005c74:	3b02      	subs	r3, #2
 8005c76:	005b      	lsls	r3, r3, #1
 8005c78:	693a      	ldr	r2, [r7, #16]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c80:	d13a      	bne.n	8005cf8 <create_name+0x198>
		lfn[di] = 0;
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	693a      	ldr	r2, [r7, #16]
 8005c88:	4413      	add	r3, r2
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	801a      	strh	r2, [r3, #0]
		for (i = 0; i < 11; i++) {	/* Create dot name for SFN entry */
 8005c8e:	2300      	movs	r3, #0
 8005c90:	623b      	str	r3, [r7, #32]
 8005c92:	e00f      	b.n	8005cb4 <create_name+0x154>
			dp->fn[i] = (i < di) ? '.' : ' ';
 8005c94:	6a3a      	ldr	r2, [r7, #32]
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d201      	bcs.n	8005ca0 <create_name+0x140>
 8005c9c:	212e      	movs	r1, #46	@ 0x2e
 8005c9e:	e000      	b.n	8005ca2 <create_name+0x142>
 8005ca0:	2120      	movs	r1, #32
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	4413      	add	r3, r2
 8005ca8:	3340      	adds	r3, #64	@ 0x40
 8005caa:	460a      	mov	r2, r1
 8005cac:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < 11; i++) {	/* Create dot name for SFN entry */
 8005cae:	6a3b      	ldr	r3, [r7, #32]
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	623b      	str	r3, [r7, #32]
 8005cb4:	6a3b      	ldr	r3, [r7, #32]
 8005cb6:	2b0a      	cmp	r3, #10
 8005cb8:	d9ec      	bls.n	8005c94 <create_name+0x134>
		}
		dp->fn[i] = cf | NS_DOT;	/* This is a dot entry */
 8005cba:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005cbe:	f043 0320 	orr.w	r3, r3, #32
 8005cc2:	b2d9      	uxtb	r1, r3
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
 8005cc8:	4413      	add	r3, r2
 8005cca:	3340      	adds	r3, #64	@ 0x40
 8005ccc:	460a      	mov	r2, r1
 8005cce:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	e167      	b.n	8005fa4 <create_name+0x444>
	}
#endif
	while (di) {					/* Snip off trailing spaces and dots if exist */
		wc = lfn[di - 1];
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005cda:	3b01      	subs	r3, #1
 8005cdc:	005b      	lsls	r3, r3, #1
 8005cde:	693a      	ldr	r2, [r7, #16]
 8005ce0:	4413      	add	r3, r2
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc != ' ' && wc != '.') break;
 8005ce6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ce8:	2b20      	cmp	r3, #32
 8005cea:	d002      	beq.n	8005cf2 <create_name+0x192>
 8005cec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005cee:	2b2e      	cmp	r3, #46	@ 0x2e
 8005cf0:	d106      	bne.n	8005d00 <create_name+0x1a0>
		di--;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	617b      	str	r3, [r7, #20]
	while (di) {					/* Snip off trailing spaces and dots if exist */
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1ea      	bne.n	8005cd4 <create_name+0x174>
 8005cfe:	e000      	b.n	8005d02 <create_name+0x1a2>
		if (wc != ' ' && wc != '.') break;
 8005d00:	bf00      	nop
	}
	lfn[di] = 0;							/* LFN is created into the working buffer */
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	693a      	ldr	r2, [r7, #16]
 8005d08:	4413      	add	r3, r2
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject null name */
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d101      	bne.n	8005d18 <create_name+0x1b8>
 8005d14:	2306      	movs	r3, #6
 8005d16:	e145      	b.n	8005fa4 <create_name+0x444>

	/* Create SFN in directory form */
	for (si = 0; lfn[si] == ' '; si++) ;	/* Remove leading spaces */
 8005d18:	2300      	movs	r3, #0
 8005d1a:	61bb      	str	r3, [r7, #24]
 8005d1c:	e002      	b.n	8005d24 <create_name+0x1c4>
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	3301      	adds	r3, #1
 8005d22:	61bb      	str	r3, [r7, #24]
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	005b      	lsls	r3, r3, #1
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4413      	add	r3, r2
 8005d2c:	881b      	ldrh	r3, [r3, #0]
 8005d2e:	2b20      	cmp	r3, #32
 8005d30:	d0f5      	beq.n	8005d1e <create_name+0x1be>
	if (si > 0 || lfn[si] == '.') cf |= NS_LOSS | NS_LFN;	/* Is there any leading space or dot? */
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d106      	bne.n	8005d46 <create_name+0x1e6>
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	005b      	lsls	r3, r3, #1
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	4413      	add	r3, r2
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d44:	d109      	bne.n	8005d5a <create_name+0x1fa>
 8005d46:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005d4a:	f043 0303 	orr.w	r3, r3, #3
 8005d4e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	while (di > 0 && lfn[di - 1] != '.') di--;	/* Find last dot (di<=si: no extension) */
 8005d52:	e002      	b.n	8005d5a <create_name+0x1fa>
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	3b01      	subs	r3, #1
 8005d58:	617b      	str	r3, [r7, #20]
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d009      	beq.n	8005d74 <create_name+0x214>
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005d66:	3b01      	subs	r3, #1
 8005d68:	005b      	lsls	r3, r3, #1
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	881b      	ldrh	r3, [r3, #0]
 8005d70:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d72:	d1ef      	bne.n	8005d54 <create_name+0x1f4>

	memset(dp->fn, ' ', 11);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	3340      	adds	r3, #64	@ 0x40
 8005d78:	220b      	movs	r2, #11
 8005d7a:	2120      	movs	r1, #32
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f001 fe21 	bl	80079c4 <memset>
	i = b = 0; ni = 8;
 8005d82:	2300      	movs	r3, #0
 8005d84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005d88:	2300      	movs	r3, #0
 8005d8a:	623b      	str	r3, [r7, #32]
 8005d8c:	2308      	movs	r3, #8
 8005d8e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		wc = lfn[si++];					/* Get an LFN character */
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	1c5a      	adds	r2, r3, #1
 8005d94:	61ba      	str	r2, [r7, #24]
 8005d96:	005b      	lsls	r3, r3, #1
 8005d98:	693a      	ldr	r2, [r7, #16]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	881b      	ldrh	r3, [r3, #0]
 8005d9e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (wc == 0) break;				/* Break on end of the LFN */
 8005da0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 80b4 	beq.w	8005f10 <create_name+0x3b0>
		if (wc == ' ' || (wc == '.' && si != di)) {	/* Remove embedded spaces and dots */
 8005da8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005daa:	2b20      	cmp	r3, #32
 8005dac:	d006      	beq.n	8005dbc <create_name+0x25c>
 8005dae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005db0:	2b2e      	cmp	r3, #46	@ 0x2e
 8005db2:	d10a      	bne.n	8005dca <create_name+0x26a>
 8005db4:	69ba      	ldr	r2, [r7, #24]
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d006      	beq.n	8005dca <create_name+0x26a>
			cf |= NS_LOSS | NS_LFN;
 8005dbc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005dc0:	f043 0303 	orr.w	r3, r3, #3
 8005dc4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			continue;
 8005dc8:	e0a1      	b.n	8005f0e <create_name+0x3ae>
		}

		if (i >= ni || si == di) {		/* End of field? */
 8005dca:	6a3a      	ldr	r2, [r7, #32]
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	429a      	cmp	r2, r3
 8005dd0:	d203      	bcs.n	8005dda <create_name+0x27a>
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d126      	bne.n	8005e28 <create_name+0x2c8>
			if (ni == 11) {				/* Name extension overflow? */
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	2b0b      	cmp	r3, #11
 8005dde:	d106      	bne.n	8005dee <create_name+0x28e>
				cf |= NS_LOSS | NS_LFN;
 8005de0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005de4:	f043 0303 	orr.w	r3, r3, #3
 8005de8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				break;
 8005dec:	e093      	b.n	8005f16 <create_name+0x3b6>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Name body overflow? */
 8005dee:	69ba      	ldr	r2, [r7, #24]
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d005      	beq.n	8005e02 <create_name+0x2a2>
 8005df6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005dfa:	f043 0303 	orr.w	r3, r3, #3
 8005dfe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			if (si > di) break;						/* No name extension? */
 8005e02:	69ba      	ldr	r2, [r7, #24]
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	f200 8084 	bhi.w	8005f14 <create_name+0x3b4>
			si = di; i = 8; ni = 11; b <<= 2;		/* Enter name extension */
 8005e0c:	697b      	ldr	r3, [r7, #20]
 8005e0e:	61bb      	str	r3, [r7, #24]
 8005e10:	2308      	movs	r3, #8
 8005e12:	623b      	str	r3, [r7, #32]
 8005e14:	230b      	movs	r3, #11
 8005e16:	61fb      	str	r3, [r7, #28]
 8005e18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			continue;
 8005e22:	e074      	b.n	8005f0e <create_name+0x3ae>
 8005e24:	08007a98 	.word	0x08007a98
		}

		if (wc >= 0x80) {	/* Is this an extended character? */
 8005e28:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e2c:	d918      	bls.n	8005e60 <create_name+0x300>
			cf |= NS_LFN;	/* LFN entry needs to be created */
 8005e2e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005e32:	f043 0302 	orr.w	r3, r3, #2
 8005e36:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
			} else {		/* In DBCS cfg */
				wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Up-convert ==> ANSI/OEM code */
			}
#elif FF_CODE_PAGE < 900	/* In SBCS cfg */
			wc = ff_uni2oem(wc, CODEPAGE);			/* Unicode ==> ANSI/OEM code */
 8005e3a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e3c:	f240 11b5 	movw	r1, #437	@ 0x1b5
 8005e40:	4618      	mov	r0, r3
 8005e42:	f001 fcbb 	bl	80077bc <ff_uni2oem>
 8005e46:	4603      	mov	r3, r0
 8005e48:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (wc & 0x80) wc = ExCvt[wc & 0x7F];	/* Convert extended character to upper (SBCS) */
 8005e4a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d005      	beq.n	8005e60 <create_name+0x300>
 8005e54:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e5a:	4a54      	ldr	r2, [pc, #336]	@ (8005fac <create_name+0x44c>)
 8005e5c:	5cd3      	ldrb	r3, [r2, r3]
 8005e5e:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else						/* In DBCS cfg */
			wc = ff_uni2oem(ff_wtoupper(wc), CODEPAGE);	/* Unicode ==> Up-convert ==> ANSI/OEM code */
#endif
		}

		if (wc >= 0x100) {				/* Is this a DBC? */
 8005e60:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e62:	2bff      	cmp	r3, #255	@ 0xff
 8005e64:	d91a      	bls.n	8005e9c <create_name+0x33c>
			if (i >= ni - 1) {			/* Field overflow? */
 8005e66:	69fb      	ldr	r3, [r7, #28]
 8005e68:	3b01      	subs	r3, #1
 8005e6a:	6a3a      	ldr	r2, [r7, #32]
 8005e6c:	429a      	cmp	r2, r3
 8005e6e:	d308      	bcc.n	8005e82 <create_name+0x322>
				cf |= NS_LOSS | NS_LFN;
 8005e70:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005e74:	f043 0303 	orr.w	r3, r3, #3
 8005e78:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
				i = ni; continue;		/* Next field */
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	623b      	str	r3, [r7, #32]
 8005e80:	e045      	b.n	8005f0e <create_name+0x3ae>
			}
			dp->fn[i++] = (BYTE)(wc >> 8);	/* Put 1st byte */
 8005e82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e84:	0a1b      	lsrs	r3, r3, #8
 8005e86:	b299      	uxth	r1, r3
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	1c5a      	adds	r2, r3, #1
 8005e8c:	623a      	str	r2, [r7, #32]
 8005e8e:	b2c9      	uxtb	r1, r1
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	4413      	add	r3, r2
 8005e94:	460a      	mov	r2, r1
 8005e96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e9a:	e02e      	b.n	8005efa <create_name+0x39a>
		} else {						/* SBC */
			if (wc == 0 || strchr("+,;=[]", (int)wc)) {	/* Replace illegal characters for SFN */
 8005e9c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d007      	beq.n	8005eb2 <create_name+0x352>
 8005ea2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ea4:	4619      	mov	r1, r3
 8005ea6:	4842      	ldr	r0, [pc, #264]	@ (8005fb0 <create_name+0x450>)
 8005ea8:	f001 fd94 	bl	80079d4 <strchr>
 8005eac:	4603      	mov	r3, r0
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d008      	beq.n	8005ec4 <create_name+0x364>
				wc = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8005eb2:	235f      	movs	r3, #95	@ 0x5f
 8005eb4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005eb6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005eba:	f043 0303 	orr.w	r3, r3, #3
 8005ebe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005ec2:	e01a      	b.n	8005efa <create_name+0x39a>
			} else {
				if (IsUpper(wc)) {		/* ASCII upper case? */
 8005ec4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ec6:	2b40      	cmp	r3, #64	@ 0x40
 8005ec8:	d908      	bls.n	8005edc <create_name+0x37c>
 8005eca:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ecc:	2b5a      	cmp	r3, #90	@ 0x5a
 8005ece:	d805      	bhi.n	8005edc <create_name+0x37c>
					b |= 2;
 8005ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ed4:	f043 0302 	orr.w	r3, r3, #2
 8005ed8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
				}
				if (IsLower(wc)) {		/* ASCII lower case? */
 8005edc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ede:	2b60      	cmp	r3, #96	@ 0x60
 8005ee0:	d90b      	bls.n	8005efa <create_name+0x39a>
 8005ee2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ee4:	2b7a      	cmp	r3, #122	@ 0x7a
 8005ee6:	d808      	bhi.n	8005efa <create_name+0x39a>
					b |= 1; wc -= 0x20;
 8005ee8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005eec:	f043 0301 	orr.w	r3, r3, #1
 8005ef0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005ef4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ef6:	3b20      	subs	r3, #32
 8005ef8:	84bb      	strh	r3, [r7, #36]	@ 0x24
				}
			}
		}
		dp->fn[i++] = (BYTE)wc;
 8005efa:	6a3b      	ldr	r3, [r7, #32]
 8005efc:	1c5a      	adds	r2, r3, #1
 8005efe:	623a      	str	r2, [r7, #32]
 8005f00:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005f02:	b2d1      	uxtb	r1, r2
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	4413      	add	r3, r2
 8005f08:	460a      	mov	r2, r1
 8005f0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		wc = lfn[si++];					/* Get an LFN character */
 8005f0e:	e73f      	b.n	8005d90 <create_name+0x230>
		if (wc == 0) break;				/* Break on end of the LFN */
 8005f10:	bf00      	nop
 8005f12:	e000      	b.n	8005f16 <create_name+0x3b6>
			if (si > di) break;						/* No name extension? */
 8005f14:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005f1c:	2be5      	cmp	r3, #229	@ 0xe5
 8005f1e:	d103      	bne.n	8005f28 <create_name+0x3c8>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2205      	movs	r2, #5
 8005f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

	if (ni == 8) b <<= 2;				/* Shift capital flags if no extension */
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	2b08      	cmp	r3, #8
 8005f2c:	d104      	bne.n	8005f38 <create_name+0x3d8>
 8005f2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f32:	009b      	lsls	r3, r3, #2
 8005f34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* LFN entry needs to be created if composite capitals */
 8005f38:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f3c:	f003 030c 	and.w	r3, r3, #12
 8005f40:	2b0c      	cmp	r3, #12
 8005f42:	d005      	beq.n	8005f50 <create_name+0x3f0>
 8005f44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f48:	f003 0303 	and.w	r3, r3, #3
 8005f4c:	2b03      	cmp	r3, #3
 8005f4e:	d105      	bne.n	8005f5c <create_name+0x3fc>
 8005f50:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f54:	f043 0302 	orr.w	r3, r3, #2
 8005f58:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if (!(cf & NS_LFN)) {				/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005f5c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f60:	f003 0302 	and.w	r3, r3, #2
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d117      	bne.n	8005f98 <create_name+0x438>
		if (b & 0x01) cf |= NS_EXT;		/* NT flag (Extension has small capital letters only) */
 8005f68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f6c:	f003 0301 	and.w	r3, r3, #1
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d005      	beq.n	8005f80 <create_name+0x420>
 8005f74:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f78:	f043 0310 	orr.w	r3, r3, #16
 8005f7c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
		if (b & 0x04) cf |= NS_BODY;	/* NT flag (Body has small capital letters only) */
 8005f80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f84:	f003 0304 	and.w	r3, r3, #4
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d005      	beq.n	8005f98 <create_name+0x438>
 8005f8c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005f90:	f043 0308 	orr.w	r3, r3, #8
 8005f94:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created into dp->fn[] */
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8005f9e:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b

	return FR_OK;
 8005fa2:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ' || p[si] <= ' ') ? NS_LAST : 0;	/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* FF_USE_LFN */
}
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	3728      	adds	r7, #40	@ 0x28
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	bd80      	pop	{r7, pc}
 8005fac:	08007b00 	.word	0x08007b00
 8005fb0:	08007aa4 	.word	0x08007aa4

08005fb4 <follow_path>:

static FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,					/* Directory object to return last directory and found object */
	const TCHAR* path			/* Full-path string to find a file or directory */
)
{
 8005fb4:	b5b0      	push	{r4, r5, r7, lr}
 8005fb6:	b09a      	sub	sp, #104	@ 0x68
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	FATFS *fs = dp->obj.fs;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	663b      	str	r3, [r7, #96]	@ 0x60


#if FF_FS_RPATH != 0
	if (!IsSeparator(*path) && (FF_STR_VOLUME_ID != 2 || !IsTerminator(*path))) {	/* Without heading separator */
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	781b      	ldrb	r3, [r3, #0]
 8005fc8:	2b2f      	cmp	r3, #47	@ 0x2f
 8005fca:	d00b      	beq.n	8005fe4 <follow_path+0x30>
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	781b      	ldrb	r3, [r3, #0]
 8005fd0:	2b5c      	cmp	r3, #92	@ 0x5c
 8005fd2:	d007      	beq.n	8005fe4 <follow_path+0x30>
		dp->obj.sclust = fs->cdir;			/* Start at the current directory */
 8005fd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005fd6:	6a1a      	ldr	r2, [r3, #32]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	609a      	str	r2, [r3, #8]
 8005fdc:	e00d      	b.n	8005ffa <follow_path+0x46>
	} else
#endif
	{										/* With heading separator */
		while (IsSeparator(*path)) path++;	/* Strip separators */
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	3301      	adds	r3, #1
 8005fe2:	603b      	str	r3, [r7, #0]
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	2b2f      	cmp	r3, #47	@ 0x2f
 8005fea:	d0f8      	beq.n	8005fde <follow_path+0x2a>
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	781b      	ldrb	r3, [r3, #0]
 8005ff0:	2b5c      	cmp	r3, #92	@ 0x5c
 8005ff2:	d0f4      	beq.n	8005fde <follow_path+0x2a>
		dp->obj.sclust = 0;					/* Start from the root directory */
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	609a      	str	r2, [r3, #8]
	}
#if FF_FS_EXFAT
	dp->obj.n_frag = 0;	/* Invalidate last fragment counter of the object */
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	61da      	str	r2, [r3, #28]
#if FF_FS_RPATH != 0
	if (fs->fs_type == FS_EXFAT && dp->obj.sclust) {	/* exFAT: Retrieve the sub-directory's status */
 8006000:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	2b04      	cmp	r3, #4
 8006006:	d136      	bne.n	8006076 <follow_path+0xc2>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d032      	beq.n	8006076 <follow_path+0xc2>
		DIR dj;

		dp->obj.c_scl = fs->cdc_scl;
 8006010:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006012:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	621a      	str	r2, [r3, #32]
		dp->obj.c_size = fs->cdc_size;
 8006018:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800601a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	625a      	str	r2, [r3, #36]	@ 0x24
		dp->obj.c_ofs = fs->cdc_ofs;
 8006020:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	629a      	str	r2, [r3, #40]	@ 0x28
		res = load_obj_xdir(&dj, &dp->obj);
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	f107 0308 	add.w	r3, r7, #8
 800602e:	4611      	mov	r1, r2
 8006030:	4618      	mov	r0, r3
 8006032:	f7fe ff2e 	bl	8004e92 <load_obj_xdir>
 8006036:	4603      	mov	r3, r0
 8006038:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		if (res != FR_OK) return res;
 800603c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006040:	2b00      	cmp	r3, #0
 8006042:	d002      	beq.n	800604a <follow_path+0x96>
 8006044:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006048:	e0ad      	b.n	80061a6 <follow_path+0x1f2>
		dp->obj.objsize = ld_dword(fs->dirbuf + XDIR_FileSize);
 800604a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800604c:	695b      	ldr	r3, [r3, #20]
 800604e:	3338      	adds	r3, #56	@ 0x38
 8006050:	4618      	mov	r0, r3
 8006052:	f7fc ffd1 	bl	8002ff8 <ld_dword>
 8006056:	4603      	mov	r3, r0
 8006058:	2200      	movs	r2, #0
 800605a:	461c      	mov	r4, r3
 800605c:	4615      	mov	r5, r2
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	e9c3 4504 	strd	r4, r5, [r3, #16]
		dp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
 8006064:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006066:	695b      	ldr	r3, [r3, #20]
 8006068:	3321      	adds	r3, #33	@ 0x21
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	b2da      	uxtb	r2, r3
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	71da      	strb	r2, [r3, #7]
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	2b1f      	cmp	r3, #31
 800607c:	d80b      	bhi.n	8006096 <follow_path+0xe2>
		dp->fn[NSFLAG] = NS_NONAME;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2280      	movs	r2, #128	@ 0x80
 8006082:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
		res = dir_sdi(dp, 0);
 8006086:	2100      	movs	r1, #0
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f7fe f9c8 	bl	800441e <dir_sdi>
 800608e:	4603      	mov	r3, r0
 8006090:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8006094:	e085      	b.n	80061a2 <follow_path+0x1ee>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006096:	463b      	mov	r3, r7
 8006098:	4619      	mov	r1, r3
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f7ff fd60 	bl	8005b60 <create_name>
 80060a0:	4603      	mov	r3, r0
 80060a2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			if (res != FR_OK) break;
 80060a6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d174      	bne.n	8006198 <follow_path+0x1e4>
			res = dir_find(dp);				/* Find an object with the segment name */
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f7ff f8b3 	bl	800521a <dir_find>
 80060b4:	4603      	mov	r3, r0
 80060b6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			ns = dp->fn[NSFLAG];
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 304b 	ldrb.w	r3, [r3, #75]	@ 0x4b
 80060c0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			if (res != FR_OK) {				/* Failed to find the object */
 80060c4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d021      	beq.n	8006110 <follow_path+0x15c>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80060cc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80060d0:	2b04      	cmp	r3, #4
 80060d2:	d163      	bne.n	800619c <follow_path+0x1e8>
					if (FF_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
 80060d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80060d8:	f003 0320 	and.w	r3, r3, #32
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00d      	beq.n	80060fc <follow_path+0x148>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 80060e0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80060e4:	f003 0304 	and.w	r3, r3, #4
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d053      	beq.n	8006194 <follow_path+0x1e0>
						dp->fn[NSFLAG] = NS_NONAME;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2280      	movs	r2, #128	@ 0x80
 80060f0:	f883 204b 	strb.w	r2, [r3, #75]	@ 0x4b
						res = FR_OK;
 80060f4:	2300      	movs	r3, #0
 80060f6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 80060fa:	e04f      	b.n	800619c <follow_path+0x1e8>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80060fc:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006100:	f003 0304 	and.w	r3, r3, #4
 8006104:	2b00      	cmp	r3, #0
 8006106:	d149      	bne.n	800619c <follow_path+0x1e8>
 8006108:	2305      	movs	r3, #5
 800610a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				break;
 800610e:	e045      	b.n	800619c <follow_path+0x1e8>
			}
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 8006110:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006114:	f003 0304 	and.w	r3, r3, #4
 8006118:	2b00      	cmp	r3, #0
 800611a:	d141      	bne.n	80061a0 <follow_path+0x1ec>
			/* Get into the sub-directory */
			if (!(dp->obj.attr & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	799b      	ldrb	r3, [r3, #6]
 8006120:	f003 0310 	and.w	r3, r3, #16
 8006124:	2b00      	cmp	r3, #0
 8006126:	d103      	bne.n	8006130 <follow_path+0x17c>
				res = FR_NO_PATH; break;
 8006128:	2305      	movs	r3, #5
 800612a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800612e:	e038      	b.n	80061a2 <follow_path+0x1ee>
			}
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {	/* Save containing directory information for next dir */
 8006130:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	2b04      	cmp	r3, #4
 8006136:	d118      	bne.n	800616a <follow_path+0x1b6>
				dp->obj.c_scl = dp->obj.sclust;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	621a      	str	r2, [r3, #32]
				dp->obj.c_size = ((DWORD)dp->obj.objsize & 0xFFFFFF00) | dp->obj.stat;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006146:	4613      	mov	r3, r2
 8006148:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	79d2      	ldrb	r2, [r2, #7]
 8006150:	431a      	orrs	r2, r3
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	625a      	str	r2, [r3, #36]	@ 0x24
				dp->obj.c_ofs = dp->blk_ofs;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	629a      	str	r2, [r3, #40]	@ 0x28
				init_alloc_info(fs, &dp->obj);	/* Open next directory */
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4619      	mov	r1, r3
 8006162:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8006164:	f7fe fe6c 	bl	8004e40 <init_alloc_info>
 8006168:	e795      	b.n	8006096 <follow_path+0xe2>
			} else
#endif
			{
				dp->obj.sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800616a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800616c:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006174:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006176:	8992      	ldrh	r2, [r2, #12]
 8006178:	fbb3 f0f2 	udiv	r0, r3, r2
 800617c:	fb00 f202 	mul.w	r2, r0, r2
 8006180:	1a9b      	subs	r3, r3, r2
 8006182:	440b      	add	r3, r1
 8006184:	4619      	mov	r1, r3
 8006186:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8006188:	f7fe faee 	bl	8004768 <ld_clust>
 800618c:	4602      	mov	r2, r0
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	609a      	str	r2, [r3, #8]
 8006192:	e780      	b.n	8006096 <follow_path+0xe2>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8006194:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006196:	e77e      	b.n	8006096 <follow_path+0xe2>
			if (res != FR_OK) break;
 8006198:	bf00      	nop
 800619a:	e002      	b.n	80061a2 <follow_path+0x1ee>
				break;
 800619c:	bf00      	nop
 800619e:	e000      	b.n	80061a2 <follow_path+0x1ee>
			if (ns & NS_LAST) break;		/* Last segment matched. Function completed. */
 80061a0:	bf00      	nop
			}
		}
	}

	return res;
 80061a2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3768      	adds	r7, #104	@ 0x68
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080061b0 <get_ldnumber>:
/*-----------------------------------------------------------------------*/

static int get_ldnumber (	/* Returns logical drive number (-1:invalid drive number or null pointer) */
	const TCHAR** path		/* Pointer to pointer to the path name */
)
{
 80061b0:	b480      	push	{r7}
 80061b2:	b087      	sub	sp, #28
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
#if FF_STR_VOLUME_ID		/* Find string volume ID */
	const char *vsp;
	char vchr;
#endif

	tt = tp = *path;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	60fb      	str	r3, [r7, #12]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	617b      	str	r3, [r7, #20]
	if (!tp) return -1;		/* Invalid path name? */
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d102      	bne.n	80061ce <get_ldnumber+0x1e>
 80061c8:	f04f 33ff 	mov.w	r3, #4294967295
 80061cc:	e02d      	b.n	800622a <get_ldnumber+0x7a>
	do {					/* Find a colon in the path */
		chr = *tt++;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	1c5a      	adds	r2, r3, #1
 80061d2:	617a      	str	r2, [r7, #20]
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	72fb      	strb	r3, [r7, #11]
	} while (!IsTerminator(chr) && chr != ':');
 80061d8:	7afb      	ldrb	r3, [r7, #11]
 80061da:	2b1f      	cmp	r3, #31
 80061dc:	d902      	bls.n	80061e4 <get_ldnumber+0x34>
 80061de:	7afb      	ldrb	r3, [r7, #11]
 80061e0:	2b3a      	cmp	r3, #58	@ 0x3a
 80061e2:	d1f4      	bne.n	80061ce <get_ldnumber+0x1e>

	if (chr == ':') {	/* Is there a DOS/Windows style volume ID? */
 80061e4:	7afb      	ldrb	r3, [r7, #11]
 80061e6:	2b3a      	cmp	r3, #58	@ 0x3a
 80061e8:	d11d      	bne.n	8006226 <get_ldnumber+0x76>
		i = FF_VOLUMES;
 80061ea:	2301      	movs	r3, #1
 80061ec:	613b      	str	r3, [r7, #16]
		if (IsDigit(*tp) && tp + 2 == tt) {	/* Is it a numeric volume ID + colon? */
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	2b2f      	cmp	r3, #47	@ 0x2f
 80061f4:	d90c      	bls.n	8006210 <get_ldnumber+0x60>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	2b39      	cmp	r3, #57	@ 0x39
 80061fc:	d808      	bhi.n	8006210 <get_ldnumber+0x60>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	3302      	adds	r3, #2
 8006202:	697a      	ldr	r2, [r7, #20]
 8006204:	429a      	cmp	r2, r3
 8006206:	d103      	bne.n	8006210 <get_ldnumber+0x60>
			i = (int)*tp - '0';	/* Get the logical drive number */
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	3b30      	subs	r3, #48	@ 0x30
 800620e:	613b      	str	r3, [r7, #16]
					if (IsLower(chr)) chr -= 0x20;
				} while (vchr && (TCHAR)vchr == chr);
			} while ((vchr || tp != tt) && ++i < FF_VOLUMES);	/* Repeat for each id until pattern match */
		}
#endif
		if (i >= FF_VOLUMES) return -1;	/* Not found or invalid volume ID */
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	2b00      	cmp	r3, #0
 8006214:	dd02      	ble.n	800621c <get_ldnumber+0x6c>
 8006216:	f04f 33ff 	mov.w	r3, #4294967295
 800621a:	e006      	b.n	800622a <get_ldnumber+0x7a>
		*path = tt;		/* Snip the drive prefix off */
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	697a      	ldr	r2, [r7, #20]
 8006220:	601a      	str	r2, [r3, #0]
		return i;		/* Return the found drive number */
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	e001      	b.n	800622a <get_ldnumber+0x7a>
		return i;		/* Return the found drive number */
	}
#endif
	/* No drive prefix */
#if FF_FS_RPATH != 0
	return (int)CurrVol;	/* Default drive is current drive */
 8006226:	4b03      	ldr	r3, [pc, #12]	@ (8006234 <get_ldnumber+0x84>)
 8006228:	781b      	ldrb	r3, [r3, #0]
#else
	return 0;				/* Default drive is 0 */
#endif
}
 800622a:	4618      	mov	r0, r3
 800622c:	371c      	adds	r7, #28
 800622e:	46bd      	mov	sp, r7
 8006230:	bc80      	pop	{r7}
 8006232:	4770      	bx	lr
 8006234:	200022ae 	.word	0x200022ae

08006238 <check_fs>:

static UINT check_fs (	/* 0:FAT/FAT32 VBR, 1:exFAT VBR, 2:Not FAT and valid BS, 3:Not FAT and invalid BS, 4:Disk error */
	FATFS* fs,			/* Filesystem object */
	LBA_t sect			/* Sector to load and check if it is an FAT-VBR or not */
)
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b084      	sub	sp, #16
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	6039      	str	r1, [r7, #0]
	WORD w, sign;
	BYTE b;


	fs->wflag = 0; fs->winsect = (LBA_t)0 - 1;		/* Invaidate window */
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2200      	movs	r2, #0
 8006246:	711a      	strb	r2, [r3, #4]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	f04f 32ff 	mov.w	r2, #4294967295
 800624e:	64da      	str	r2, [r3, #76]	@ 0x4c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load the boot sector */
 8006250:	6839      	ldr	r1, [r7, #0]
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f7fd f970 	bl	8003538 <move_window>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <check_fs+0x2a>
 800625e:	2304      	movs	r3, #4
 8006260:	e099      	b.n	8006396 <check_fs+0x15e>
	sign = ld_word(fs->win + BS_55AA);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	3350      	adds	r3, #80	@ 0x50
 8006266:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800626a:	4618      	mov	r0, r3
 800626c:	f7fc feac 	bl	8002fc8 <ld_word>
 8006270:	4603      	mov	r3, r0
 8006272:	81fb      	strh	r3, [r7, #14]
#if FF_FS_EXFAT
	if (sign == 0xAA55 && !memcmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;	/* It is an exFAT VBR */
 8006274:	89fb      	ldrh	r3, [r7, #14]
 8006276:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 800627a:	4293      	cmp	r3, r2
 800627c:	d10b      	bne.n	8006296 <check_fs+0x5e>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	3350      	adds	r3, #80	@ 0x50
 8006282:	220b      	movs	r2, #11
 8006284:	4946      	ldr	r1, [pc, #280]	@ (80063a0 <check_fs+0x168>)
 8006286:	4618      	mov	r0, r3
 8006288:	f001 fb8c 	bl	80079a4 <memcmp>
 800628c:	4603      	mov	r3, r0
 800628e:	2b00      	cmp	r3, #0
 8006290:	d101      	bne.n	8006296 <check_fs+0x5e>
 8006292:	2301      	movs	r3, #1
 8006294:	e07f      	b.n	8006396 <check_fs+0x15e>
#endif
	b = fs->win[BS_JmpBoot];
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800629c:	737b      	strb	r3, [r7, #13]
	if (b == 0xEB || b == 0xE9 || b == 0xE8) {	/* Valid JumpBoot code? (short jump, near jump or near call) */
 800629e:	7b7b      	ldrb	r3, [r7, #13]
 80062a0:	2beb      	cmp	r3, #235	@ 0xeb
 80062a2:	d005      	beq.n	80062b0 <check_fs+0x78>
 80062a4:	7b7b      	ldrb	r3, [r7, #13]
 80062a6:	2be9      	cmp	r3, #233	@ 0xe9
 80062a8:	d002      	beq.n	80062b0 <check_fs+0x78>
 80062aa:	7b7b      	ldrb	r3, [r7, #13]
 80062ac:	2be8      	cmp	r3, #232	@ 0xe8
 80062ae:	d16a      	bne.n	8006386 <check_fs+0x14e>
		if (sign == 0xAA55 && !memcmp(fs->win + BS_FilSysType32, "FAT32   ", 8)) {
 80062b0:	89fb      	ldrh	r3, [r7, #14]
 80062b2:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d10c      	bne.n	80062d4 <check_fs+0x9c>
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	3350      	adds	r3, #80	@ 0x50
 80062be:	3352      	adds	r3, #82	@ 0x52
 80062c0:	2208      	movs	r2, #8
 80062c2:	4938      	ldr	r1, [pc, #224]	@ (80063a4 <check_fs+0x16c>)
 80062c4:	4618      	mov	r0, r3
 80062c6:	f001 fb6d 	bl	80079a4 <memcmp>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d101      	bne.n	80062d4 <check_fs+0x9c>
			return 0;	/* It is an FAT32 VBR */
 80062d0:	2300      	movs	r3, #0
 80062d2:	e060      	b.n	8006396 <check_fs+0x15e>
		}
		/* FAT volumes created in the early MS-DOS era lack BS_55AA and BS_FilSysType, so FAT VBR needs to be identified without them. */
		w = ld_word(fs->win + BPB_BytsPerSec);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	3350      	adds	r3, #80	@ 0x50
 80062d8:	330b      	adds	r3, #11
 80062da:	4618      	mov	r0, r3
 80062dc:	f7fc fe74 	bl	8002fc8 <ld_word>
 80062e0:	4603      	mov	r3, r0
 80062e2:	817b      	strh	r3, [r7, #10]
		b = fs->win[BPB_SecPerClus];
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80062ea:	737b      	strb	r3, [r7, #13]
		if ((w & (w - 1)) == 0 && w >= FF_MIN_SS && w <= FF_MAX_SS	/* Properness of sector size (512-4096 and 2^n) */
 80062ec:	897a      	ldrh	r2, [r7, #10]
 80062ee:	897b      	ldrh	r3, [r7, #10]
 80062f0:	3b01      	subs	r3, #1
 80062f2:	4013      	ands	r3, r2
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d146      	bne.n	8006386 <check_fs+0x14e>
 80062f8:	897b      	ldrh	r3, [r7, #10]
 80062fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062fe:	d342      	bcc.n	8006386 <check_fs+0x14e>
 8006300:	897b      	ldrh	r3, [r7, #10]
 8006302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006306:	d83e      	bhi.n	8006386 <check_fs+0x14e>
			&& b != 0 && (b & (b - 1)) == 0				/* Properness of cluster size (2^n) */
 8006308:	7b7b      	ldrb	r3, [r7, #13]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d03b      	beq.n	8006386 <check_fs+0x14e>
 800630e:	7b7a      	ldrb	r2, [r7, #13]
 8006310:	7b7b      	ldrb	r3, [r7, #13]
 8006312:	3b01      	subs	r3, #1
 8006314:	4013      	ands	r3, r2
 8006316:	2b00      	cmp	r3, #0
 8006318:	d135      	bne.n	8006386 <check_fs+0x14e>
			&& ld_word(fs->win + BPB_RsvdSecCnt) != 0	/* Properness of number of reserved sectors (MNBZ) */
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	3350      	adds	r3, #80	@ 0x50
 800631e:	330e      	adds	r3, #14
 8006320:	4618      	mov	r0, r3
 8006322:	f7fc fe51 	bl	8002fc8 <ld_word>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d02c      	beq.n	8006386 <check_fs+0x14e>
			&& (UINT)fs->win[BPB_NumFATs] - 1 <= 1		/* Properness of number of FATs (1 or 2) */
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8006332:	3b01      	subs	r3, #1
 8006334:	2b01      	cmp	r3, #1
 8006336:	d826      	bhi.n	8006386 <check_fs+0x14e>
			&& ld_word(fs->win + BPB_RootEntCnt) != 0	/* Properness of root dir size (MNBZ) */
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	3350      	adds	r3, #80	@ 0x50
 800633c:	3311      	adds	r3, #17
 800633e:	4618      	mov	r0, r3
 8006340:	f7fc fe42 	bl	8002fc8 <ld_word>
 8006344:	4603      	mov	r3, r0
 8006346:	2b00      	cmp	r3, #0
 8006348:	d01d      	beq.n	8006386 <check_fs+0x14e>
			&& (ld_word(fs->win + BPB_TotSec16) >= 128 || ld_dword(fs->win + BPB_TotSec32) >= 0x10000)	/* Properness of volume size (>=128) */
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	3350      	adds	r3, #80	@ 0x50
 800634e:	3313      	adds	r3, #19
 8006350:	4618      	mov	r0, r3
 8006352:	f7fc fe39 	bl	8002fc8 <ld_word>
 8006356:	4603      	mov	r3, r0
 8006358:	2b7f      	cmp	r3, #127	@ 0x7f
 800635a:	d809      	bhi.n	8006370 <check_fs+0x138>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	3350      	adds	r3, #80	@ 0x50
 8006360:	3320      	adds	r3, #32
 8006362:	4618      	mov	r0, r3
 8006364:	f7fc fe48 	bl	8002ff8 <ld_dword>
 8006368:	4603      	mov	r3, r0
 800636a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800636e:	d30a      	bcc.n	8006386 <check_fs+0x14e>
			&& ld_word(fs->win + BPB_FATSz16) != 0) {	/* Properness of FAT size (MNBZ) */
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	3350      	adds	r3, #80	@ 0x50
 8006374:	3316      	adds	r3, #22
 8006376:	4618      	mov	r0, r3
 8006378:	f7fc fe26 	bl	8002fc8 <ld_word>
 800637c:	4603      	mov	r3, r0
 800637e:	2b00      	cmp	r3, #0
 8006380:	d001      	beq.n	8006386 <check_fs+0x14e>
				return 0;	/* It can be presumed an FAT VBR */
 8006382:	2300      	movs	r3, #0
 8006384:	e007      	b.n	8006396 <check_fs+0x15e>
		}
	}
	return sign == 0xAA55 ? 2 : 3;	/* Not an FAT VBR (with valid or invalid BS) */
 8006386:	89fb      	ldrh	r3, [r7, #14]
 8006388:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 800638c:	4293      	cmp	r3, r2
 800638e:	d101      	bne.n	8006394 <check_fs+0x15c>
 8006390:	2302      	movs	r3, #2
 8006392:	e000      	b.n	8006396 <check_fs+0x15e>
 8006394:	2303      	movs	r3, #3
}
 8006396:	4618      	mov	r0, r3
 8006398:	3710      	adds	r7, #16
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}
 800639e:	bf00      	nop
 80063a0:	08007aac 	.word	0x08007aac
 80063a4:	08007ab8 	.word	0x08007ab8

080063a8 <find_volume>:

static UINT find_volume (	/* Returns BS status found in the hosting drive */
	FATFS* fs,		/* Filesystem object */
	UINT part		/* Partition to fined = 0:find as SFD and partitions, >0:forced partition number */
)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b088      	sub	sp, #32
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
	UINT fmt, i;
	DWORD mbr_pt[4];


	fmt = check_fs(fs, 0);				/* Load sector 0 and check if it is an FAT VBR as SFD format */
 80063b2:	2100      	movs	r1, #0
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f7ff ff3f 	bl	8006238 <check_fs>
 80063ba:	61b8      	str	r0, [r7, #24]
	if (fmt != 2 && (fmt >= 3 || part == 0)) return fmt;	/* Returns if it is an FAT VBR as auto scan, not a BS or disk error */
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	2b02      	cmp	r3, #2
 80063c0:	d007      	beq.n	80063d2 <find_volume+0x2a>
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d802      	bhi.n	80063ce <find_volume+0x26>
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <find_volume+0x2a>
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	e045      	b.n	800645e <find_volume+0xb6>
		}
		return 3;	/* Not found */
	}
#endif
	if (FF_MULTI_PARTITION && part > 4) return 3;	/* MBR has 4 partitions max */
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 80063d2:	2300      	movs	r3, #0
 80063d4:	61fb      	str	r3, [r7, #28]
 80063d6:	e014      	b.n	8006402 <find_volume+0x5a>
		mbr_pt[i] = ld_dword(fs->win + MBR_Table + i * SZ_PTE + PTE_StLba);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	011b      	lsls	r3, r3, #4
 80063e2:	f503 73e3 	add.w	r3, r3, #454	@ 0x1c6
 80063e6:	4413      	add	r3, r2
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7fc fe05 	bl	8002ff8 <ld_dword>
 80063ee:	4602      	mov	r2, r0
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	009b      	lsls	r3, r3, #2
 80063f4:	3320      	adds	r3, #32
 80063f6:	443b      	add	r3, r7
 80063f8:	f843 2c18 	str.w	r2, [r3, #-24]
	for (i = 0; i < 4; i++) {		/* Load partition offset in the MBR */
 80063fc:	69fb      	ldr	r3, [r7, #28]
 80063fe:	3301      	adds	r3, #1
 8006400:	61fb      	str	r3, [r7, #28]
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	2b03      	cmp	r3, #3
 8006406:	d9e7      	bls.n	80063d8 <find_volume+0x30>
	}
	i = part ? part - 1 : 0;		/* Table index to find first */
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d002      	beq.n	8006414 <find_volume+0x6c>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	3b01      	subs	r3, #1
 8006412:	e000      	b.n	8006416 <find_volume+0x6e>
 8006414:	2300      	movs	r3, #0
 8006416:	61fb      	str	r3, [r7, #28]
	do {							/* Find an FAT volume */
		fmt = mbr_pt[i] ? check_fs(fs, mbr_pt[i]) : 3;	/* Check if the partition is FAT */
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	3320      	adds	r3, #32
 800641e:	443b      	add	r3, r7
 8006420:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00b      	beq.n	8006440 <find_volume+0x98>
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	3320      	adds	r3, #32
 800642e:	443b      	add	r3, r7
 8006430:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8006434:	4619      	mov	r1, r3
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f7ff fefe 	bl	8006238 <check_fs>
 800643c:	4603      	mov	r3, r0
 800643e:	e000      	b.n	8006442 <find_volume+0x9a>
 8006440:	2303      	movs	r3, #3
 8006442:	61bb      	str	r3, [r7, #24]
	} while (part == 0 && fmt >= 2 && ++i < 4);
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d108      	bne.n	800645c <find_volume+0xb4>
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d905      	bls.n	800645c <find_volume+0xb4>
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	3301      	adds	r3, #1
 8006454:	61fb      	str	r3, [r7, #28]
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	2b03      	cmp	r3, #3
 800645a:	d9dd      	bls.n	8006418 <find_volume+0x70>
	return fmt;
 800645c:	69bb      	ldr	r3, [r7, #24]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3720      	adds	r7, #32
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
	...

08006468 <mount_volume>:
static FRESULT mount_volume (	/* FR_OK(0): successful, !=0: an error occurred */
	const TCHAR** path,			/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,				/* Pointer to pointer to the found filesystem object */
	BYTE mode					/* Desiered access mode to check write protection */
)
{
 8006468:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800646c:	b09a      	sub	sp, #104	@ 0x68
 800646e:	af00      	add	r7, sp, #0
 8006470:	61f8      	str	r0, [r7, #28]
 8006472:	61b9      	str	r1, [r7, #24]
 8006474:	4613      	mov	r3, r2
 8006476:	75fb      	strb	r3, [r7, #23]
	WORD nrsv;
	UINT fmt;


	/* Get logical drive number */
	*rfs = 0;
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	2200      	movs	r2, #0
 800647c:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800647e:	69f8      	ldr	r0, [r7, #28]
 8006480:	f7ff fe96 	bl	80061b0 <get_ldnumber>
 8006484:	64b8      	str	r0, [r7, #72]	@ 0x48
	if (vol < 0) return FR_INVALID_DRIVE;
 8006486:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006488:	2b00      	cmp	r3, #0
 800648a:	da01      	bge.n	8006490 <mount_volume+0x28>
 800648c:	230b      	movs	r3, #11
 800648e:	e370      	b.n	8006b72 <mount_volume+0x70a>

	/* Check if the filesystem object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the filesystem object */
 8006490:	4a9a      	ldr	r2, [pc, #616]	@ (80066fc <mount_volume+0x294>)
 8006492:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006494:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006498:	647b      	str	r3, [r7, #68]	@ 0x44
	if (!fs) return FR_NOT_ENABLED;		/* Is the filesystem object available? */
 800649a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800649c:	2b00      	cmp	r3, #0
 800649e:	d101      	bne.n	80064a4 <mount_volume+0x3c>
 80064a0:	230c      	movs	r3, #12
 80064a2:	e366      	b.n	8006b72 <mount_volume+0x70a>
#if FF_FS_REENTRANT
	if (!lock_volume(fs, 1)) return FR_TIMEOUT;	/* Lock the volume, and system if needed */
#endif
	*rfs = fs;							/* Return pointer to the filesystem object */
 80064a4:	69bb      	ldr	r3, [r7, #24]
 80064a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80064a8:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80064aa:	7dfb      	ldrb	r3, [r7, #23]
 80064ac:	f023 0301 	bic.w	r3, r3, #1
 80064b0:	75fb      	strb	r3, [r7, #23]
	if (fs->fs_type != 0) {				/* If the volume has been mounted */
 80064b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d01a      	beq.n	80064f0 <mount_volume+0x88>
		stat = disk_status(fs->pdrv);
 80064ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064bc:	785b      	ldrb	r3, [r3, #1]
 80064be:	4618      	mov	r0, r3
 80064c0:	f7fc fcf1 	bl	8002ea6 <disk_status>
 80064c4:	4603      	mov	r3, r0
 80064c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80064ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80064ce:	f003 0301 	and.w	r3, r3, #1
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10c      	bne.n	80064f0 <mount_volume+0x88>
			if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80064d6:	7dfb      	ldrb	r3, [r7, #23]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d007      	beq.n	80064ec <mount_volume+0x84>
 80064dc:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80064e0:	f003 0304 	and.w	r3, r3, #4
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d001      	beq.n	80064ec <mount_volume+0x84>
				return FR_WRITE_PROTECTED;
 80064e8:	230a      	movs	r3, #10
 80064ea:	e342      	b.n	8006b72 <mount_volume+0x70a>
			}
			return FR_OK;				/* The filesystem object is already valid */
 80064ec:	2300      	movs	r3, #0
 80064ee:	e340      	b.n	8006b72 <mount_volume+0x70a>
	}

	/* The filesystem object is not valid. */
	/* Following code attempts to mount the volume. (find an FAT volume, analyze the BPB and initialize the filesystem object) */

	fs->fs_type = 0;					/* Invalidate the filesystem object */
 80064f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064f2:	2200      	movs	r2, #0
 80064f4:	701a      	strb	r2, [r3, #0]
	stat = disk_initialize(fs->pdrv);	/* Initialize the volume hosting physical drive */
 80064f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80064f8:	785b      	ldrb	r3, [r3, #1]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f7fc fceb 	bl	8002ed6 <disk_initialize>
 8006500:	4603      	mov	r3, r0
 8006502:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8006506:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800650a:	f003 0301 	and.w	r3, r3, #1
 800650e:	2b00      	cmp	r3, #0
 8006510:	d001      	beq.n	8006516 <mount_volume+0xae>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006512:	2303      	movs	r3, #3
 8006514:	e32d      	b.n	8006b72 <mount_volume+0x70a>
	}
	if (!FF_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8006516:	7dfb      	ldrb	r3, [r7, #23]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d007      	beq.n	800652c <mount_volume+0xc4>
 800651c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <mount_volume+0xc4>
		return FR_WRITE_PROTECTED;
 8006528:	230a      	movs	r3, #10
 800652a:	e322      	b.n	8006b72 <mount_volume+0x70a>
	}
#if FF_MAX_SS != FF_MIN_SS				/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->pdrv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800652c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800652e:	7858      	ldrb	r0, [r3, #1]
 8006530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006532:	330c      	adds	r3, #12
 8006534:	461a      	mov	r2, r3
 8006536:	2102      	movs	r1, #2
 8006538:	f7fc fd1f 	bl	8002f7a <disk_ioctl>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <mount_volume+0xde>
 8006542:	2301      	movs	r3, #1
 8006544:	e315      	b.n	8006b72 <mount_volume+0x70a>
	if (SS(fs) > FF_MAX_SS || SS(fs) < FF_MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8006546:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006548:	899b      	ldrh	r3, [r3, #12]
 800654a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800654e:	d80d      	bhi.n	800656c <mount_volume+0x104>
 8006550:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006552:	899b      	ldrh	r3, [r3, #12]
 8006554:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006558:	d308      	bcc.n	800656c <mount_volume+0x104>
 800655a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800655c:	899b      	ldrh	r3, [r3, #12]
 800655e:	461a      	mov	r2, r3
 8006560:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006562:	899b      	ldrh	r3, [r3, #12]
 8006564:	3b01      	subs	r3, #1
 8006566:	4013      	ands	r3, r2
 8006568:	2b00      	cmp	r3, #0
 800656a:	d001      	beq.n	8006570 <mount_volume+0x108>
 800656c:	2301      	movs	r3, #1
 800656e:	e300      	b.n	8006b72 <mount_volume+0x70a>
#endif

	/* Find an FAT volume on the hosting drive */
	fmt = find_volume(fs, LD2PT(vol));
 8006570:	2100      	movs	r1, #0
 8006572:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8006574:	f7ff ff18 	bl	80063a8 <find_volume>
 8006578:	65b8      	str	r0, [r7, #88]	@ 0x58
	if (fmt == 4) return FR_DISK_ERR;		/* An error occurred in the disk I/O layer */
 800657a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800657c:	2b04      	cmp	r3, #4
 800657e:	d101      	bne.n	8006584 <mount_volume+0x11c>
 8006580:	2301      	movs	r3, #1
 8006582:	e2f6      	b.n	8006b72 <mount_volume+0x70a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8006584:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006586:	2b01      	cmp	r3, #1
 8006588:	d901      	bls.n	800658e <mount_volume+0x126>
 800658a:	230d      	movs	r3, #13
 800658c:	e2f1      	b.n	8006b72 <mount_volume+0x70a>
	bsect = fs->winsect;					/* Volume offset in the hosting physical drive */
 800658e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006592:	63fb      	str	r3, [r7, #60]	@ 0x3c

	/* An FAT volume is found (bsect). Following code initializes the filesystem object */

#if FF_FS_EXFAT
	if (fmt == 1) {
 8006594:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006596:	2b01      	cmp	r3, #1
 8006598:	f040 8158 	bne.w	800684c <mount_volume+0x3e4>
		QWORD maxlba;
		DWORD so, cv, bcl, i;

		for (i = BPB_ZeroedEx; i < BPB_ZeroedEx + 53 && fs->win[i] == 0; i++) ;	/* Check zero filler */
 800659c:	230b      	movs	r3, #11
 800659e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065a0:	e002      	b.n	80065a8 <mount_volume+0x140>
 80065a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065a4:	3301      	adds	r3, #1
 80065a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80065a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065aa:	2b3f      	cmp	r3, #63	@ 0x3f
 80065ac:	d806      	bhi.n	80065bc <mount_volume+0x154>
 80065ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065b2:	4413      	add	r3, r2
 80065b4:	3350      	adds	r3, #80	@ 0x50
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d0f2      	beq.n	80065a2 <mount_volume+0x13a>
		if (i < BPB_ZeroedEx + 53) return FR_NO_FILESYSTEM;
 80065bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065be:	2b3f      	cmp	r3, #63	@ 0x3f
 80065c0:	d801      	bhi.n	80065c6 <mount_volume+0x15e>
 80065c2:	230d      	movs	r3, #13
 80065c4:	e2d5      	b.n	8006b72 <mount_volume+0x70a>

		if (ld_word(fs->win + BPB_FSVerEx) != 0x100) return FR_NO_FILESYSTEM;	/* Check exFAT version (must be version 1.0) */
 80065c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065c8:	3350      	adds	r3, #80	@ 0x50
 80065ca:	3368      	adds	r3, #104	@ 0x68
 80065cc:	4618      	mov	r0, r3
 80065ce:	f7fc fcfb 	bl	8002fc8 <ld_word>
 80065d2:	4603      	mov	r3, r0
 80065d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80065d8:	d001      	beq.n	80065de <mount_volume+0x176>
 80065da:	230d      	movs	r3, #13
 80065dc:	e2c9      	b.n	8006b72 <mount_volume+0x70a>

		if (1 << fs->win[BPB_BytsPerSecEx] != SS(fs)) {	/* (BPB_BytsPerSecEx must be equal to the physical sector size) */
 80065de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065e0:	f893 30bc 	ldrb.w	r3, [r3, #188]	@ 0xbc
 80065e4:	461a      	mov	r2, r3
 80065e6:	2301      	movs	r3, #1
 80065e8:	4093      	lsls	r3, r2
 80065ea:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065ec:	8992      	ldrh	r2, [r2, #12]
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d001      	beq.n	80065f6 <mount_volume+0x18e>
			return FR_NO_FILESYSTEM;
 80065f2:	230d      	movs	r3, #13
 80065f4:	e2bd      	b.n	8006b72 <mount_volume+0x70a>
		}

		maxlba = ld_qword(fs->win + BPB_TotSecEx) + bsect;	/* Last LBA of the volume + 1 */
 80065f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065f8:	3350      	adds	r3, #80	@ 0x50
 80065fa:	3348      	adds	r3, #72	@ 0x48
 80065fc:	4618      	mov	r0, r3
 80065fe:	f7fc fd1d 	bl	800303c <ld_qword>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006608:	2000      	movs	r0, #0
 800660a:	60b9      	str	r1, [r7, #8]
 800660c:	60f8      	str	r0, [r7, #12]
 800660e:	68b9      	ldr	r1, [r7, #8]
 8006610:	1851      	adds	r1, r2, r1
 8006612:	6039      	str	r1, [r7, #0]
 8006614:	68f9      	ldr	r1, [r7, #12]
 8006616:	eb43 0101 	adc.w	r1, r3, r1
 800661a:	6079      	str	r1, [r7, #4]
 800661c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006620:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
		if (!FF_LBA64 && maxlba >= 0x100000000) return FR_NO_FILESYSTEM;	/* (It cannot be accessed in 32-bit LBA) */
 8006624:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006628:	2b01      	cmp	r3, #1
 800662a:	d301      	bcc.n	8006630 <mount_volume+0x1c8>
 800662c:	230d      	movs	r3, #13
 800662e:	e2a0      	b.n	8006b72 <mount_volume+0x70a>

		fs->fsize = ld_dword(fs->win + BPB_FatSzEx);	/* Number of sectors per FAT */
 8006630:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006632:	3350      	adds	r3, #80	@ 0x50
 8006634:	3354      	adds	r3, #84	@ 0x54
 8006636:	4618      	mov	r0, r3
 8006638:	f7fc fcde 	bl	8002ff8 <ld_dword>
 800663c:	4602      	mov	r2, r0
 800663e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006640:	635a      	str	r2, [r3, #52]	@ 0x34

		fs->n_fats = fs->win[BPB_NumFATsEx];			/* Number of FATs */
 8006642:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006644:	f893 20be 	ldrb.w	r2, [r3, #190]	@ 0xbe
 8006648:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800664a:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1) return FR_NO_FILESYSTEM;	/* (Supports only 1 FAT) */
 800664c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800664e:	78db      	ldrb	r3, [r3, #3]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d001      	beq.n	8006658 <mount_volume+0x1f0>
 8006654:	230d      	movs	r3, #13
 8006656:	e28c      	b.n	8006b72 <mount_volume+0x70a>

		fs->csize = 1 << fs->win[BPB_SecPerClusEx];		/* Cluster size */
 8006658:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800665a:	f893 30bd 	ldrb.w	r3, [r3, #189]	@ 0xbd
 800665e:	461a      	mov	r2, r3
 8006660:	2301      	movs	r3, #1
 8006662:	4093      	lsls	r3, r2
 8006664:	b29a      	uxth	r2, r3
 8006666:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006668:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0)	return FR_NO_FILESYSTEM;	/* (Must be 1..32768 sectors) */
 800666a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800666c:	895b      	ldrh	r3, [r3, #10]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d101      	bne.n	8006676 <mount_volume+0x20e>
 8006672:	230d      	movs	r3, #13
 8006674:	e27d      	b.n	8006b72 <mount_volume+0x70a>

		nclst = ld_dword(fs->win + BPB_NumClusEx);		/* Number of clusters */
 8006676:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006678:	3350      	adds	r3, #80	@ 0x50
 800667a:	335c      	adds	r3, #92	@ 0x5c
 800667c:	4618      	mov	r0, r3
 800667e:	f7fc fcbb 	bl	8002ff8 <ld_dword>
 8006682:	6338      	str	r0, [r7, #48]	@ 0x30
		if (nclst > MAX_EXFAT) return FR_NO_FILESYSTEM;	/* (Too many clusters) */
 8006684:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006686:	4a1e      	ldr	r2, [pc, #120]	@ (8006700 <mount_volume+0x298>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d901      	bls.n	8006690 <mount_volume+0x228>
 800668c:	230d      	movs	r3, #13
 800668e:	e270      	b.n	8006b72 <mount_volume+0x70a>
		fs->n_fatent = nclst + 2;
 8006690:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006692:	1c9a      	adds	r2, r3, #2
 8006694:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006696:	631a      	str	r2, [r3, #48]	@ 0x30

		/* Boundaries and Limits */
		fs->volbase = bsect;
 8006698:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800669a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800669c:	639a      	str	r2, [r3, #56]	@ 0x38
		fs->database = bsect + ld_dword(fs->win + BPB_DataOfsEx);
 800669e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066a0:	3350      	adds	r3, #80	@ 0x50
 80066a2:	3358      	adds	r3, #88	@ 0x58
 80066a4:	4618      	mov	r0, r3
 80066a6:	f7fc fca7 	bl	8002ff8 <ld_dword>
 80066aa:	4602      	mov	r2, r0
 80066ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066ae:	441a      	add	r2, r3
 80066b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066b2:	645a      	str	r2, [r3, #68]	@ 0x44
		fs->fatbase = bsect + ld_dword(fs->win + BPB_FatOfsEx);
 80066b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066b6:	3350      	adds	r3, #80	@ 0x50
 80066b8:	3350      	adds	r3, #80	@ 0x50
 80066ba:	4618      	mov	r0, r3
 80066bc:	f7fc fc9c 	bl	8002ff8 <ld_dword>
 80066c0:	4602      	mov	r2, r0
 80066c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066c4:	441a      	add	r2, r3
 80066c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066c8:	63da      	str	r2, [r3, #60]	@ 0x3c
		if (maxlba < (QWORD)fs->database + nclst * fs->csize) return FR_NO_FILESYSTEM;	/* (Volume size must not be smaller than the size required) */
 80066ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066ce:	2200      	movs	r2, #0
 80066d0:	469a      	mov	sl, r3
 80066d2:	4693      	mov	fp, r2
 80066d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066d6:	895b      	ldrh	r3, [r3, #10]
 80066d8:	461a      	mov	r2, r3
 80066da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066dc:	fb02 f303 	mul.w	r3, r2, r3
 80066e0:	2200      	movs	r2, #0
 80066e2:	4698      	mov	r8, r3
 80066e4:	4691      	mov	r9, r2
 80066e6:	eb1a 0408 	adds.w	r4, sl, r8
 80066ea:	eb4b 0509 	adc.w	r5, fp, r9
 80066ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80066f2:	42a2      	cmp	r2, r4
 80066f4:	41ab      	sbcs	r3, r5
 80066f6:	d205      	bcs.n	8006704 <mount_volume+0x29c>
 80066f8:	230d      	movs	r3, #13
 80066fa:	e23a      	b.n	8006b72 <mount_volume+0x70a>
 80066fc:	200022a8 	.word	0x200022a8
 8006700:	7ffffffd 	.word	0x7ffffffd
		fs->dirbase = ld_dword(fs->win + BPB_RootClusEx);
 8006704:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006706:	3350      	adds	r3, #80	@ 0x50
 8006708:	3360      	adds	r3, #96	@ 0x60
 800670a:	4618      	mov	r0, r3
 800670c:	f7fc fc74 	bl	8002ff8 <ld_dword>
 8006710:	4602      	mov	r2, r0
 8006712:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006714:	641a      	str	r2, [r3, #64]	@ 0x40

		/* Get bitmap location and check if it is contiguous (implementation assumption) */
		so = i = 0;
 8006716:	2300      	movs	r3, #0
 8006718:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800671a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800671c:	657b      	str	r3, [r7, #84]	@ 0x54
		for (;;) {	/* Find the bitmap entry in the root directory (in only first cluster) */
			if (i == 0) {
 800671e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006720:	2b00      	cmp	r3, #0
 8006722:	d11c      	bne.n	800675e <mount_volume+0x2f6>
				if (so >= fs->csize) return FR_NO_FILESYSTEM;	/* Not found? */
 8006724:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006726:	895b      	ldrh	r3, [r3, #10]
 8006728:	461a      	mov	r2, r3
 800672a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800672c:	4293      	cmp	r3, r2
 800672e:	d301      	bcc.n	8006734 <mount_volume+0x2cc>
 8006730:	230d      	movs	r3, #13
 8006732:	e21e      	b.n	8006b72 <mount_volume+0x70a>
				if (move_window(fs, clst2sect(fs, (DWORD)fs->dirbase) + so) != FR_OK) return FR_DISK_ERR;
 8006734:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006738:	4619      	mov	r1, r3
 800673a:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800673c:	f7fd f80e 	bl	800375c <clst2sect>
 8006740:	4602      	mov	r2, r0
 8006742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006744:	4413      	add	r3, r2
 8006746:	4619      	mov	r1, r3
 8006748:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800674a:	f7fc fef5 	bl	8003538 <move_window>
 800674e:	4603      	mov	r3, r0
 8006750:	2b00      	cmp	r3, #0
 8006752:	d001      	beq.n	8006758 <mount_volume+0x2f0>
 8006754:	2301      	movs	r3, #1
 8006756:	e20c      	b.n	8006b72 <mount_volume+0x70a>
				so++;
 8006758:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800675a:	3301      	adds	r3, #1
 800675c:	657b      	str	r3, [r7, #84]	@ 0x54
			}
			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
 800675e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006760:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006762:	4413      	add	r3, r2
 8006764:	3350      	adds	r3, #80	@ 0x50
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	2b81      	cmp	r3, #129	@ 0x81
 800676a:	d00a      	beq.n	8006782 <mount_volume+0x31a>
			i = (i + SZDIRE) % SS(fs);	/* Next entry */
 800676c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800676e:	3320      	adds	r3, #32
 8006770:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006772:	8992      	ldrh	r2, [r2, #12]
 8006774:	fbb3 f1f2 	udiv	r1, r3, r2
 8006778:	fb01 f202 	mul.w	r2, r1, r2
 800677c:	1a9b      	subs	r3, r3, r2
 800677e:	64fb      	str	r3, [r7, #76]	@ 0x4c
			if (i == 0) {
 8006780:	e7cd      	b.n	800671e <mount_volume+0x2b6>
			if (fs->win[i] == ET_BITMAP) break;			/* Is it a bitmap entry? */
 8006782:	bf00      	nop
		}
		bcl = ld_dword(fs->win + i + 20);				/* Bitmap cluster */
 8006784:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006786:	f103 0250 	add.w	r2, r3, #80	@ 0x50
 800678a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800678c:	3314      	adds	r3, #20
 800678e:	4413      	add	r3, r2
 8006790:	4618      	mov	r0, r3
 8006792:	f7fc fc31 	bl	8002ff8 <ld_dword>
 8006796:	6538      	str	r0, [r7, #80]	@ 0x50
		if (bcl < 2 || bcl >= fs->n_fatent) return FR_NO_FILESYSTEM;	/* (Wrong cluster#) */
 8006798:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800679a:	2b01      	cmp	r3, #1
 800679c:	d904      	bls.n	80067a8 <mount_volume+0x340>
 800679e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80067a2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80067a4:	429a      	cmp	r2, r3
 80067a6:	d301      	bcc.n	80067ac <mount_volume+0x344>
 80067a8:	230d      	movs	r3, #13
 80067aa:	e1e2      	b.n	8006b72 <mount_volume+0x70a>
		fs->bitbase = fs->database + fs->csize * (bcl - 2);	/* Bitmap sector */
 80067ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067ae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80067b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067b2:	895b      	ldrh	r3, [r3, #10]
 80067b4:	4619      	mov	r1, r3
 80067b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067b8:	3b02      	subs	r3, #2
 80067ba:	fb01 f303 	mul.w	r3, r1, r3
 80067be:	441a      	add	r2, r3
 80067c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067c2:	649a      	str	r2, [r3, #72]	@ 0x48
		for (;;) {	/* Check if bitmap is contiguous */
			if (move_window(fs, fs->fatbase + bcl / (SS(fs) / 4)) != FR_OK) return FR_DISK_ERR;
 80067c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067c6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80067c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067ca:	899b      	ldrh	r3, [r3, #12]
 80067cc:	089b      	lsrs	r3, r3, #2
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	4619      	mov	r1, r3
 80067d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067d4:	fbb3 f3f1 	udiv	r3, r3, r1
 80067d8:	4413      	add	r3, r2
 80067da:	4619      	mov	r1, r3
 80067dc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80067de:	f7fc feab 	bl	8003538 <move_window>
 80067e2:	4603      	mov	r3, r0
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d001      	beq.n	80067ec <mount_volume+0x384>
 80067e8:	2301      	movs	r3, #1
 80067ea:	e1c2      	b.n	8006b72 <mount_volume+0x70a>
			cv = ld_dword(fs->win + bcl % (SS(fs) / 4) * 4);
 80067ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067ee:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 80067f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067f4:	899b      	ldrh	r3, [r3, #12]
 80067f6:	089b      	lsrs	r3, r3, #2
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	461a      	mov	r2, r3
 80067fc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067fe:	fbb3 f0f2 	udiv	r0, r3, r2
 8006802:	fb00 f202 	mul.w	r2, r0, r2
 8006806:	1a9b      	subs	r3, r3, r2
 8006808:	009b      	lsls	r3, r3, #2
 800680a:	440b      	add	r3, r1
 800680c:	4618      	mov	r0, r3
 800680e:	f7fc fbf3 	bl	8002ff8 <ld_dword>
 8006812:	6278      	str	r0, [r7, #36]	@ 0x24
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 8006814:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006816:	f1b3 3fff 	cmp.w	r3, #4294967295
 800681a:	d008      	beq.n	800682e <mount_volume+0x3c6>
			if (cv != ++bcl) return FR_NO_FILESYSTEM;	/* Fragmented bitmap? */
 800681c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800681e:	3301      	adds	r3, #1
 8006820:	653b      	str	r3, [r7, #80]	@ 0x50
 8006822:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006826:	429a      	cmp	r2, r3
 8006828:	d0cc      	beq.n	80067c4 <mount_volume+0x35c>
 800682a:	230d      	movs	r3, #13
 800682c:	e1a1      	b.n	8006b72 <mount_volume+0x70a>
			if (cv == 0xFFFFFFFF) break;				/* Last link? */
 800682e:	bf00      	nop
		}

#if !FF_FS_READONLY
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Invalidate cluster allocation information */
 8006830:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006832:	f04f 32ff 	mov.w	r2, #4294967295
 8006836:	61da      	str	r2, [r3, #28]
 8006838:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800683a:	69da      	ldr	r2, [r3, #28]
 800683c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800683e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0;	/* Enable to sync PercInUse value in VBR */
 8006840:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006842:	2200      	movs	r2, #0
 8006844:	715a      	strb	r2, [r3, #5]
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
 8006846:	2304      	movs	r3, #4
 8006848:	65bb      	str	r3, [r7, #88]	@ 0x58
 800684a:	e17a      	b.n	8006b42 <mount_volume+0x6da>
	} else
#endif	/* FF_FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800684c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800684e:	3350      	adds	r3, #80	@ 0x50
 8006850:	330b      	adds	r3, #11
 8006852:	4618      	mov	r0, r3
 8006854:	f7fc fbb8 	bl	8002fc8 <ld_word>
 8006858:	4603      	mov	r3, r0
 800685a:	461a      	mov	r2, r3
 800685c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800685e:	899b      	ldrh	r3, [r3, #12]
 8006860:	429a      	cmp	r2, r3
 8006862:	d001      	beq.n	8006868 <mount_volume+0x400>
 8006864:	230d      	movs	r3, #13
 8006866:	e184      	b.n	8006b72 <mount_volume+0x70a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8006868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800686a:	3350      	adds	r3, #80	@ 0x50
 800686c:	3316      	adds	r3, #22
 800686e:	4618      	mov	r0, r3
 8006870:	f7fc fbaa 	bl	8002fc8 <ld_word>
 8006874:	4603      	mov	r3, r0
 8006876:	663b      	str	r3, [r7, #96]	@ 0x60
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8006878:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800687a:	2b00      	cmp	r3, #0
 800687c:	d106      	bne.n	800688c <mount_volume+0x424>
 800687e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006880:	3350      	adds	r3, #80	@ 0x50
 8006882:	3324      	adds	r3, #36	@ 0x24
 8006884:	4618      	mov	r0, r3
 8006886:	f7fc fbb7 	bl	8002ff8 <ld_dword>
 800688a:	6638      	str	r0, [r7, #96]	@ 0x60
		fs->fsize = fasize;
 800688c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800688e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006890:	635a      	str	r2, [r3, #52]	@ 0x34

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8006892:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006894:	f893 2060 	ldrb.w	r2, [r3, #96]	@ 0x60
 8006898:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800689a:	70da      	strb	r2, [r3, #3]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800689c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800689e:	78db      	ldrb	r3, [r3, #3]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d005      	beq.n	80068b0 <mount_volume+0x448>
 80068a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068a6:	78db      	ldrb	r3, [r3, #3]
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d001      	beq.n	80068b0 <mount_volume+0x448>
 80068ac:	230d      	movs	r3, #13
 80068ae:	e160      	b.n	8006b72 <mount_volume+0x70a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 80068b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068b2:	78db      	ldrb	r3, [r3, #3]
 80068b4:	461a      	mov	r2, r3
 80068b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80068b8:	fb02 f303 	mul.w	r3, r2, r3
 80068bc:	663b      	str	r3, [r7, #96]	@ 0x60

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80068be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068c0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80068c4:	461a      	mov	r2, r3
 80068c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068c8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80068ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068cc:	895b      	ldrh	r3, [r3, #10]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d008      	beq.n	80068e4 <mount_volume+0x47c>
 80068d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068d4:	895b      	ldrh	r3, [r3, #10]
 80068d6:	461a      	mov	r2, r3
 80068d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068da:	895b      	ldrh	r3, [r3, #10]
 80068dc:	3b01      	subs	r3, #1
 80068de:	4013      	ands	r3, r2
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d001      	beq.n	80068e8 <mount_volume+0x480>
 80068e4:	230d      	movs	r3, #13
 80068e6:	e144      	b.n	8006b72 <mount_volume+0x70a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80068e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068ea:	3350      	adds	r3, #80	@ 0x50
 80068ec:	3311      	adds	r3, #17
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7fc fb6a 	bl	8002fc8 <ld_word>
 80068f4:	4603      	mov	r3, r0
 80068f6:	461a      	mov	r2, r3
 80068f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068fa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80068fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80068fe:	891b      	ldrh	r3, [r3, #8]
 8006900:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006902:	8992      	ldrh	r2, [r2, #12]
 8006904:	0952      	lsrs	r2, r2, #5
 8006906:	b292      	uxth	r2, r2
 8006908:	fbb3 f1f2 	udiv	r1, r3, r2
 800690c:	fb01 f202 	mul.w	r2, r1, r2
 8006910:	1a9b      	subs	r3, r3, r2
 8006912:	b29b      	uxth	r3, r3
 8006914:	2b00      	cmp	r3, #0
 8006916:	d001      	beq.n	800691c <mount_volume+0x4b4>
 8006918:	230d      	movs	r3, #13
 800691a:	e12a      	b.n	8006b72 <mount_volume+0x70a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800691c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800691e:	3350      	adds	r3, #80	@ 0x50
 8006920:	3313      	adds	r3, #19
 8006922:	4618      	mov	r0, r3
 8006924:	f7fc fb50 	bl	8002fc8 <ld_word>
 8006928:	4603      	mov	r3, r0
 800692a:	667b      	str	r3, [r7, #100]	@ 0x64
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800692c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800692e:	2b00      	cmp	r3, #0
 8006930:	d106      	bne.n	8006940 <mount_volume+0x4d8>
 8006932:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006934:	3350      	adds	r3, #80	@ 0x50
 8006936:	3320      	adds	r3, #32
 8006938:	4618      	mov	r0, r3
 800693a:	f7fc fb5d 	bl	8002ff8 <ld_dword>
 800693e:	6678      	str	r0, [r7, #100]	@ 0x64

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8006940:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006942:	3350      	adds	r3, #80	@ 0x50
 8006944:	330e      	adds	r3, #14
 8006946:	4618      	mov	r0, r3
 8006948:	f7fc fb3e 	bl	8002fc8 <ld_word>
 800694c:	4603      	mov	r3, r0
 800694e:	877b      	strh	r3, [r7, #58]	@ 0x3a
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8006950:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8006952:	2b00      	cmp	r3, #0
 8006954:	d101      	bne.n	800695a <mount_volume+0x4f2>
 8006956:	230d      	movs	r3, #13
 8006958:	e10b      	b.n	8006b72 <mount_volume+0x70a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800695a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 800695c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800695e:	4413      	add	r3, r2
 8006960:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006962:	8911      	ldrh	r1, [r2, #8]
 8006964:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006966:	8992      	ldrh	r2, [r2, #12]
 8006968:	0952      	lsrs	r2, r2, #5
 800696a:	b292      	uxth	r2, r2
 800696c:	fbb1 f2f2 	udiv	r2, r1, r2
 8006970:	b292      	uxth	r2, r2
 8006972:	4413      	add	r3, r2
 8006974:	637b      	str	r3, [r7, #52]	@ 0x34
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8006976:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006978:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800697a:	429a      	cmp	r2, r3
 800697c:	d201      	bcs.n	8006982 <mount_volume+0x51a>
 800697e:	230d      	movs	r3, #13
 8006980:	e0f7      	b.n	8006b72 <mount_volume+0x70a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8006982:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006986:	1ad3      	subs	r3, r2, r3
 8006988:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800698a:	8952      	ldrh	r2, [r2, #10]
 800698c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006990:	633b      	str	r3, [r7, #48]	@ 0x30
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006992:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006994:	2b00      	cmp	r3, #0
 8006996:	d101      	bne.n	800699c <mount_volume+0x534>
 8006998:	230d      	movs	r3, #13
 800699a:	e0ea      	b.n	8006b72 <mount_volume+0x70a>
		fmt = 0;
 800699c:	2300      	movs	r3, #0
 800699e:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (nclst <= MAX_FAT32) fmt = FS_FAT32;
 80069a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a2:	4a76      	ldr	r2, [pc, #472]	@ (8006b7c <mount_volume+0x714>)
 80069a4:	4293      	cmp	r3, r2
 80069a6:	d801      	bhi.n	80069ac <mount_volume+0x544>
 80069a8:	2303      	movs	r3, #3
 80069aa:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80069ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ae:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d801      	bhi.n	80069ba <mount_volume+0x552>
 80069b6:	2302      	movs	r3, #2
 80069b8:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80069ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069bc:	f640 72f5 	movw	r2, #4085	@ 0xff5
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d801      	bhi.n	80069c8 <mount_volume+0x560>
 80069c4:	2301      	movs	r3, #1
 80069c6:	65bb      	str	r3, [r7, #88]	@ 0x58
		if (fmt == 0) return FR_NO_FILESYSTEM;
 80069c8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d101      	bne.n	80069d2 <mount_volume+0x56a>
 80069ce:	230d      	movs	r3, #13
 80069d0:	e0cf      	b.n	8006b72 <mount_volume+0x70a>

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 80069d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d4:	1c9a      	adds	r2, r3, #2
 80069d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069d8:	631a      	str	r2, [r3, #48]	@ 0x30
		fs->volbase = bsect;							/* Volume start sector */
 80069da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069dc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80069de:	639a      	str	r2, [r3, #56]	@ 0x38
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80069e0:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 80069e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80069e4:	441a      	add	r2, r3
 80069e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069e8:	63da      	str	r2, [r3, #60]	@ 0x3c
		fs->database = bsect + sysect;					/* Data start sector */
 80069ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80069ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069ee:	441a      	add	r2, r3
 80069f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069f2:	645a      	str	r2, [r3, #68]	@ 0x44
		if (fmt == FS_FAT32) {
 80069f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80069f6:	2b03      	cmp	r3, #3
 80069f8:	d11e      	bne.n	8006a38 <mount_volume+0x5d0>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80069fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80069fc:	3350      	adds	r3, #80	@ 0x50
 80069fe:	332a      	adds	r3, #42	@ 0x2a
 8006a00:	4618      	mov	r0, r3
 8006a02:	f7fc fae1 	bl	8002fc8 <ld_word>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d001      	beq.n	8006a10 <mount_volume+0x5a8>
 8006a0c:	230d      	movs	r3, #13
 8006a0e:	e0b0      	b.n	8006b72 <mount_volume+0x70a>
			if (fs->n_rootdir != 0) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8006a10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a12:	891b      	ldrh	r3, [r3, #8]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d001      	beq.n	8006a1c <mount_volume+0x5b4>
 8006a18:	230d      	movs	r3, #13
 8006a1a:	e0aa      	b.n	8006b72 <mount_volume+0x70a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8006a1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a1e:	3350      	adds	r3, #80	@ 0x50
 8006a20:	332c      	adds	r3, #44	@ 0x2c
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7fc fae8 	bl	8002ff8 <ld_dword>
 8006a28:	4602      	mov	r2, r0
 8006a2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a2c:	641a      	str	r2, [r3, #64]	@ 0x40
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006a2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a36:	e01e      	b.n	8006a76 <mount_volume+0x60e>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8006a38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a3a:	891b      	ldrh	r3, [r3, #8]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <mount_volume+0x5dc>
 8006a40:	230d      	movs	r3, #13
 8006a42:	e096      	b.n	8006b72 <mount_volume+0x70a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006a44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a46:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a48:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a4a:	441a      	add	r2, r3
 8006a4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a4e:	641a      	str	r2, [r3, #64]	@ 0x40
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006a50:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d103      	bne.n	8006a5e <mount_volume+0x5f6>
 8006a56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a5a:	005b      	lsls	r3, r3, #1
 8006a5c:	e00a      	b.n	8006a74 <mount_volume+0x60c>
 8006a5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a62:	4613      	mov	r3, r2
 8006a64:	005b      	lsls	r3, r3, #1
 8006a66:	4413      	add	r3, r2
 8006a68:	085a      	lsrs	r2, r3, #1
 8006a6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006a74:	65fb      	str	r3, [r7, #92]	@ 0x5c
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8006a76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a7c:	899b      	ldrh	r3, [r3, #12]
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a82:	440b      	add	r3, r1
 8006a84:	3b01      	subs	r3, #1
 8006a86:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006a88:	8989      	ldrh	r1, [r1, #12]
 8006a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	d201      	bcs.n	8006a96 <mount_volume+0x62e>
 8006a92:	230d      	movs	r3, #13
 8006a94:	e06d      	b.n	8006b72 <mount_volume+0x70a>

#if !FF_FS_READONLY
		/* Get FSInfo if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Invalidate cluster allocation information */
 8006a96:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a98:	f04f 32ff 	mov.w	r2, #4294967295
 8006a9c:	61da      	str	r2, [r3, #28]
 8006a9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006aa0:	69da      	ldr	r2, [r3, #28]
 8006aa2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006aa4:	619a      	str	r2, [r3, #24]
		fs->fsi_flag = 0x80;	/* Disable FSInfo by default */
 8006aa6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006aa8:	2280      	movs	r2, #128	@ 0x80
 8006aaa:	715a      	strb	r2, [r3, #5]
		if (fmt == FS_FAT32
 8006aac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006aae:	2b03      	cmp	r3, #3
 8006ab0:	d147      	bne.n	8006b42 <mount_volume+0x6da>
			&& ld_word(fs->win + BPB_FSInfo32) == 1	/* FAT32: Enable FSInfo feature only if FSInfo sector is next to VBR */
 8006ab2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ab4:	3350      	adds	r3, #80	@ 0x50
 8006ab6:	3330      	adds	r3, #48	@ 0x30
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f7fc fa85 	bl	8002fc8 <ld_word>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d13e      	bne.n	8006b42 <mount_volume+0x6da>
			&& move_window(fs, bsect + 1) == FR_OK)
 8006ac4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ac6:	3301      	adds	r3, #1
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8006acc:	f7fc fd34 	bl	8003538 <move_window>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d135      	bne.n	8006b42 <mount_volume+0x6da>
		{
			fs->fsi_flag = 0;
 8006ad6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ad8:	2200      	movs	r2, #0
 8006ada:	715a      	strb	r2, [r3, #5]
			if (   ld_dword(fs->win + FSI_LeadSig) == 0x41615252	/* Load FSInfo data if available */
 8006adc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ade:	3350      	adds	r3, #80	@ 0x50
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f7fc fa89 	bl	8002ff8 <ld_dword>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	4a25      	ldr	r2, [pc, #148]	@ (8006b80 <mount_volume+0x718>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d129      	bne.n	8006b42 <mount_volume+0x6da>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272
 8006aee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006af0:	3350      	adds	r3, #80	@ 0x50
 8006af2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fc fa7e 	bl	8002ff8 <ld_dword>
 8006afc:	4603      	mov	r3, r0
 8006afe:	4a21      	ldr	r2, [pc, #132]	@ (8006b84 <mount_volume+0x71c>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d11e      	bne.n	8006b42 <mount_volume+0x6da>
				&& ld_dword(fs->win + FSI_TrailSig) == 0xAA550000)
 8006b04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b06:	3350      	adds	r3, #80	@ 0x50
 8006b08:	f503 73f9 	add.w	r3, r3, #498	@ 0x1f2
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7fc fa73 	bl	8002ff8 <ld_dword>
 8006b12:	4603      	mov	r3, r0
 8006b14:	4a1c      	ldr	r2, [pc, #112]	@ (8006b88 <mount_volume+0x720>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d113      	bne.n	8006b42 <mount_volume+0x6da>
			{
#if (FF_FS_NOFSINFO & 1) == 0	/* Get free cluster count if trust it */
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006b1a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b1c:	3350      	adds	r3, #80	@ 0x50
 8006b1e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8006b22:	4618      	mov	r0, r3
 8006b24:	f7fc fa68 	bl	8002ff8 <ld_dword>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b2c:	61da      	str	r2, [r3, #28]
#endif
#if (FF_FS_NOFSINFO & 2) == 0	/* Get next free cluster if rtust it */
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006b2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b30:	3350      	adds	r3, #80	@ 0x50
 8006b32:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006b36:	4618      	mov	r0, r3
 8006b38:	f7fc fa5e 	bl	8002ff8 <ld_dword>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b40:	619a      	str	r2, [r3, #24]
			}
		}
#endif	/* !FF_FS_READONLY */
	}

	fs->fs_type = (BYTE)fmt;/* FAT sub-type (the filesystem object gets valid) */
 8006b42:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006b44:	b2da      	uxtb	r2, r3
 8006b46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b48:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* Volume mount ID */
 8006b4a:	4b10      	ldr	r3, [pc, #64]	@ (8006b8c <mount_volume+0x724>)
 8006b4c:	881b      	ldrh	r3, [r3, #0]
 8006b4e:	3301      	adds	r3, #1
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	4b0e      	ldr	r3, [pc, #56]	@ (8006b8c <mount_volume+0x724>)
 8006b54:	801a      	strh	r2, [r3, #0]
 8006b56:	4b0d      	ldr	r3, [pc, #52]	@ (8006b8c <mount_volume+0x724>)
 8006b58:	881a      	ldrh	r2, [r3, #0]
 8006b5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b5c:	80da      	strh	r2, [r3, #6]
#if FF_USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006b5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b60:	4a0b      	ldr	r2, [pc, #44]	@ (8006b90 <mount_volume+0x728>)
 8006b62:	611a      	str	r2, [r3, #16]
#if FF_FS_EXFAT
	fs->dirbuf = DirBuf;	/* Static directory block scratchpad buuffer */
 8006b64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b66:	4a0b      	ldr	r2, [pc, #44]	@ (8006b94 <mount_volume+0x72c>)
 8006b68:	615a      	str	r2, [r3, #20]
#endif
#endif
#if FF_FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
 8006b6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	621a      	str	r2, [r3, #32]
#endif
#if FF_FS_LOCK				/* Clear file lock semaphores */
	clear_share(fs);
#endif
	return FR_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3768      	adds	r7, #104	@ 0x68
 8006b76:	46bd      	mov	sp, r7
 8006b78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b7c:	0ffffff5 	.word	0x0ffffff5
 8006b80:	41615252 	.word	0x41615252
 8006b84:	61417272 	.word	0x61417272
 8006b88:	aa550000 	.word	0xaa550000
 8006b8c:	200022ac 	.word	0x200022ac
 8006b90:	20002510 	.word	0x20002510
 8006b94:	200022b0 	.word	0x200022b0

08006b98 <validate>:

static FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	FFOBJID* obj,			/* Pointer to the FFOBJID, the 1st member in the FIL/DIR structure, to check validity */
	FATFS** rfs				/* Pointer to pointer to the owner filesystem object to return */
)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8006ba2:	2309      	movs	r3, #9
 8006ba4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d01c      	beq.n	8006be6 <validate+0x4e>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d018      	beq.n	8006be6 <validate+0x4e>
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d013      	beq.n	8006be6 <validate+0x4e>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	889a      	ldrh	r2, [r3, #4]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	88db      	ldrh	r3, [r3, #6]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d10c      	bne.n	8006be6 <validate+0x4e>
			}
		} else {	/* Could not take */
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->pdrv) & STA_NOINIT)) { /* Test if the hosting physical drive is kept initialized */
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	785b      	ldrb	r3, [r3, #1]
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	f7fc f967 	bl	8002ea6 <disk_status>
 8006bd8:	4603      	mov	r3, r0
 8006bda:	f003 0301 	and.w	r3, r3, #1
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d101      	bne.n	8006be6 <validate+0x4e>
			res = FR_OK;
 8006be2:	2300      	movs	r3, #0
 8006be4:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*rfs = (res == FR_OK) ? obj->fs : 0;	/* Return corresponding filesystem object if it is valid */
 8006be6:	7bfb      	ldrb	r3, [r7, #15]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d102      	bne.n	8006bf2 <validate+0x5a>
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	e000      	b.n	8006bf4 <validate+0x5c>
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	683a      	ldr	r2, [r7, #0]
 8006bf6:	6013      	str	r3, [r2, #0]
	return res;
 8006bf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	3710      	adds	r7, #16
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}
	...

08006c04 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the filesystem object to be registered (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mount option: 0=Do not mount (delayed mount), 1=Mount immediately */
)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b088      	sub	sp, #32
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	60f8      	str	r0, [r7, #12]
 8006c0c:	60b9      	str	r1, [r7, #8]
 8006c0e:	4613      	mov	r3, r2
 8006c10:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	613b      	str	r3, [r7, #16]


	/* Get volume ID (logical drive number) */
	vol = get_ldnumber(&rp);
 8006c16:	f107 0310 	add.w	r3, r7, #16
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f7ff fac8 	bl	80061b0 <get_ldnumber>
 8006c20:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	da01      	bge.n	8006c2c <f_mount+0x28>
 8006c28:	230b      	movs	r3, #11
 8006c2a:	e02e      	b.n	8006c8a <f_mount+0x86>
	cfs = FatFs[vol];			/* Pointer to the filesystem object of the volume */
 8006c2c:	4a19      	ldr	r2, [pc, #100]	@ (8006c94 <f_mount+0x90>)
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c34:	61bb      	str	r3, [r7, #24]

	if (cfs) {					/* Unregister current filesystem object if registered */
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d007      	beq.n	8006c4c <f_mount+0x48>
		FatFs[vol] = 0;
 8006c3c:	4a15      	ldr	r2, [pc, #84]	@ (8006c94 <f_mount+0x90>)
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	2100      	movs	r1, #0
 8006c42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		clear_share(cfs);
#endif
#if FF_FS_REENTRANT				/* Discard mutex of the current volume */
		ff_mutex_delete(vol);
#endif
		cfs->fs_type = 0;		/* Invalidate the filesystem object to be unregistered */
 8006c46:	69bb      	ldr	r3, [r7, #24]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {					/* Register new filesystem object */
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d00b      	beq.n	8006c6a <f_mount+0x66>
		fs->pdrv = LD2PD(vol);	/* Volume hosting physical drive */
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	69fa      	ldr	r2, [r7, #28]
 8006c56:	b2d2      	uxtb	r2, r2
 8006c58:	705a      	strb	r2, [r3, #1]
			}
			SysLock = 1;		/* System mutex is ready */
		}
#endif
#endif
		fs->fs_type = 0;		/* Invalidate the new filesystem object */
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	701a      	strb	r2, [r3, #0]
		FatFs[vol] = fs;		/* Register new fs object */
 8006c60:	68fa      	ldr	r2, [r7, #12]
 8006c62:	490c      	ldr	r1, [pc, #48]	@ (8006c94 <f_mount+0x90>)
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	if (opt == 0) return FR_OK;	/* Do not mount now, it will be mounted in subsequent file functions */
 8006c6a:	79fb      	ldrb	r3, [r7, #7]
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d101      	bne.n	8006c74 <f_mount+0x70>
 8006c70:	2300      	movs	r3, #0
 8006c72:	e00a      	b.n	8006c8a <f_mount+0x86>

	res = mount_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006c74:	f107 010c 	add.w	r1, r7, #12
 8006c78:	f107 0308 	add.w	r3, r7, #8
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7ff fbf2 	bl	8006468 <mount_volume>
 8006c84:	4603      	mov	r3, r0
 8006c86:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8006c88:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3720      	adds	r7, #32
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	200022a8 	.word	0x200022a8

08006c98 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and open mode flags */
)
{
 8006c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c9c:	b0a9      	sub	sp, #164	@ 0xa4
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6278      	str	r0, [r7, #36]	@ 0x24
 8006ca2:	6239      	str	r1, [r7, #32]
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	77fb      	strb	r3, [r7, #31]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d101      	bne.n	8006cb2 <f_open+0x1a>
 8006cae:	2309      	movs	r3, #9
 8006cb0:	e23d      	b.n	800712e <f_open+0x496>

	/* Get logical drive number */
	mode &= FF_FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND;
 8006cb2:	7ffb      	ldrb	r3, [r7, #31]
 8006cb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cb8:	77fb      	strb	r3, [r7, #31]
	res = mount_volume(&path, &fs, mode);
 8006cba:	7ffb      	ldrb	r3, [r7, #31]
 8006cbc:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8006cc0:	f107 0020 	add.w	r0, r7, #32
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	f7ff fbcf 	bl	8006468 <mount_volume>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
	if (res == FR_OK) {
 8006cd0:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	f040 8221 	bne.w	800711c <f_open+0x484>
		dj.obj.fs = fs;
 8006cda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cdc:	633b      	str	r3, [r7, #48]	@ 0x30
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8006cde:	6a3b      	ldr	r3, [r7, #32]
 8006ce0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8006ce4:	4619      	mov	r1, r3
 8006ce6:	4610      	mov	r0, r2
 8006ce8:	f7ff f964 	bl	8005fb4 <follow_path>
 8006cec:	4603      	mov	r3, r0
 8006cee:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#if !FF_FS_READONLY	/* Read/Write configuration */
		if (res == FR_OK) {
 8006cf2:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d107      	bne.n	8006d0a <f_open+0x72>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8006cfa:	f897 307b 	ldrb.w	r3, [r7, #123]	@ 0x7b
 8006cfe:	b25b      	sxtb	r3, r3
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	da02      	bge.n	8006d0a <f_open+0x72>
				res = FR_INVALID_NAME;
 8006d04:	2306      	movs	r3, #6
 8006d06:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				res = chk_share(&dj, (mode & ~FA_READ) ? 1 : 0);	/* Check if the file can be used */
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8006d0a:	7ffb      	ldrb	r3, [r7, #31]
 8006d0c:	f003 031c 	and.w	r3, r3, #28
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	f000 80da 	beq.w	8006eca <f_open+0x232>
			if (res != FR_OK) {					/* No file, create new */
 8006d16:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d010      	beq.n	8006d40 <f_open+0xa8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8006d1e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8006d22:	2b04      	cmp	r3, #4
 8006d24:	d107      	bne.n	8006d36 <f_open+0x9e>
#if FF_FS_LOCK
					res = enq_share() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 8006d26:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7fe fb9e 	bl	800546c <dir_register>
 8006d30:	4603      	mov	r3, r0
 8006d32:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006d36:	7ffb      	ldrb	r3, [r7, #31]
 8006d38:	f043 0308 	orr.w	r3, r3, #8
 8006d3c:	77fb      	strb	r3, [r7, #31]
 8006d3e:	e011      	b.n	8006d64 <f_open+0xcc>
			}
			else {								/* Any object with the same name is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8006d40:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006d44:	f003 0311 	and.w	r3, r3, #17
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d003      	beq.n	8006d54 <f_open+0xbc>
					res = FR_DENIED;
 8006d4c:	2307      	movs	r3, #7
 8006d4e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8006d52:	e007      	b.n	8006d64 <f_open+0xcc>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8006d54:	7ffb      	ldrb	r3, [r7, #31]
 8006d56:	f003 0304 	and.w	r3, r3, #4
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d002      	beq.n	8006d64 <f_open+0xcc>
 8006d5e:	2308      	movs	r3, #8
 8006d60:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate the file if overwrite mode */
 8006d64:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	f040 80ca 	bne.w	8006f02 <f_open+0x26a>
 8006d6e:	7ffb      	ldrb	r3, [r7, #31]
 8006d70:	f003 0308 	and.w	r3, r3, #8
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 80c4 	beq.w	8006f02 <f_open+0x26a>
#if FF_FS_EXFAT
				if (fs->fs_type == FS_EXFAT) {
 8006d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	2b04      	cmp	r3, #4
 8006d80:	d14f      	bne.n	8006e22 <f_open+0x18a>
					/* Get current allocation info */
					fp->obj.fs = fs;
 8006d82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d86:	601a      	str	r2, [r3, #0]
					init_alloc_info(fs, &fp->obj);
 8006d88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	4610      	mov	r0, r2
 8006d90:	f7fe f856 	bl	8004e40 <init_alloc_info>
					/* Set directory entry block initial state */
					memset(fs->dirbuf + 2, 0, 30);	/* Clear 85 entry except for NumSec */
 8006d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d96:	695b      	ldr	r3, [r3, #20]
 8006d98:	3302      	adds	r3, #2
 8006d9a:	221e      	movs	r2, #30
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f000 fe10 	bl	80079c4 <memset>
					memset(fs->dirbuf + 38, 0, 26);	/* Clear C0 entry except for NumName and NameHash */
 8006da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006da6:	695b      	ldr	r3, [r3, #20]
 8006da8:	3326      	adds	r3, #38	@ 0x26
 8006daa:	221a      	movs	r2, #26
 8006dac:	2100      	movs	r1, #0
 8006dae:	4618      	mov	r0, r3
 8006db0:	f000 fe08 	bl	80079c4 <memset>
					fs->dirbuf[XDIR_Attr] = AM_ARC;
 8006db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006db6:	695b      	ldr	r3, [r3, #20]
 8006db8:	1d1a      	adds	r2, r3, #4
 8006dba:	2320      	movs	r3, #32
 8006dbc:	7013      	strb	r3, [r2, #0]
					st_dword(fs->dirbuf + XDIR_CrtTime, GET_FATTIME());
 8006dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dc0:	695b      	ldr	r3, [r3, #20]
 8006dc2:	f103 0408 	add.w	r4, r3, #8
 8006dc6:	f7fc f8f5 	bl	8002fb4 <get_fattime>
 8006dca:	4603      	mov	r3, r0
 8006dcc:	4619      	mov	r1, r3
 8006dce:	4620      	mov	r0, r4
 8006dd0:	f7fc fa27 	bl	8003222 <st_dword>
					fs->dirbuf[XDIR_GenFlags] = 1;
 8006dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dd6:	695b      	ldr	r3, [r3, #20]
 8006dd8:	f103 0221 	add.w	r2, r3, #33	@ 0x21
 8006ddc:	2301      	movs	r3, #1
 8006dde:	7013      	strb	r3, [r2, #0]
					res = store_xdir(&dj);
 8006de0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006de4:	4618      	mov	r0, r3
 8006de6:	f7fe f88d 	bl	8004f04 <store_xdir>
 8006dea:	4603      	mov	r3, r0
 8006dec:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					if (res == FR_OK && fp->obj.sclust != 0) {	/* Remove the cluster chain if exist */
 8006df0:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f040 8084 	bne.w	8006f02 <f_open+0x26a>
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfc:	689b      	ldr	r3, [r3, #8]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d07f      	beq.n	8006f02 <f_open+0x26a>
						res = remove_chain(&fp->obj, fp->obj.sclust, 0);
 8006e02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006e04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	2200      	movs	r2, #0
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	f7fd f89e 	bl	8003f4c <remove_chain>
 8006e10:	4603      	mov	r3, r0
 8006e12:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
						fs->last_clst = fp->obj.sclust - 1;		/* Reuse the cluster hole */
 8006e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e1c:	3b01      	subs	r3, #1
 8006e1e:	6193      	str	r3, [r2, #24]
 8006e20:	e06f      	b.n	8006f02 <f_open+0x26a>
					}
				} else
#endif
				{
					/* Set directory entry initial state */
					tm = GET_FATTIME();					/* Set created time */
 8006e22:	f7fc f8c7 	bl	8002fb4 <get_fattime>
 8006e26:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
					st_dword(dj.dir + DIR_CrtTime, tm);
 8006e2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e2c:	330e      	adds	r3, #14
 8006e2e:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7fc f9f5 	bl	8003222 <st_dword>
					st_dword(dj.dir + DIR_ModTime, tm);
 8006e38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e3a:	3316      	adds	r3, #22
 8006e3c:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7fc f9ee 	bl	8003222 <st_dword>
					cl = ld_clust(fs, dj.dir);			/* Get current cluster chain */
 8006e46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	f7fd fc8b 	bl	8004768 <ld_clust>
 8006e52:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8006e56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e58:	f103 020b 	add.w	r2, r3, #11
 8006e5c:	2320      	movs	r3, #32
 8006e5e:	7013      	strb	r3, [r2, #0]
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8006e60:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006e62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e64:	2200      	movs	r2, #0
 8006e66:	4619      	mov	r1, r3
 8006e68:	f7fd fc9d 	bl	80047a6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8006e6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e6e:	331c      	adds	r3, #28
 8006e70:	2100      	movs	r1, #0
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fc f9d5 	bl	8003222 <st_dword>
					fs->wflag = 1;
 8006e78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	7113      	strb	r3, [r2, #4]
					if (cl != 0) {						/* Remove the cluster chain if exist */
 8006e7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d03d      	beq.n	8006f02 <f_open+0x26a>
						sc = fs->winsect;
 8006e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006e8a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
						res = remove_chain(&dj.obj, cl, 0);
 8006e8e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8006e92:	2200      	movs	r2, #0
 8006e94:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f7fd f857 	bl	8003f4c <remove_chain>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
						if (res == FR_OK) {
 8006ea4:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d12a      	bne.n	8006f02 <f_open+0x26a>
							res = move_window(fs, sc);
 8006eac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eae:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f7fc fb40 	bl	8003538 <move_window>
 8006eb8:	4603      	mov	r3, r0
 8006eba:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8006ebe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ec0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	6193      	str	r3, [r2, #24]
 8006ec8:	e01b      	b.n	8006f02 <f_open+0x26a>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Is the object exsiting? */
 8006eca:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d117      	bne.n	8006f02 <f_open+0x26a>
				if (dj.obj.attr & AM_DIR) {		/* File open against a directory */
 8006ed2:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006ed6:	f003 0310 	and.w	r3, r3, #16
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d003      	beq.n	8006ee6 <f_open+0x24e>
					res = FR_NO_FILE;
 8006ede:	2304      	movs	r3, #4
 8006ee0:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8006ee4:	e00d      	b.n	8006f02 <f_open+0x26a>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* Write mode open against R/O file */
 8006ee6:	7ffb      	ldrb	r3, [r7, #31]
 8006ee8:	f003 0302 	and.w	r3, r3, #2
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d008      	beq.n	8006f02 <f_open+0x26a>
 8006ef0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <f_open+0x26a>
						res = FR_DENIED;
 8006efc:	2307      	movs	r3, #7
 8006efe:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					}
				}
			}
		}
		if (res == FR_OK) {
 8006f02:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d10f      	bne.n	8006f2a <f_open+0x292>
			if (mode & FA_CREATE_ALWAYS) mode |= FA_MODIFIED;	/* Set file change flag if created or overwritten */
 8006f0a:	7ffb      	ldrb	r3, [r7, #31]
 8006f0c:	f003 0308 	and.w	r3, r3, #8
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d003      	beq.n	8006f1c <f_open+0x284>
 8006f14:	7ffb      	ldrb	r3, [r7, #31]
 8006f16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f1a:	77fb      	strb	r3, [r7, #31]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f1e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f22:	649a      	str	r2, [r3, #72]	@ 0x48
			fp->dir_ptr = dj.dir;
 8006f24:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f28:	64da      	str	r2, [r3, #76]	@ 0x4c
				}
			}
		}
#endif

		if (res == FR_OK) {
 8006f2a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f040 80f4 	bne.w	800711c <f_open+0x484>
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8006f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	2b04      	cmp	r3, #4
 8006f3a:	d116      	bne.n	8006f6a <f_open+0x2d2>
				fp->obj.c_scl = dj.obj.sclust;							/* Get containing directory info */
 8006f3c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f40:	621a      	str	r2, [r3, #32]
				fp->obj.c_size = ((DWORD)dj.obj.objsize & 0xFFFFFF00) | dj.obj.stat;
 8006f42:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006f46:	4613      	mov	r3, r2
 8006f48:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006f4c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8006f50:	431a      	orrs	r2, r3
 8006f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f54:	625a      	str	r2, [r3, #36]	@ 0x24
				fp->obj.c_ofs = dj.blk_ofs;
 8006f56:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f5a:	629a      	str	r2, [r3, #40]	@ 0x28
				init_alloc_info(fs, &fp->obj);
 8006f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f60:	4611      	mov	r1, r2
 8006f62:	4618      	mov	r0, r3
 8006f64:	f7fd ff6c 	bl	8004e40 <init_alloc_info>
 8006f68:	e016      	b.n	8006f98 <f_open+0x300>
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006f6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f6e:	4619      	mov	r1, r3
 8006f70:	4610      	mov	r0, r2
 8006f72:	f7fd fbf9 	bl	8004768 <ld_clust>
 8006f76:	4602      	mov	r2, r0
 8006f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7a:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8006f7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f7e:	331c      	adds	r3, #28
 8006f80:	4618      	mov	r0, r3
 8006f82:	f7fc f839 	bl	8002ff8 <ld_dword>
 8006f86:	4603      	mov	r3, r0
 8006f88:	2200      	movs	r2, #0
 8006f8a:	613b      	str	r3, [r7, #16]
 8006f8c:	617a      	str	r2, [r7, #20]
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f90:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006f94:	e9c3 1204 	strd	r1, r2, [r3, #16]
			}
#if FF_USE_FASTSEEK
			fp->cltbl = 0;		/* Disable fast seek mode */
#endif
			fp->obj.fs = fs;	/* Validate the file object */
 8006f98:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f9c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8006f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fa0:	88da      	ldrh	r2, [r3, #6]
 8006fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;	/* Set file access mode */
 8006fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa8:	7ffa      	ldrb	r2, [r7, #31]
 8006faa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			fp->err = 0;		/* Clear error flag */
 8006fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
			fp->sect = 0;		/* Invalidate current data sector */
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb8:	2200      	movs	r2, #0
 8006fba:	645a      	str	r2, [r3, #68]	@ 0x44
			fp->fptr = 0;		/* Set file pointer top of the file */
 8006fbc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006fbe:	f04f 0200 	mov.w	r2, #0
 8006fc2:	f04f 0300 	mov.w	r3, #0
 8006fc6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
#if !FF_FS_READONLY
#if !FF_FS_TINY
			memset(fp->buf, 0, sizeof fp->buf);	/* Clear sector buffer */
 8006fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fcc:	3350      	adds	r3, #80	@ 0x50
 8006fce:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	f000 fcf5 	bl	80079c4 <memset>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8006fda:	7ffb      	ldrb	r3, [r7, #31]
 8006fdc:	f003 0320 	and.w	r3, r3, #32
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	f000 809b 	beq.w	800711c <f_open+0x484>
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fe8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006fec:	4313      	orrs	r3, r2
 8006fee:	f000 8095 	beq.w	800711c <f_open+0x484>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006ff8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ffa:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006ffe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007000:	895b      	ldrh	r3, [r3, #10]
 8007002:	461a      	mov	r2, r3
 8007004:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007006:	899b      	ldrh	r3, [r3, #12]
 8007008:	fb02 f303 	mul.w	r3, r2, r3
 800700c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800701a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800701e:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
 8007022:	e023      	b.n	800706c <f_open+0x3d4>
					clst = get_fat(&fp->obj, clst);
 8007024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007026:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800702a:	4618      	mov	r0, r3
 800702c:	f7fc fbb4 	bl	8003798 <get_fat>
 8007030:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
					if (clst <= 1) res = FR_INT_ERR;
 8007034:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007038:	2b01      	cmp	r3, #1
 800703a:	d802      	bhi.n	8007042 <f_open+0x3aa>
 800703c:	2302      	movs	r3, #2
 800703e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007042:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704a:	d102      	bne.n	8007052 <f_open+0x3ba>
 800704c:	2301      	movs	r3, #1
 800704e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007052:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007056:	2200      	movs	r2, #0
 8007058:	469a      	mov	sl, r3
 800705a:	4693      	mov	fp, r2
 800705c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8007060:	ebb2 050a 	subs.w	r5, r2, sl
 8007064:	eb63 060b 	sbc.w	r6, r3, fp
 8007068:	e9c7 5624 	strd	r5, r6, [r7, #144]	@ 0x90
 800706c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10a      	bne.n	800708a <f_open+0x3f2>
 8007074:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007078:	2200      	movs	r2, #0
 800707a:	4698      	mov	r8, r3
 800707c:	4691      	mov	r9, r2
 800707e:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8007082:	4590      	cmp	r8, r2
 8007084:	eb79 0303 	sbcs.w	r3, r9, r3
 8007088:	d3cc      	bcc.n	8007024 <f_open+0x38c>
				}
				fp->clust = clst;
 800708a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800708c:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007090:	641a      	str	r2, [r3, #64]	@ 0x40
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007092:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8007096:	2b00      	cmp	r3, #0
 8007098:	d140      	bne.n	800711c <f_open+0x484>
 800709a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800709c:	899b      	ldrh	r3, [r3, #12]
 800709e:	b29b      	uxth	r3, r3
 80070a0:	2200      	movs	r2, #0
 80070a2:	60bb      	str	r3, [r7, #8]
 80070a4:	60fa      	str	r2, [r7, #12]
 80070a6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80070aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070ae:	f7f9 f84d 	bl	800014c <__aeabi_uldivmod>
 80070b2:	4313      	orrs	r3, r2
 80070b4:	d032      	beq.n	800711c <f_open+0x484>
					sc = clst2sect(fs, clst);
 80070b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070b8:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 80070bc:	4618      	mov	r0, r3
 80070be:	f7fc fb4d 	bl	800375c <clst2sect>
 80070c2:	f8c7 0084 	str.w	r0, [r7, #132]	@ 0x84
					if (sc == 0) {
 80070c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d103      	bne.n	80070d6 <f_open+0x43e>
						res = FR_INT_ERR;
 80070ce:	2302      	movs	r3, #2
 80070d0:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 80070d4:	e022      	b.n	800711c <f_open+0x484>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80070d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070d8:	899b      	ldrh	r3, [r3, #12]
 80070da:	b29b      	uxth	r3, r3
 80070dc:	2200      	movs	r2, #0
 80070de:	603b      	str	r3, [r7, #0]
 80070e0:	607a      	str	r2, [r7, #4]
 80070e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070e6:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 80070ea:	f7f9 f82f 	bl	800014c <__aeabi_uldivmod>
 80070ee:	4602      	mov	r2, r0
 80070f0:	460b      	mov	r3, r1
 80070f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80070f6:	441a      	add	r2, r3
 80070f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fa:	645a      	str	r2, [r3, #68]	@ 0x44
#if !FF_FS_TINY
						if (disk_read(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80070fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070fe:	7858      	ldrb	r0, [r3, #1]
 8007100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007102:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 8007106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007108:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800710a:	2301      	movs	r3, #1
 800710c:	f7fb fefb 	bl	8002f06 <disk_read>
 8007110:	4603      	mov	r3, r0
 8007112:	2b00      	cmp	r3, #0
 8007114:	d002      	beq.n	800711c <f_open+0x484>
 8007116:	2301      	movs	r3, #1
 8007118:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800711c:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8007120:	2b00      	cmp	r3, #0
 8007122:	d002      	beq.n	800712a <f_open+0x492>
 8007124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007126:	2200      	movs	r2, #0
 8007128:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800712a:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
}
 800712e:	4618      	mov	r0, r3
 8007130:	37a4      	adds	r7, #164	@ 0xa4
 8007132:	46bd      	mov	sp, r7
 8007134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007138 <f_write>:
	FIL* fp,			/* Open file to be written */
	const void* buff,	/* Data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Number of bytes written */
)
{
 8007138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800713c:	b091      	sub	sp, #68	@ 0x44
 800713e:	af00      	add	r7, sp, #0
 8007140:	61f8      	str	r0, [r7, #28]
 8007142:	61b9      	str	r1, [r7, #24]
 8007144:	617a      	str	r2, [r7, #20]
 8007146:	613b      	str	r3, [r7, #16]
	FRESULT res;
	FATFS *fs;
	DWORD clst;
	LBA_t sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	62fb      	str	r3, [r7, #44]	@ 0x2c


	*bw = 0;	/* Clear write byte counter */
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	2200      	movs	r2, #0
 8007150:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8007152:	69fb      	ldr	r3, [r7, #28]
 8007154:	f107 0220 	add.w	r2, r7, #32
 8007158:	4611      	mov	r1, r2
 800715a:	4618      	mov	r0, r3
 800715c:	f7ff fd1c 	bl	8006b98 <validate>
 8007160:	4603      	mov	r3, r0
 8007162:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8007166:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800716a:	2b00      	cmp	r3, #0
 800716c:	d108      	bne.n	8007180 <f_write+0x48>
 800716e:	69fb      	ldr	r3, [r7, #28]
 8007170:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8007174:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8007178:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800717c:	2b00      	cmp	r3, #0
 800717e:	d002      	beq.n	8007186 <f_write+0x4e>
 8007180:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007184:	e19e      	b.n	80074c4 <f_write+0x38c>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800718c:	f003 0302 	and.w	r3, r3, #2
 8007190:	2b00      	cmp	r3, #0
 8007192:	d101      	bne.n	8007198 <f_write+0x60>
 8007194:	2307      	movs	r3, #7
 8007196:	e195      	b.n	80074c4 <f_write+0x38c>

	/* Check fptr wrap-around (file size cannot reach 4 GiB at FAT volume) */
	if ((!FF_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	2b04      	cmp	r3, #4
 800719e:	f000 8181 	beq.w	80074a4 <f_write+0x36c>
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	18d1      	adds	r1, r2, r3
 80071ac:	69fb      	ldr	r3, [r7, #28]
 80071ae:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80071b2:	4613      	mov	r3, r2
 80071b4:	4299      	cmp	r1, r3
 80071b6:	f080 8175 	bcs.w	80074a4 <f_write+0x36c>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80071c0:	4613      	mov	r3, r2
 80071c2:	43db      	mvns	r3, r3
 80071c4:	617b      	str	r3, [r7, #20]
	}

	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 80071c6:	e16d      	b.n	80074a4 <f_write+0x36c>
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80071c8:	69fb      	ldr	r3, [r7, #28]
 80071ca:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80071ce:	6a3b      	ldr	r3, [r7, #32]
 80071d0:	899b      	ldrh	r3, [r3, #12]
 80071d2:	b29b      	uxth	r3, r3
 80071d4:	2200      	movs	r2, #0
 80071d6:	461d      	mov	r5, r3
 80071d8:	4616      	mov	r6, r2
 80071da:	462a      	mov	r2, r5
 80071dc:	4633      	mov	r3, r6
 80071de:	f7f8 ffb5 	bl	800014c <__aeabi_uldivmod>
 80071e2:	4313      	orrs	r3, r2
 80071e4:	f040 80fe 	bne.w	80073e4 <f_write+0x2ac>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80071ee:	6a3b      	ldr	r3, [r7, #32]
 80071f0:	899b      	ldrh	r3, [r3, #12]
 80071f2:	b29b      	uxth	r3, r3
 80071f4:	2200      	movs	r2, #0
 80071f6:	60bb      	str	r3, [r7, #8]
 80071f8:	60fa      	str	r2, [r7, #12]
 80071fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80071fe:	f7f8 ffa5 	bl	800014c <__aeabi_uldivmod>
 8007202:	4602      	mov	r2, r0
 8007204:	460b      	mov	r3, r1
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	895b      	ldrh	r3, [r3, #10]
 800720a:	3b01      	subs	r3, #1
 800720c:	4013      	ands	r3, r2
 800720e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (csect == 0) {				/* On the cluster boundary? */
 8007210:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007212:	2b00      	cmp	r3, #0
 8007214:	d13a      	bne.n	800728c <f_write+0x154>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800721c:	4313      	orrs	r3, r2
 800721e:	d10c      	bne.n	800723a <f_write+0x102>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	63bb      	str	r3, [r7, #56]	@ 0x38
					if (clst == 0) {		/* If no cluster is allocated, */
 8007226:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007228:	2b00      	cmp	r3, #0
 800722a:	d10e      	bne.n	800724a <f_write+0x112>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	2100      	movs	r1, #0
 8007230:	4618      	mov	r0, r3
 8007232:	f7fc ff6d 	bl	8004110 <create_chain>
 8007236:	63b8      	str	r0, [r7, #56]	@ 0x38
 8007238:	e007      	b.n	800724a <f_write+0x112>
					if (fp->cltbl) {
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800723a:	69fa      	ldr	r2, [r7, #28]
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007240:	4619      	mov	r1, r3
 8007242:	4610      	mov	r0, r2
 8007244:	f7fc ff64 	bl	8004110 <create_chain>
 8007248:	63b8      	str	r0, [r7, #56]	@ 0x38
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800724a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800724c:	2b00      	cmp	r3, #0
 800724e:	f000 812e 	beq.w	80074ae <f_write+0x376>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8007252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007254:	2b01      	cmp	r3, #1
 8007256:	d105      	bne.n	8007264 <f_write+0x12c>
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	2202      	movs	r2, #2
 800725c:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8007260:	2302      	movs	r3, #2
 8007262:	e12f      	b.n	80074c4 <f_write+0x38c>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8007264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726a:	d105      	bne.n	8007278 <f_write+0x140>
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	2201      	movs	r2, #1
 8007270:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8007274:	2301      	movs	r3, #1
 8007276:	e125      	b.n	80074c4 <f_write+0x38c>
				fp->clust = clst;			/* Update current cluster */
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800727c:	641a      	str	r2, [r3, #64]	@ 0x40
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800727e:	69fb      	ldr	r3, [r7, #28]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d102      	bne.n	800728c <f_write+0x154>
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800728a:	609a      	str	r2, [r3, #8]
			}
#if FF_FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007292:	b25b      	sxtb	r3, r3
 8007294:	2b00      	cmp	r3, #0
 8007296:	da1b      	bge.n	80072d0 <f_write+0x198>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007298:	6a3b      	ldr	r3, [r7, #32]
 800729a:	7858      	ldrb	r0, [r3, #1]
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80072a6:	2301      	movs	r3, #1
 80072a8:	f7fb fe4a 	bl	8002f40 <disk_write>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d005      	beq.n	80072be <f_write+0x186>
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80072ba:	2301      	movs	r3, #1
 80072bc:	e102      	b.n	80074c4 <f_write+0x38c>
				fp->flag &= (BYTE)~FA_DIRTY;
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80072c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072c8:	b2da      	uxtb	r2, r3
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			sect = clst2sect(fs, fp->clust);	/* Get current sector */
 80072d0:	6a3a      	ldr	r2, [r7, #32]
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072d6:	4619      	mov	r1, r3
 80072d8:	4610      	mov	r0, r2
 80072da:	f7fc fa3f 	bl	800375c <clst2sect>
 80072de:	6278      	str	r0, [r7, #36]	@ 0x24
			if (sect == 0) ABORT(fs, FR_INT_ERR);
 80072e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d105      	bne.n	80072f2 <f_write+0x1ba>
 80072e6:	69fb      	ldr	r3, [r7, #28]
 80072e8:	2202      	movs	r2, #2
 80072ea:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80072ee:	2302      	movs	r3, #2
 80072f0:	e0e8      	b.n	80074c4 <f_write+0x38c>
			sect += csect;
 80072f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072f6:	4413      	add	r3, r2
 80072f8:	627b      	str	r3, [r7, #36]	@ 0x24
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80072fa:	6a3b      	ldr	r3, [r7, #32]
 80072fc:	899b      	ldrh	r3, [r3, #12]
 80072fe:	461a      	mov	r2, r3
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	fbb3 f3f2 	udiv	r3, r3, r2
 8007306:	633b      	str	r3, [r7, #48]	@ 0x30
			if (cc > 0) {					/* Write maximum contiguous sectors directly */
 8007308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800730a:	2b00      	cmp	r3, #0
 800730c:	d046      	beq.n	800739c <f_write+0x264>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800730e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007312:	4413      	add	r3, r2
 8007314:	6a3a      	ldr	r2, [r7, #32]
 8007316:	8952      	ldrh	r2, [r2, #10]
 8007318:	4293      	cmp	r3, r2
 800731a:	d905      	bls.n	8007328 <f_write+0x1f0>
					cc = fs->csize - csect;
 800731c:	6a3b      	ldr	r3, [r7, #32]
 800731e:	895b      	ldrh	r3, [r3, #10]
 8007320:	461a      	mov	r2, r3
 8007322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	633b      	str	r3, [r7, #48]	@ 0x30
				}
				if (disk_write(fs->pdrv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8007328:	6a3b      	ldr	r3, [r7, #32]
 800732a:	7858      	ldrb	r0, [r3, #1]
 800732c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800732e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007330:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007332:	f7fb fe05 	bl	8002f40 <disk_write>
 8007336:	4603      	mov	r3, r0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d005      	beq.n	8007348 <f_write+0x210>
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 8007344:	2301      	movs	r3, #1
 8007346:	e0bd      	b.n	80074c4 <f_write+0x38c>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800734c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800734e:	1ad3      	subs	r3, r2, r3
 8007350:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007352:	429a      	cmp	r2, r3
 8007354:	d91a      	bls.n	800738c <f_write+0x254>
					memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8007356:	69fb      	ldr	r3, [r7, #28]
 8007358:	f103 0050 	add.w	r0, r3, #80	@ 0x50
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007362:	1ad3      	subs	r3, r2, r3
 8007364:	6a3a      	ldr	r2, [r7, #32]
 8007366:	8992      	ldrh	r2, [r2, #12]
 8007368:	fb02 f303 	mul.w	r3, r2, r3
 800736c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800736e:	18d1      	adds	r1, r2, r3
 8007370:	6a3b      	ldr	r3, [r7, #32]
 8007372:	899b      	ldrh	r3, [r3, #12]
 8007374:	461a      	mov	r2, r3
 8007376:	f000 fb5f 	bl	8007a38 <memcpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007380:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007384:	b2da      	uxtb	r2, r3
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800738c:	6a3b      	ldr	r3, [r7, #32]
 800738e:	899b      	ldrh	r3, [r3, #12]
 8007390:	461a      	mov	r2, r3
 8007392:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007394:	fb02 f303 	mul.w	r3, r2, r3
 8007398:	637b      	str	r3, [r7, #52]	@ 0x34
				continue;
 800739a:	e058      	b.n	800744e <f_write+0x316>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d01b      	beq.n	80073de <f_write+0x2a6>
				fp->fptr < fp->obj.objsize &&
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80073b2:	4290      	cmp	r0, r2
 80073b4:	eb71 0303 	sbcs.w	r3, r1, r3
 80073b8:	d211      	bcs.n	80073de <f_write+0x2a6>
				disk_read(fs->pdrv, fp->buf, sect, 1) != RES_OK) {
 80073ba:	6a3b      	ldr	r3, [r7, #32]
 80073bc:	7858      	ldrb	r0, [r3, #1]
 80073be:	69fb      	ldr	r3, [r7, #28]
 80073c0:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 80073c4:	2301      	movs	r3, #1
 80073c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073c8:	f7fb fd9d 	bl	8002f06 <disk_read>
 80073cc:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d005      	beq.n	80073de <f_write+0x2a6>
					ABORT(fs, FR_DISK_ERR);
 80073d2:	69fb      	ldr	r3, [r7, #28]
 80073d4:	2201      	movs	r2, #1
 80073d6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 80073da:	2301      	movs	r3, #1
 80073dc:	e072      	b.n	80074c4 <f_write+0x38c>
			}
#endif
			fp->sect = sect;
 80073de:	69fb      	ldr	r3, [r7, #28]
 80073e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073e2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes remains in the sector */
 80073e4:	6a3b      	ldr	r3, [r7, #32]
 80073e6:	899b      	ldrh	r3, [r3, #12]
 80073e8:	4618      	mov	r0, r3
 80073ea:	69fb      	ldr	r3, [r7, #28]
 80073ec:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80073f0:	6a3b      	ldr	r3, [r7, #32]
 80073f2:	899b      	ldrh	r3, [r3, #12]
 80073f4:	fbb2 f1f3 	udiv	r1, r2, r3
 80073f8:	fb01 f303 	mul.w	r3, r1, r3
 80073fc:	1ad3      	subs	r3, r2, r3
 80073fe:	1ac3      	subs	r3, r0, r3
 8007400:	637b      	str	r3, [r7, #52]	@ 0x34
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8007402:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	429a      	cmp	r2, r3
 8007408:	d901      	bls.n	800740e <f_write+0x2d6>
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	637b      	str	r3, [r7, #52]	@ 0x34
#if FF_FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	f103 0450 	add.w	r4, r3, #80	@ 0x50
 8007414:	69fb      	ldr	r3, [r7, #28]
 8007416:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	899b      	ldrh	r3, [r3, #12]
 800741e:	b29b      	uxth	r3, r3
 8007420:	2200      	movs	r2, #0
 8007422:	603b      	str	r3, [r7, #0]
 8007424:	607a      	str	r2, [r7, #4]
 8007426:	e9d7 2300 	ldrd	r2, r3, [r7]
 800742a:	f7f8 fe8f 	bl	800014c <__aeabi_uldivmod>
 800742e:	4613      	mov	r3, r2
 8007430:	4423      	add	r3, r4
 8007432:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007434:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007436:	4618      	mov	r0, r3
 8007438:	f000 fafe 	bl	8007a38 <memcpy>
		fp->flag |= FA_DIRTY;
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007442:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007446:	b2da      	uxtb	r2, r3
 8007448:	69fb      	ldr	r3, [r7, #28]
 800744a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	for ( ; btw > 0; btw -= wcnt, *bw += wcnt, wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize) {	/* Repeat until all data written */
 800744e:	697a      	ldr	r2, [r7, #20]
 8007450:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007452:	1ad3      	subs	r3, r2, r3
 8007454:	617b      	str	r3, [r7, #20]
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800745c:	441a      	add	r2, r3
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	601a      	str	r2, [r3, #0]
 8007462:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007466:	4413      	add	r3, r2
 8007468:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007470:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8007472:	2000      	movs	r0, #0
 8007474:	4688      	mov	r8, r1
 8007476:	4681      	mov	r9, r0
 8007478:	eb12 0a08 	adds.w	sl, r2, r8
 800747c:	eb43 0b09 	adc.w	fp, r3, r9
 8007480:	69fb      	ldr	r3, [r7, #28]
 8007482:	e9c3 ab0e 	strd	sl, fp, [r3, #56]	@ 0x38
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800748c:	69fb      	ldr	r3, [r7, #28]
 800748e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8007492:	4290      	cmp	r0, r2
 8007494:	eb71 0403 	sbcs.w	r4, r1, r3
 8007498:	d201      	bcs.n	800749e <f_write+0x366>
 800749a:	4610      	mov	r0, r2
 800749c:	4619      	mov	r1, r3
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	f47f ae8e 	bne.w	80071c8 <f_write+0x90>
 80074ac:	e000      	b.n	80074b0 <f_write+0x378>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80074ae:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80074b0:	69fb      	ldr	r3, [r7, #28]
 80074b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80074b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074ba:	b2da      	uxtb	r2, r3
 80074bc:	69fb      	ldr	r3, [r7, #28]
 80074be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

	LEAVE_FF(fs, FR_OK);
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3744      	adds	r7, #68	@ 0x44
 80074c8:	46bd      	mov	sp, r7
 80074ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080074ce <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Open file to be synced */
)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b09a      	sub	sp, #104	@ 0x68
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
	FATFS *fs;
	DWORD tm;
	BYTE *dir;


	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80074dc:	4611      	mov	r1, r2
 80074de:	4618      	mov	r0, r3
 80074e0:	f7ff fb5a 	bl	8006b98 <validate>
 80074e4:	4603      	mov	r3, r0
 80074e6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 80074ea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f040 8105 	bne.w	80076fe <f_sync+0x230>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80074fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f000 80fd 	beq.w	80076fe <f_sync+0x230>
#if !FF_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800750a:	b25b      	sxtb	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	da17      	bge.n	8007540 <f_sync+0x72>
				if (disk_write(fs->pdrv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007510:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007512:	7858      	ldrb	r0, [r3, #1]
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	f103 0150 	add.w	r1, r3, #80	@ 0x50
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800751e:	2301      	movs	r3, #1
 8007520:	f7fb fd0e 	bl	8002f40 <disk_write>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d001      	beq.n	800752e <f_sync+0x60>
 800752a:	2301      	movs	r3, #1
 800752c:	e0e9      	b.n	8007702 <f_sync+0x234>
				fp->flag &= (BYTE)~FA_DIRTY;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8007534:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007538:	b2da      	uxtb	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007540:	f7fb fd38 	bl	8002fb4 <get_fattime>
 8007544:	6638      	str	r0, [r7, #96]	@ 0x60
#if FF_FS_EXFAT
			if (fs->fs_type == FS_EXFAT) {
 8007546:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007548:	781b      	ldrb	r3, [r3, #0]
 800754a:	2b04      	cmp	r3, #4
 800754c:	f040 808c 	bne.w	8007668 <f_sync+0x19a>
				res = fill_first_frag(&fp->obj);	/* Fill first fragment on the FAT if needed */
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	4618      	mov	r0, r3
 8007554:	f7fc fc9a 	bl	8003e8c <fill_first_frag>
 8007558:	4603      	mov	r3, r0
 800755a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 800755e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007562:	2b00      	cmp	r3, #0
 8007564:	d10a      	bne.n	800757c <f_sync+0xae>
					res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800756c:	f04f 32ff 	mov.w	r2, #4294967295
 8007570:	4619      	mov	r1, r3
 8007572:	f7fc fcba 	bl	8003eea <fill_last_frag>
 8007576:	4603      	mov	r3, r0
 8007578:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
				if (res == FR_OK) {
 800757c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007580:	2b00      	cmp	r3, #0
 8007582:	f040 80bc 	bne.w	80076fe <f_sync+0x230>
					DIR dj;
					DEF_NAMBUF

					INIT_NAMBUF(fs);
					res = load_obj_xdir(&dj, &fp->obj);	/* Load directory entry block */
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	f107 0308 	add.w	r3, r7, #8
 800758c:	4611      	mov	r1, r2
 800758e:	4618      	mov	r0, r3
 8007590:	f7fd fc7f 	bl	8004e92 <load_obj_xdir>
 8007594:	4603      	mov	r3, r0
 8007596:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (res == FR_OK) {
 800759a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f040 80ad 	bne.w	80076fe <f_sync+0x230>
						fs->dirbuf[XDIR_Attr] |= AM_ARC;				/* Set archive attribute to indicate that the file has been changed */
 80075a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075a6:	695b      	ldr	r3, [r3, #20]
 80075a8:	3304      	adds	r3, #4
 80075aa:	781a      	ldrb	r2, [r3, #0]
 80075ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075ae:	695b      	ldr	r3, [r3, #20]
 80075b0:	3304      	adds	r3, #4
 80075b2:	f042 0220 	orr.w	r2, r2, #32
 80075b6:	b2d2      	uxtb	r2, r2
 80075b8:	701a      	strb	r2, [r3, #0]
						fs->dirbuf[XDIR_GenFlags] = fp->obj.stat | 1;	/* Update file allocation information */
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	79da      	ldrb	r2, [r3, #7]
 80075be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075c0:	695b      	ldr	r3, [r3, #20]
 80075c2:	3321      	adds	r3, #33	@ 0x21
 80075c4:	f042 0201 	orr.w	r2, r2, #1
 80075c8:	b2d2      	uxtb	r2, r2
 80075ca:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_FstClus, fp->obj.sclust);		/* Update start cluster */
 80075cc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075ce:	695b      	ldr	r3, [r3, #20]
 80075d0:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	4619      	mov	r1, r3
 80075da:	4610      	mov	r0, r2
 80075dc:	f7fb fe21 	bl	8003222 <st_dword>
						st_qword(fs->dirbuf + XDIR_FileSize, fp->obj.objsize);		/* Update file size */
 80075e0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075e2:	695b      	ldr	r3, [r3, #20]
 80075e4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80075ee:	4608      	mov	r0, r1
 80075f0:	f7fb fe42 	bl	8003278 <st_qword>
						st_qword(fs->dirbuf + XDIR_ValidFileSize, fp->obj.objsize);	/* (FatFs does not support Valid File Size feature) */
 80075f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80075f6:	695b      	ldr	r3, [r3, #20]
 80075f8:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007602:	4608      	mov	r0, r1
 8007604:	f7fb fe38 	bl	8003278 <st_qword>
						st_dword(fs->dirbuf + XDIR_ModTime, tm);		/* Update modified time */
 8007608:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800760a:	695b      	ldr	r3, [r3, #20]
 800760c:	330c      	adds	r3, #12
 800760e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007610:	4618      	mov	r0, r3
 8007612:	f7fb fe06 	bl	8003222 <st_dword>
						fs->dirbuf[XDIR_ModTime10] = 0;
 8007616:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007618:	695b      	ldr	r3, [r3, #20]
 800761a:	3315      	adds	r3, #21
 800761c:	2200      	movs	r2, #0
 800761e:	701a      	strb	r2, [r3, #0]
						st_dword(fs->dirbuf + XDIR_AccTime, 0);
 8007620:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007622:	695b      	ldr	r3, [r3, #20]
 8007624:	3310      	adds	r3, #16
 8007626:	2100      	movs	r1, #0
 8007628:	4618      	mov	r0, r3
 800762a:	f7fb fdfa 	bl	8003222 <st_dword>
						res = store_xdir(&dj);	/* Restore it to the directory */
 800762e:	f107 0308 	add.w	r3, r7, #8
 8007632:	4618      	mov	r0, r3
 8007634:	f7fd fc66 	bl	8004f04 <store_xdir>
 8007638:	4603      	mov	r3, r0
 800763a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 800763e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007642:	2b00      	cmp	r3, #0
 8007644:	d15b      	bne.n	80076fe <f_sync+0x230>
							res = sync_fs(fs);
 8007646:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007648:	4618      	mov	r0, r3
 800764a:	f7fb ffa3 	bl	8003594 <sync_fs>
 800764e:	4603      	mov	r3, r0
 8007650:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fp->flag &= (BYTE)~FA_MODIFIED;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800765a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800765e:	b2da      	uxtb	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
 8007666:	e04a      	b.n	80076fe <f_sync+0x230>
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007668:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800766e:	4619      	mov	r1, r3
 8007670:	4610      	mov	r0, r2
 8007672:	f7fb ff61 	bl	8003538 <move_window>
 8007676:	4603      	mov	r3, r0
 8007678:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				if (res == FR_OK) {
 800767c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007680:	2b00      	cmp	r3, #0
 8007682:	d13c      	bne.n	80076fe <f_sync+0x230>
					dir = fp->dir_ptr;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007688:	65fb      	str	r3, [r7, #92]	@ 0x5c
					dir[DIR_Attr] |= AM_ARC;						/* Set archive attribute to indicate that the file has been changed */
 800768a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800768c:	330b      	adds	r3, #11
 800768e:	781a      	ldrb	r2, [r3, #0]
 8007690:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007692:	330b      	adds	r3, #11
 8007694:	f042 0220 	orr.w	r2, r2, #32
 8007698:	b2d2      	uxtb	r2, r2
 800769a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation information  */
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6818      	ldr	r0, [r3, #0]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	461a      	mov	r2, r3
 80076a6:	6df9      	ldr	r1, [r7, #92]	@ 0x5c
 80076a8:	f7fd f87d 	bl	80047a6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80076ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076ae:	f103 001c 	add.w	r0, r3, #28
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80076b8:	4613      	mov	r3, r2
 80076ba:	4619      	mov	r1, r3
 80076bc:	f7fb fdb1 	bl	8003222 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80076c0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076c2:	3316      	adds	r3, #22
 80076c4:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7fb fdab 	bl	8003222 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80076cc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80076ce:	3312      	adds	r3, #18
 80076d0:	2100      	movs	r1, #0
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fb fd8b 	bl	80031ee <st_word>
					fs->wflag = 1;
 80076d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80076da:	2201      	movs	r2, #1
 80076dc:	711a      	strb	r2, [r3, #4]
					res = sync_fs(fs);					/* Restore it to the directory */
 80076de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80076e0:	4618      	mov	r0, r3
 80076e2:	f7fb ff57 	bl	8003594 <sync_fs>
 80076e6:	4603      	mov	r3, r0
 80076e8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					fp->flag &= (BYTE)~FA_MODIFIED;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80076f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80076f6:	b2da      	uxtb	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80076fe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8007702:	4618      	mov	r0, r3
 8007704:	3768      	adds	r7, #104	@ 0x68
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Open file to be closed */
)
{
 800770a:	b580      	push	{r7, lr}
 800770c:	b084      	sub	sp, #16
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !FF_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7ff fedb 	bl	80074ce <f_sync>
 8007718:	4603      	mov	r3, r0
 800771a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800771c:	7bfb      	ldrb	r3, [r7, #15]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d10e      	bne.n	8007740 <f_close+0x36>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f107 0208 	add.w	r2, r7, #8
 8007728:	4611      	mov	r1, r2
 800772a:	4618      	mov	r0, r3
 800772c:	f7ff fa34 	bl	8006b98 <validate>
 8007730:	4603      	mov	r3, r0
 8007732:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007734:	7bfb      	ldrb	r3, [r7, #15]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d102      	bne.n	8007740 <f_close+0x36>
#if FF_FS_LOCK
			res = dec_share(fp->obj.lockid);		/* Decrement file open counter */
			if (res == FR_OK) fp->obj.fs = 0;	/* Invalidate file object */
#else
			fp->obj.fs = 0;	/* Invalidate file object */
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2200      	movs	r2, #0
 800773e:	601a      	str	r2, [r3, #0]
#if FF_FS_REENTRANT
			unlock_volume(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007740:	7bfb      	ldrb	r3, [r7, #15]
}
 8007742:	4618      	mov	r0, r3
 8007744:	3710      	adds	r7, #16
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b098      	sub	sp, #96	@ 0x60
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
 8007752:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = mount_volume(&path, &dj.obj.fs, 0);
 8007754:	f107 0108 	add.w	r1, r7, #8
 8007758:	1d3b      	adds	r3, r7, #4
 800775a:	2200      	movs	r2, #0
 800775c:	4618      	mov	r0, r3
 800775e:	f7fe fe83 	bl	8006468 <mount_volume>
 8007762:	4603      	mov	r3, r0
 8007764:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 8007768:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800776c:	2b00      	cmp	r3, #0
 800776e:	d11f      	bne.n	80077b0 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007770:	687a      	ldr	r2, [r7, #4]
 8007772:	f107 0308 	add.w	r3, r7, #8
 8007776:	4611      	mov	r1, r2
 8007778:	4618      	mov	r0, r3
 800777a:	f7fe fc1b 	bl	8005fb4 <follow_path>
 800777e:	4603      	mov	r3, r0
 8007780:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		if (res == FR_OK) {				/* Follow completed */
 8007784:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8007788:	2b00      	cmp	r3, #0
 800778a:	d111      	bne.n	80077b0 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800778c:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8007790:	b25b      	sxtb	r3, r3
 8007792:	2b00      	cmp	r3, #0
 8007794:	da03      	bge.n	800779e <f_stat+0x54>
				res = FR_INVALID_NAME;
 8007796:	2306      	movs	r3, #6
 8007798:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800779c:	e008      	b.n	80077b0 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d005      	beq.n	80077b0 <f_stat+0x66>
 80077a4:	f107 0308 	add.w	r3, r7, #8
 80077a8:	6839      	ldr	r1, [r7, #0]
 80077aa:	4618      	mov	r0, r3
 80077ac:	f7fe f80e 	bl	80057cc <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 80077b0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3760      	adds	r7, #96	@ 0x60
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <ff_uni2oem>:
#if FF_CODE_PAGE != 0 && FF_CODE_PAGE < 900
WCHAR ff_uni2oem (	/* Returns OEM code character, zero on error */
	DWORD	uni,	/* UTF-16 encoded character to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 80077bc:	b480      	push	{r7}
 80077be:	b085      	sub	sp, #20
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	460b      	mov	r3, r1
 80077c6:	807b      	strh	r3, [r7, #2]
	WCHAR c = 0;
 80077c8:	2300      	movs	r3, #0
 80077ca:	81fb      	strh	r3, [r7, #14]
	const WCHAR* p = CVTBL(uc, FF_CODE_PAGE);
 80077cc:	4b16      	ldr	r3, [pc, #88]	@ (8007828 <ff_uni2oem+0x6c>)
 80077ce:	60bb      	str	r3, [r7, #8]


	if (uni < 0x80) {	/* ASCII? */
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80077d4:	d802      	bhi.n	80077dc <ff_uni2oem+0x20>
		c = (WCHAR)uni;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	81fb      	strh	r3, [r7, #14]
 80077da:	e01f      	b.n	800781c <ff_uni2oem+0x60>

	} else {			/* Non-ASCII */
		if (uni < 0x10000 && cp == FF_CODE_PAGE) {	/* Is it in BMP and valid code page? */
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80077e2:	d21b      	bcs.n	800781c <ff_uni2oem+0x60>
 80077e4:	887b      	ldrh	r3, [r7, #2]
 80077e6:	f240 12b5 	movw	r2, #437	@ 0x1b5
 80077ea:	4293      	cmp	r3, r2
 80077ec:	d116      	bne.n	800781c <ff_uni2oem+0x60>
			for (c = 0; c < 0x80 && uni != p[c]; c++) ;
 80077ee:	2300      	movs	r3, #0
 80077f0:	81fb      	strh	r3, [r7, #14]
 80077f2:	e002      	b.n	80077fa <ff_uni2oem+0x3e>
 80077f4:	89fb      	ldrh	r3, [r7, #14]
 80077f6:	3301      	adds	r3, #1
 80077f8:	81fb      	strh	r3, [r7, #14]
 80077fa:	89fb      	ldrh	r3, [r7, #14]
 80077fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80077fe:	d808      	bhi.n	8007812 <ff_uni2oem+0x56>
 8007800:	89fb      	ldrh	r3, [r7, #14]
 8007802:	005b      	lsls	r3, r3, #1
 8007804:	68ba      	ldr	r2, [r7, #8]
 8007806:	4413      	add	r3, r2
 8007808:	881b      	ldrh	r3, [r3, #0]
 800780a:	461a      	mov	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4293      	cmp	r3, r2
 8007810:	d1f0      	bne.n	80077f4 <ff_uni2oem+0x38>
			c = (c + 0x80) & 0xFF;
 8007812:	89fb      	ldrh	r3, [r7, #14]
 8007814:	3380      	adds	r3, #128	@ 0x80
 8007816:	b29b      	uxth	r3, r3
 8007818:	b2db      	uxtb	r3, r3
 800781a:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 800781c:	89fb      	ldrh	r3, [r7, #14]
}
 800781e:	4618      	mov	r0, r3
 8007820:	3714      	adds	r7, #20
 8007822:	46bd      	mov	sp, r7
 8007824:	bc80      	pop	{r7}
 8007826:	4770      	bx	lr
 8007828:	08007b80 	.word	0x08007b80

0800782c <ff_oem2uni>:

WCHAR ff_oem2uni (	/* Returns Unicode character in UTF-16, zero on error */
	WCHAR	oem,	/* OEM code to be converted */
	WORD	cp		/* Code page for the conversion */
)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	4603      	mov	r3, r0
 8007834:	460a      	mov	r2, r1
 8007836:	80fb      	strh	r3, [r7, #6]
 8007838:	4613      	mov	r3, r2
 800783a:	80bb      	strh	r3, [r7, #4]
	WCHAR c = 0;
 800783c:	2300      	movs	r3, #0
 800783e:	81fb      	strh	r3, [r7, #14]
	const WCHAR* p = CVTBL(uc, FF_CODE_PAGE);
 8007840:	4b0f      	ldr	r3, [pc, #60]	@ (8007880 <ff_oem2uni+0x54>)
 8007842:	60bb      	str	r3, [r7, #8]


	if (oem < 0x80) {	/* ASCII? */
 8007844:	88fb      	ldrh	r3, [r7, #6]
 8007846:	2b7f      	cmp	r3, #127	@ 0x7f
 8007848:	d802      	bhi.n	8007850 <ff_oem2uni+0x24>
		c = oem;
 800784a:	88fb      	ldrh	r3, [r7, #6]
 800784c:	81fb      	strh	r3, [r7, #14]
 800784e:	e010      	b.n	8007872 <ff_oem2uni+0x46>

	} else {			/* Extended char */
		if (cp == FF_CODE_PAGE) {	/* Is it a valid code page? */
 8007850:	88bb      	ldrh	r3, [r7, #4]
 8007852:	f240 12b5 	movw	r2, #437	@ 0x1b5
 8007856:	4293      	cmp	r3, r2
 8007858:	d10b      	bne.n	8007872 <ff_oem2uni+0x46>
			if (oem < 0x100) c = p[oem - 0x80];
 800785a:	88fb      	ldrh	r3, [r7, #6]
 800785c:	2bff      	cmp	r3, #255	@ 0xff
 800785e:	d808      	bhi.n	8007872 <ff_oem2uni+0x46>
 8007860:	88fb      	ldrh	r3, [r7, #6]
 8007862:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007866:	3b80      	subs	r3, #128	@ 0x80
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	68ba      	ldr	r2, [r7, #8]
 800786c:	4413      	add	r3, r2
 800786e:	881b      	ldrh	r3, [r3, #0]
 8007870:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007872:	89fb      	ldrh	r3, [r7, #14]
}
 8007874:	4618      	mov	r0, r3
 8007876:	3714      	adds	r7, #20
 8007878:	46bd      	mov	sp, r7
 800787a:	bc80      	pop	{r7}
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	08007b80 	.word	0x08007b80

08007884 <ff_wtoupper>:
/*------------------------------------------------------------------------*/

DWORD ff_wtoupper (	/* Returns up-converted code point */
	DWORD uni		/* Unicode code point to be up-converted */
)
{
 8007884:	b480      	push	{r7}
 8007886:	b087      	sub	sp, #28
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]

		0x0000	/* EOT */
	};


	if (uni < 0x10000) {	/* Is it in BMP? */
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007892:	d27d      	bcs.n	8007990 <ff_wtoupper+0x10c>
		uc = (WORD)uni;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	827b      	strh	r3, [r7, #18]
		p = uc < 0x1000 ? cvt1 : cvt2;
 8007898:	8a7b      	ldrh	r3, [r7, #18]
 800789a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800789e:	d201      	bcs.n	80078a4 <ff_wtoupper+0x20>
 80078a0:	4b3e      	ldr	r3, [pc, #248]	@ (800799c <ff_wtoupper+0x118>)
 80078a2:	e000      	b.n	80078a6 <ff_wtoupper+0x22>
 80078a4:	4b3e      	ldr	r3, [pc, #248]	@ (80079a0 <ff_wtoupper+0x11c>)
 80078a6:	617b      	str	r3, [r7, #20]
		for (;;) {
			bc = *p++;								/* Get the block base */
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	1c9a      	adds	r2, r3, #2
 80078ac:	617a      	str	r2, [r7, #20]
 80078ae:	881b      	ldrh	r3, [r3, #0]
 80078b0:	823b      	strh	r3, [r7, #16]
			if (bc == 0 || uc < bc) break;			/* Not matched? */
 80078b2:	8a3b      	ldrh	r3, [r7, #16]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d069      	beq.n	800798c <ff_wtoupper+0x108>
 80078b8:	8a7a      	ldrh	r2, [r7, #18]
 80078ba:	8a3b      	ldrh	r3, [r7, #16]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d365      	bcc.n	800798c <ff_wtoupper+0x108>
			nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	1c9a      	adds	r2, r3, #2
 80078c4:	617a      	str	r2, [r7, #20]
 80078c6:	881b      	ldrh	r3, [r3, #0]
 80078c8:	81fb      	strh	r3, [r7, #14]
 80078ca:	89fb      	ldrh	r3, [r7, #14]
 80078cc:	0a1b      	lsrs	r3, r3, #8
 80078ce:	81bb      	strh	r3, [r7, #12]
 80078d0:	89fb      	ldrh	r3, [r7, #14]
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	81fb      	strh	r3, [r7, #14]
			if (uc < bc + nc) {	/* In the block? */
 80078d6:	8a7a      	ldrh	r2, [r7, #18]
 80078d8:	8a39      	ldrh	r1, [r7, #16]
 80078da:	89fb      	ldrh	r3, [r7, #14]
 80078dc:	440b      	add	r3, r1
 80078de:	429a      	cmp	r2, r3
 80078e0:	da4a      	bge.n	8007978 <ff_wtoupper+0xf4>
				switch (cmd) {
 80078e2:	89bb      	ldrh	r3, [r7, #12]
 80078e4:	2b08      	cmp	r3, #8
 80078e6:	d850      	bhi.n	800798a <ff_wtoupper+0x106>
 80078e8:	a201      	add	r2, pc, #4	@ (adr r2, 80078f0 <ff_wtoupper+0x6c>)
 80078ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ee:	bf00      	nop
 80078f0:	08007915 	.word	0x08007915
 80078f4:	08007927 	.word	0x08007927
 80078f8:	0800793d 	.word	0x0800793d
 80078fc:	08007945 	.word	0x08007945
 8007900:	0800794d 	.word	0x0800794d
 8007904:	08007955 	.word	0x08007955
 8007908:	0800795d 	.word	0x0800795d
 800790c:	08007965 	.word	0x08007965
 8007910:	0800796d 	.word	0x0800796d
				case 0:	uc = p[uc - bc]; break;		/* Table conversion */
 8007914:	8a7a      	ldrh	r2, [r7, #18]
 8007916:	8a3b      	ldrh	r3, [r7, #16]
 8007918:	1ad3      	subs	r3, r2, r3
 800791a:	005b      	lsls	r3, r3, #1
 800791c:	697a      	ldr	r2, [r7, #20]
 800791e:	4413      	add	r3, r2
 8007920:	881b      	ldrh	r3, [r3, #0]
 8007922:	827b      	strh	r3, [r7, #18]
 8007924:	e027      	b.n	8007976 <ff_wtoupper+0xf2>
				case 1:	uc -= (uc - bc) & 1; break;	/* Case pairs */
 8007926:	8a7a      	ldrh	r2, [r7, #18]
 8007928:	8a3b      	ldrh	r3, [r7, #16]
 800792a:	1ad3      	subs	r3, r2, r3
 800792c:	b29b      	uxth	r3, r3
 800792e:	f003 0301 	and.w	r3, r3, #1
 8007932:	b29b      	uxth	r3, r3
 8007934:	8a7a      	ldrh	r2, [r7, #18]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	827b      	strh	r3, [r7, #18]
 800793a:	e01c      	b.n	8007976 <ff_wtoupper+0xf2>
				case 2: uc -= 16; break;			/* Shift -16 */
 800793c:	8a7b      	ldrh	r3, [r7, #18]
 800793e:	3b10      	subs	r3, #16
 8007940:	827b      	strh	r3, [r7, #18]
 8007942:	e018      	b.n	8007976 <ff_wtoupper+0xf2>
				case 3:	uc -= 32; break;			/* Shift -32 */
 8007944:	8a7b      	ldrh	r3, [r7, #18]
 8007946:	3b20      	subs	r3, #32
 8007948:	827b      	strh	r3, [r7, #18]
 800794a:	e014      	b.n	8007976 <ff_wtoupper+0xf2>
				case 4:	uc -= 48; break;			/* Shift -48 */
 800794c:	8a7b      	ldrh	r3, [r7, #18]
 800794e:	3b30      	subs	r3, #48	@ 0x30
 8007950:	827b      	strh	r3, [r7, #18]
 8007952:	e010      	b.n	8007976 <ff_wtoupper+0xf2>
				case 5:	uc -= 26; break;			/* Shift -26 */
 8007954:	8a7b      	ldrh	r3, [r7, #18]
 8007956:	3b1a      	subs	r3, #26
 8007958:	827b      	strh	r3, [r7, #18]
 800795a:	e00c      	b.n	8007976 <ff_wtoupper+0xf2>
				case 6:	uc += 8; break;				/* Shift +8 */
 800795c:	8a7b      	ldrh	r3, [r7, #18]
 800795e:	3308      	adds	r3, #8
 8007960:	827b      	strh	r3, [r7, #18]
 8007962:	e008      	b.n	8007976 <ff_wtoupper+0xf2>
				case 7: uc -= 80; break;			/* Shift -80 */
 8007964:	8a7b      	ldrh	r3, [r7, #18]
 8007966:	3b50      	subs	r3, #80	@ 0x50
 8007968:	827b      	strh	r3, [r7, #18]
 800796a:	e004      	b.n	8007976 <ff_wtoupper+0xf2>
				case 8:	uc -= 0x1C60; break;		/* Shift -0x1C60 */
 800796c:	8a7b      	ldrh	r3, [r7, #18]
 800796e:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8007972:	827b      	strh	r3, [r7, #18]
 8007974:	bf00      	nop
				}
				break;
 8007976:	e008      	b.n	800798a <ff_wtoupper+0x106>
			}
			if (cmd == 0) p += nc;	/* Skip table if needed */
 8007978:	89bb      	ldrh	r3, [r7, #12]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d194      	bne.n	80078a8 <ff_wtoupper+0x24>
 800797e:	89fb      	ldrh	r3, [r7, #14]
 8007980:	005b      	lsls	r3, r3, #1
 8007982:	697a      	ldr	r2, [r7, #20]
 8007984:	4413      	add	r3, r2
 8007986:	617b      	str	r3, [r7, #20]
			bc = *p++;								/* Get the block base */
 8007988:	e78e      	b.n	80078a8 <ff_wtoupper+0x24>
				break;
 800798a:	bf00      	nop
		}
		uni = uc;
 800798c:	8a7b      	ldrh	r3, [r7, #18]
 800798e:	607b      	str	r3, [r7, #4]
	}

	return uni;
 8007990:	687b      	ldr	r3, [r7, #4]
}
 8007992:	4618      	mov	r0, r3
 8007994:	371c      	adds	r7, #28
 8007996:	46bd      	mov	sp, r7
 8007998:	bc80      	pop	{r7}
 800799a:	4770      	bx	lr
 800799c:	08007c80 	.word	0x08007c80
 80079a0:	08007e74 	.word	0x08007e74

080079a4 <memcmp>:
 80079a4:	b510      	push	{r4, lr}
 80079a6:	3901      	subs	r1, #1
 80079a8:	4402      	add	r2, r0
 80079aa:	4290      	cmp	r0, r2
 80079ac:	d101      	bne.n	80079b2 <memcmp+0xe>
 80079ae:	2000      	movs	r0, #0
 80079b0:	e005      	b.n	80079be <memcmp+0x1a>
 80079b2:	7803      	ldrb	r3, [r0, #0]
 80079b4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80079b8:	42a3      	cmp	r3, r4
 80079ba:	d001      	beq.n	80079c0 <memcmp+0x1c>
 80079bc:	1b18      	subs	r0, r3, r4
 80079be:	bd10      	pop	{r4, pc}
 80079c0:	3001      	adds	r0, #1
 80079c2:	e7f2      	b.n	80079aa <memcmp+0x6>

080079c4 <memset>:
 80079c4:	4603      	mov	r3, r0
 80079c6:	4402      	add	r2, r0
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d100      	bne.n	80079ce <memset+0xa>
 80079cc:	4770      	bx	lr
 80079ce:	f803 1b01 	strb.w	r1, [r3], #1
 80079d2:	e7f9      	b.n	80079c8 <memset+0x4>

080079d4 <strchr>:
 80079d4:	4603      	mov	r3, r0
 80079d6:	b2c9      	uxtb	r1, r1
 80079d8:	4618      	mov	r0, r3
 80079da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079de:	b112      	cbz	r2, 80079e6 <strchr+0x12>
 80079e0:	428a      	cmp	r2, r1
 80079e2:	d1f9      	bne.n	80079d8 <strchr+0x4>
 80079e4:	4770      	bx	lr
 80079e6:	2900      	cmp	r1, #0
 80079e8:	bf18      	it	ne
 80079ea:	2000      	movne	r0, #0
 80079ec:	4770      	bx	lr
	...

080079f0 <__libc_init_array>:
 80079f0:	b570      	push	{r4, r5, r6, lr}
 80079f2:	2600      	movs	r6, #0
 80079f4:	4d0c      	ldr	r5, [pc, #48]	@ (8007a28 <__libc_init_array+0x38>)
 80079f6:	4c0d      	ldr	r4, [pc, #52]	@ (8007a2c <__libc_init_array+0x3c>)
 80079f8:	1b64      	subs	r4, r4, r5
 80079fa:	10a4      	asrs	r4, r4, #2
 80079fc:	42a6      	cmp	r6, r4
 80079fe:	d109      	bne.n	8007a14 <__libc_init_array+0x24>
 8007a00:	f000 f828 	bl	8007a54 <_init>
 8007a04:	2600      	movs	r6, #0
 8007a06:	4d0a      	ldr	r5, [pc, #40]	@ (8007a30 <__libc_init_array+0x40>)
 8007a08:	4c0a      	ldr	r4, [pc, #40]	@ (8007a34 <__libc_init_array+0x44>)
 8007a0a:	1b64      	subs	r4, r4, r5
 8007a0c:	10a4      	asrs	r4, r4, #2
 8007a0e:	42a6      	cmp	r6, r4
 8007a10:	d105      	bne.n	8007a1e <__libc_init_array+0x2e>
 8007a12:	bd70      	pop	{r4, r5, r6, pc}
 8007a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a18:	4798      	blx	r3
 8007a1a:	3601      	adds	r6, #1
 8007a1c:	e7ee      	b.n	80079fc <__libc_init_array+0xc>
 8007a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a22:	4798      	blx	r3
 8007a24:	3601      	adds	r6, #1
 8007a26:	e7f2      	b.n	8007a0e <__libc_init_array+0x1e>
 8007a28:	08007f38 	.word	0x08007f38
 8007a2c:	08007f38 	.word	0x08007f38
 8007a30:	08007f38 	.word	0x08007f38
 8007a34:	08007f3c 	.word	0x08007f3c

08007a38 <memcpy>:
 8007a38:	440a      	add	r2, r1
 8007a3a:	4291      	cmp	r1, r2
 8007a3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a40:	d100      	bne.n	8007a44 <memcpy+0xc>
 8007a42:	4770      	bx	lr
 8007a44:	b510      	push	{r4, lr}
 8007a46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a4a:	4291      	cmp	r1, r2
 8007a4c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a50:	d1f9      	bne.n	8007a46 <memcpy+0xe>
 8007a52:	bd10      	pop	{r4, pc}

08007a54 <_init>:
 8007a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a56:	bf00      	nop
 8007a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a5a:	bc08      	pop	{r3}
 8007a5c:	469e      	mov	lr, r3
 8007a5e:	4770      	bx	lr

08007a60 <_fini>:
 8007a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a62:	bf00      	nop
 8007a64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a66:	bc08      	pop	{r3}
 8007a68:	469e      	mov	lr, r3
 8007a6a:	4770      	bx	lr
