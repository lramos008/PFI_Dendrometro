
PFI_Dendro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c38  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002d44  08002d44  00003d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002dc0  08002dc0  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002dc0  08002dc0  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002dc0  08002dc0  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002dc0  08002dc0  00003dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002dc4  08002dc4  00003dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002dc8  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08002dd4  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002dd4  00004080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006cad  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000016ca  00000000  00000000  0000ace2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  0000c3b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005ce  00000000  00000000  0000cb58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000162ef  00000000  00000000  0000d126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009671  00000000  00000000  00023415  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007edbf  00000000  00000000  0002ca86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ab845  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001df8  00000000  00000000  000ab888  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000ad680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002d2c 	.word	0x08002d2c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002d2c 	.word	0x08002d2c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b5b0      	push	{r4, r5, r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f000 fe1f 	bl	8000d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f81d 	bl	8000194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015a:	f000 f885 	bl	8000268 <MX_GPIO_Init>
  MX_I2C1_Init();
 800015e:	f000 f855 	bl	800020c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  sDateTime dateTime = {.hours = 20, .minutes = 30, .seconds = 0,
 8000162:	4b0b      	ldr	r3, [pc, #44]	@ (8000190 <main+0x44>)
 8000164:	1d3c      	adds	r4, r7, #4
 8000166:	461d      	mov	r5, r3
 8000168:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800016a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800016c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000170:	e884 0007 	stmia.w	r4, {r0, r1, r2}
		  	  	  	    .dayOfWeek = 7, .date = 6, .month = 4, .year = 25};

  enableAlarmInterrupt();
 8000174:	f000 fdc9 	bl	8000d0a <enableAlarmInterrupt>
  clearAlarmInterruptFlag();
 8000178:	f000 fdce 	bl	8000d18 <clearAlarmInterruptFlag>
  setDateTime(&dateTime);
 800017c:	1d3b      	adds	r3, r7, #4
 800017e:	4618      	mov	r0, r3
 8000180:	f000 fd7a 	bl	8000c78 <setDateTime>
  SetNextMinutesAlarm(1);
 8000184:	2001      	movs	r0, #1
 8000186:	f000 fdcd 	bl	8000d24 <SetNextMinutesAlarm>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800018a:	bf00      	nop
 800018c:	e7fd      	b.n	800018a <main+0x3e>
 800018e:	bf00      	nop
 8000190:	08002d44 	.word	0x08002d44

08000194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000194:	b580      	push	{r7, lr}
 8000196:	b090      	sub	sp, #64	@ 0x40
 8000198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800019a:	f107 0318 	add.w	r3, r7, #24
 800019e:	2228      	movs	r2, #40	@ 0x28
 80001a0:	2100      	movs	r1, #0
 80001a2:	4618      	mov	r0, r3
 80001a4:	f002 fd96 	bl	8002cd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001a8:	1d3b      	adds	r3, r7, #4
 80001aa:	2200      	movs	r2, #0
 80001ac:	601a      	str	r2, [r3, #0]
 80001ae:	605a      	str	r2, [r3, #4]
 80001b0:	609a      	str	r2, [r3, #8]
 80001b2:	60da      	str	r2, [r3, #12]
 80001b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001b6:	2302      	movs	r3, #2
 80001b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001ba:	2301      	movs	r3, #1
 80001bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80001be:	2310      	movs	r3, #16
 80001c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80001c2:	2300      	movs	r3, #0
 80001c4:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001c6:	f107 0318 	add.w	r3, r7, #24
 80001ca:	4618      	mov	r0, r3
 80001cc:	f002 f986 	bl	80024dc <HAL_RCC_OscConfig>
 80001d0:	4603      	mov	r3, r0
 80001d2:	2b00      	cmp	r3, #0
 80001d4:	d001      	beq.n	80001da <SystemClock_Config+0x46>
  {
    Error_Handler();
 80001d6:	f000 f8c1 	bl	800035c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001da:	230f      	movs	r3, #15
 80001dc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80001de:	2300      	movs	r3, #0
 80001e0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001e2:	2300      	movs	r3, #0
 80001e4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80001e6:	2300      	movs	r3, #0
 80001e8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001ea:	2300      	movs	r3, #0
 80001ec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80001ee:	1d3b      	adds	r3, r7, #4
 80001f0:	2100      	movs	r1, #0
 80001f2:	4618      	mov	r0, r3
 80001f4:	f002 fbf4 	bl	80029e0 <HAL_RCC_ClockConfig>
 80001f8:	4603      	mov	r3, r0
 80001fa:	2b00      	cmp	r3, #0
 80001fc:	d001      	beq.n	8000202 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80001fe:	f000 f8ad 	bl	800035c <Error_Handler>
  }
}
 8000202:	bf00      	nop
 8000204:	3740      	adds	r7, #64	@ 0x40
 8000206:	46bd      	mov	sp, r7
 8000208:	bd80      	pop	{r7, pc}
	...

0800020c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000210:	4b12      	ldr	r3, [pc, #72]	@ (800025c <MX_I2C1_Init+0x50>)
 8000212:	4a13      	ldr	r2, [pc, #76]	@ (8000260 <MX_I2C1_Init+0x54>)
 8000214:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000216:	4b11      	ldr	r3, [pc, #68]	@ (800025c <MX_I2C1_Init+0x50>)
 8000218:	4a12      	ldr	r2, [pc, #72]	@ (8000264 <MX_I2C1_Init+0x58>)
 800021a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800021c:	4b0f      	ldr	r3, [pc, #60]	@ (800025c <MX_I2C1_Init+0x50>)
 800021e:	2200      	movs	r2, #0
 8000220:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000222:	4b0e      	ldr	r3, [pc, #56]	@ (800025c <MX_I2C1_Init+0x50>)
 8000224:	2200      	movs	r2, #0
 8000226:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000228:	4b0c      	ldr	r3, [pc, #48]	@ (800025c <MX_I2C1_Init+0x50>)
 800022a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800022e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000230:	4b0a      	ldr	r3, [pc, #40]	@ (800025c <MX_I2C1_Init+0x50>)
 8000232:	2200      	movs	r2, #0
 8000234:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000236:	4b09      	ldr	r3, [pc, #36]	@ (800025c <MX_I2C1_Init+0x50>)
 8000238:	2200      	movs	r2, #0
 800023a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800023c:	4b07      	ldr	r3, [pc, #28]	@ (800025c <MX_I2C1_Init+0x50>)
 800023e:	2200      	movs	r2, #0
 8000240:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000242:	4b06      	ldr	r3, [pc, #24]	@ (800025c <MX_I2C1_Init+0x50>)
 8000244:	2200      	movs	r2, #0
 8000246:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000248:	4804      	ldr	r0, [pc, #16]	@ (800025c <MX_I2C1_Init+0x50>)
 800024a:	f001 f8e1 	bl	8001410 <HAL_I2C_Init>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000254:	f000 f882 	bl	800035c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000258:	bf00      	nop
 800025a:	bd80      	pop	{r7, pc}
 800025c:	20000028 	.word	0x20000028
 8000260:	40005400 	.word	0x40005400
 8000264:	000186a0 	.word	0x000186a0

08000268 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b088      	sub	sp, #32
 800026c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800026e:	f107 0310 	add.w	r3, r7, #16
 8000272:	2200      	movs	r2, #0
 8000274:	601a      	str	r2, [r3, #0]
 8000276:	605a      	str	r2, [r3, #4]
 8000278:	609a      	str	r2, [r3, #8]
 800027a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800027c:	4b28      	ldr	r3, [pc, #160]	@ (8000320 <MX_GPIO_Init+0xb8>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a27      	ldr	r2, [pc, #156]	@ (8000320 <MX_GPIO_Init+0xb8>)
 8000282:	f043 0310 	orr.w	r3, r3, #16
 8000286:	6193      	str	r3, [r2, #24]
 8000288:	4b25      	ldr	r3, [pc, #148]	@ (8000320 <MX_GPIO_Init+0xb8>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	f003 0310 	and.w	r3, r3, #16
 8000290:	60fb      	str	r3, [r7, #12]
 8000292:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000294:	4b22      	ldr	r3, [pc, #136]	@ (8000320 <MX_GPIO_Init+0xb8>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a21      	ldr	r2, [pc, #132]	@ (8000320 <MX_GPIO_Init+0xb8>)
 800029a:	f043 0304 	orr.w	r3, r3, #4
 800029e:	6193      	str	r3, [r2, #24]
 80002a0:	4b1f      	ldr	r3, [pc, #124]	@ (8000320 <MX_GPIO_Init+0xb8>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	f003 0304 	and.w	r3, r3, #4
 80002a8:	60bb      	str	r3, [r7, #8]
 80002aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80002ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000320 <MX_GPIO_Init+0xb8>)
 80002ae:	699b      	ldr	r3, [r3, #24]
 80002b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000320 <MX_GPIO_Init+0xb8>)
 80002b2:	f043 0308 	orr.w	r3, r3, #8
 80002b6:	6193      	str	r3, [r2, #24]
 80002b8:	4b19      	ldr	r3, [pc, #100]	@ (8000320 <MX_GPIO_Init+0xb8>)
 80002ba:	699b      	ldr	r3, [r3, #24]
 80002bc:	f003 0308 	and.w	r3, r3, #8
 80002c0:	607b      	str	r3, [r7, #4]
 80002c2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002c4:	2200      	movs	r2, #0
 80002c6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80002ca:	4816      	ldr	r0, [pc, #88]	@ (8000324 <MX_GPIO_Init+0xbc>)
 80002cc:	f001 f856 	bl	800137c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80002d0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80002d4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002d6:	2301      	movs	r3, #1
 80002d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002da:	2300      	movs	r3, #0
 80002dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002de:	2302      	movs	r3, #2
 80002e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80002e2:	f107 0310 	add.w	r3, r7, #16
 80002e6:	4619      	mov	r1, r3
 80002e8:	480e      	ldr	r0, [pc, #56]	@ (8000324 <MX_GPIO_Init+0xbc>)
 80002ea:	f000 fec3 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pin : RTC_INT_Pin */
  GPIO_InitStruct.Pin = RTC_INT_Pin;
 80002ee:	2320      	movs	r3, #32
 80002f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80002f2:	4b0d      	ldr	r3, [pc, #52]	@ (8000328 <MX_GPIO_Init+0xc0>)
 80002f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002f6:	2300      	movs	r3, #0
 80002f8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RTC_INT_GPIO_Port, &GPIO_InitStruct);
 80002fa:	f107 0310 	add.w	r3, r7, #16
 80002fe:	4619      	mov	r1, r3
 8000300:	480a      	ldr	r0, [pc, #40]	@ (800032c <MX_GPIO_Init+0xc4>)
 8000302:	f000 feb7 	bl	8001074 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000306:	2200      	movs	r2, #0
 8000308:	2100      	movs	r1, #0
 800030a:	2017      	movs	r0, #23
 800030c:	f000 fe7b 	bl	8001006 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000310:	2017      	movs	r0, #23
 8000312:	f000 fe94 	bl	800103e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000316:	bf00      	nop
 8000318:	3720      	adds	r7, #32
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40021000 	.word	0x40021000
 8000324:	40011000 	.word	0x40011000
 8000328:	10210000 	.word	0x10210000
 800032c:	40010c00 	.word	0x40010c00

08000330 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	4603      	mov	r3, r0
 8000338:	80fb      	strh	r3, [r7, #6]
	clearAlarmInterruptFlag();
 800033a:	f000 fced 	bl	8000d18 <clearAlarmInterruptFlag>
	SetNextMinutesAlarm(1);
 800033e:	2001      	movs	r0, #1
 8000340:	f000 fcf0 	bl	8000d24 <SetNextMinutesAlarm>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000344:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000348:	4803      	ldr	r0, [pc, #12]	@ (8000358 <HAL_GPIO_EXTI_Callback+0x28>)
 800034a:	f001 f82f 	bl	80013ac <HAL_GPIO_TogglePin>
}
 800034e:	bf00      	nop
 8000350:	3708      	adds	r7, #8
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
 8000356:	bf00      	nop
 8000358:	40011000 	.word	0x40011000

0800035c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000360:	b672      	cpsid	i
}
 8000362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000364:	bf00      	nop
 8000366:	e7fd      	b.n	8000364 <Error_Handler+0x8>

08000368 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000368:	b480      	push	{r7}
 800036a:	b085      	sub	sp, #20
 800036c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800036e:	4b15      	ldr	r3, [pc, #84]	@ (80003c4 <HAL_MspInit+0x5c>)
 8000370:	699b      	ldr	r3, [r3, #24]
 8000372:	4a14      	ldr	r2, [pc, #80]	@ (80003c4 <HAL_MspInit+0x5c>)
 8000374:	f043 0301 	orr.w	r3, r3, #1
 8000378:	6193      	str	r3, [r2, #24]
 800037a:	4b12      	ldr	r3, [pc, #72]	@ (80003c4 <HAL_MspInit+0x5c>)
 800037c:	699b      	ldr	r3, [r3, #24]
 800037e:	f003 0301 	and.w	r3, r3, #1
 8000382:	60bb      	str	r3, [r7, #8]
 8000384:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000386:	4b0f      	ldr	r3, [pc, #60]	@ (80003c4 <HAL_MspInit+0x5c>)
 8000388:	69db      	ldr	r3, [r3, #28]
 800038a:	4a0e      	ldr	r2, [pc, #56]	@ (80003c4 <HAL_MspInit+0x5c>)
 800038c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000390:	61d3      	str	r3, [r2, #28]
 8000392:	4b0c      	ldr	r3, [pc, #48]	@ (80003c4 <HAL_MspInit+0x5c>)
 8000394:	69db      	ldr	r3, [r3, #28]
 8000396:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800039a:	607b      	str	r3, [r7, #4]
 800039c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800039e:	4b0a      	ldr	r3, [pc, #40]	@ (80003c8 <HAL_MspInit+0x60>)
 80003a0:	685b      	ldr	r3, [r3, #4]
 80003a2:	60fb      	str	r3, [r7, #12]
 80003a4:	68fb      	ldr	r3, [r7, #12]
 80003a6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80003aa:	60fb      	str	r3, [r7, #12]
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80003b2:	60fb      	str	r3, [r7, #12]
 80003b4:	4a04      	ldr	r2, [pc, #16]	@ (80003c8 <HAL_MspInit+0x60>)
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ba:	bf00      	nop
 80003bc:	3714      	adds	r7, #20
 80003be:	46bd      	mov	sp, r7
 80003c0:	bc80      	pop	{r7}
 80003c2:	4770      	bx	lr
 80003c4:	40021000 	.word	0x40021000
 80003c8:	40010000 	.word	0x40010000

080003cc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b088      	sub	sp, #32
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d4:	f107 0310 	add.w	r3, r7, #16
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
 80003dc:	605a      	str	r2, [r3, #4]
 80003de:	609a      	str	r2, [r3, #8]
 80003e0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a15      	ldr	r2, [pc, #84]	@ (800043c <HAL_I2C_MspInit+0x70>)
 80003e8:	4293      	cmp	r3, r2
 80003ea:	d123      	bne.n	8000434 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ec:	4b14      	ldr	r3, [pc, #80]	@ (8000440 <HAL_I2C_MspInit+0x74>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a13      	ldr	r2, [pc, #76]	@ (8000440 <HAL_I2C_MspInit+0x74>)
 80003f2:	f043 0308 	orr.w	r3, r3, #8
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b11      	ldr	r3, [pc, #68]	@ (8000440 <HAL_I2C_MspInit+0x74>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0308 	and.w	r3, r3, #8
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000404:	23c0      	movs	r3, #192	@ 0xc0
 8000406:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000408:	2312      	movs	r3, #18
 800040a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800040c:	2303      	movs	r3, #3
 800040e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000410:	f107 0310 	add.w	r3, r7, #16
 8000414:	4619      	mov	r1, r3
 8000416:	480b      	ldr	r0, [pc, #44]	@ (8000444 <HAL_I2C_MspInit+0x78>)
 8000418:	f000 fe2c 	bl	8001074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800041c:	4b08      	ldr	r3, [pc, #32]	@ (8000440 <HAL_I2C_MspInit+0x74>)
 800041e:	69db      	ldr	r3, [r3, #28]
 8000420:	4a07      	ldr	r2, [pc, #28]	@ (8000440 <HAL_I2C_MspInit+0x74>)
 8000422:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000426:	61d3      	str	r3, [r2, #28]
 8000428:	4b05      	ldr	r3, [pc, #20]	@ (8000440 <HAL_I2C_MspInit+0x74>)
 800042a:	69db      	ldr	r3, [r3, #28]
 800042c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000430:	60bb      	str	r3, [r7, #8]
 8000432:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000434:	bf00      	nop
 8000436:	3720      	adds	r7, #32
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40005400 	.word	0x40005400
 8000440:	40021000 	.word	0x40021000
 8000444:	40010c00 	.word	0x40010c00

08000448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000448:	b480      	push	{r7}
 800044a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800044c:	bf00      	nop
 800044e:	e7fd      	b.n	800044c <NMI_Handler+0x4>

08000450 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000454:	bf00      	nop
 8000456:	e7fd      	b.n	8000454 <HardFault_Handler+0x4>

08000458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000458:	b480      	push	{r7}
 800045a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800045c:	bf00      	nop
 800045e:	e7fd      	b.n	800045c <MemManage_Handler+0x4>

08000460 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000460:	b480      	push	{r7}
 8000462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000464:	bf00      	nop
 8000466:	e7fd      	b.n	8000464 <BusFault_Handler+0x4>

08000468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000468:	b480      	push	{r7}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800046c:	bf00      	nop
 800046e:	e7fd      	b.n	800046c <UsageFault_Handler+0x4>

08000470 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	bc80      	pop	{r7}
 800047a:	4770      	bx	lr

0800047c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000480:	bf00      	nop
 8000482:	46bd      	mov	sp, r7
 8000484:	bc80      	pop	{r7}
 8000486:	4770      	bx	lr

08000488 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800048c:	bf00      	nop
 800048e:	46bd      	mov	sp, r7
 8000490:	bc80      	pop	{r7}
 8000492:	4770      	bx	lr

08000494 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000498:	f000 fcc2 	bl	8000e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800049c:	bf00      	nop
 800049e:	bd80      	pop	{r7, pc}

080004a0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RTC_INT_Pin);
 80004a4:	2020      	movs	r0, #32
 80004a6:	f000 ff9b 	bl	80013e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80004aa:	bf00      	nop
 80004ac:	bd80      	pop	{r7, pc}

080004ae <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004ae:	b480      	push	{r7}
 80004b0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004b2:	bf00      	nop
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bc80      	pop	{r7}
 80004b8:	4770      	bx	lr
	...

080004bc <Reset_Handler>:
 80004bc:	f7ff fff7 	bl	80004ae <SystemInit>
 80004c0:	480b      	ldr	r0, [pc, #44]	@ (80004f0 <LoopFillZerobss+0xe>)
 80004c2:	490c      	ldr	r1, [pc, #48]	@ (80004f4 <LoopFillZerobss+0x12>)
 80004c4:	4a0c      	ldr	r2, [pc, #48]	@ (80004f8 <LoopFillZerobss+0x16>)
 80004c6:	2300      	movs	r3, #0
 80004c8:	e002      	b.n	80004d0 <LoopCopyDataInit>

080004ca <CopyDataInit>:
 80004ca:	58d4      	ldr	r4, [r2, r3]
 80004cc:	50c4      	str	r4, [r0, r3]
 80004ce:	3304      	adds	r3, #4

080004d0 <LoopCopyDataInit>:
 80004d0:	18c4      	adds	r4, r0, r3
 80004d2:	428c      	cmp	r4, r1
 80004d4:	d3f9      	bcc.n	80004ca <CopyDataInit>
 80004d6:	4a09      	ldr	r2, [pc, #36]	@ (80004fc <LoopFillZerobss+0x1a>)
 80004d8:	4c09      	ldr	r4, [pc, #36]	@ (8000500 <LoopFillZerobss+0x1e>)
 80004da:	2300      	movs	r3, #0
 80004dc:	e001      	b.n	80004e2 <LoopFillZerobss>

080004de <FillZerobss>:
 80004de:	6013      	str	r3, [r2, #0]
 80004e0:	3204      	adds	r2, #4

080004e2 <LoopFillZerobss>:
 80004e2:	42a2      	cmp	r2, r4
 80004e4:	d3fb      	bcc.n	80004de <FillZerobss>
 80004e6:	f002 fbfd 	bl	8002ce4 <__libc_init_array>
 80004ea:	f7ff fe2f 	bl	800014c <main>
 80004ee:	4770      	bx	lr
 80004f0:	20000000 	.word	0x20000000
 80004f4:	2000000c 	.word	0x2000000c
 80004f8:	08002dc8 	.word	0x08002dc8
 80004fc:	2000000c 	.word	0x2000000c
 8000500:	20000080 	.word	0x20000080

08000504 <ADC1_2_IRQHandler>:
 8000504:	e7fe      	b.n	8000504 <ADC1_2_IRQHandler>
	...

08000508 <dateTimeIsLeapYear>:
 * Check if a year is leap year.
 *
 * @param year Year to check (must be the complete year, do not abbreviate).
 * @return 1 if it is leap year, 0 otherwise.
 */
static uint32_t dateTimeIsLeapYear(uint32_t year){
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
	return (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	f003 0303 	and.w	r3, r3, #3
 8000516:	2b00      	cmp	r3, #0
 8000518:	d118      	bne.n	800054c <dateTimeIsLeapYear+0x44>
 800051a:	687a      	ldr	r2, [r7, #4]
 800051c:	4b0e      	ldr	r3, [pc, #56]	@ (8000558 <dateTimeIsLeapYear+0x50>)
 800051e:	fba3 1302 	umull	r1, r3, r3, r2
 8000522:	095b      	lsrs	r3, r3, #5
 8000524:	2164      	movs	r1, #100	@ 0x64
 8000526:	fb01 f303 	mul.w	r3, r1, r3
 800052a:	1ad3      	subs	r3, r2, r3
 800052c:	2b00      	cmp	r3, #0
 800052e:	d10b      	bne.n	8000548 <dateTimeIsLeapYear+0x40>
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	4b09      	ldr	r3, [pc, #36]	@ (8000558 <dateTimeIsLeapYear+0x50>)
 8000534:	fba3 1302 	umull	r1, r3, r3, r2
 8000538:	09db      	lsrs	r3, r3, #7
 800053a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800053e:	fb01 f303 	mul.w	r3, r1, r3
 8000542:	1ad3      	subs	r3, r2, r3
 8000544:	2b00      	cmp	r3, #0
 8000546:	d101      	bne.n	800054c <dateTimeIsLeapYear+0x44>
 8000548:	2301      	movs	r3, #1
 800054a:	e000      	b.n	800054e <dateTimeIsLeapYear+0x46>
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	bc80      	pop	{r7}
 8000556:	4770      	bx	lr
 8000558:	51eb851f 	.word	0x51eb851f

0800055c <dateTimeDaysInMonth>:
 * @param month Specified month.
 * @param year  Specified year (do not abbreviate year).
 * @return 0 if an invalid month was entered, or the max number of days
 * 		   for that specific month and year otherwise.
 */
static uint32_t dateTimeDaysInMonth(uint32_t month, uint32_t year){
 800055c:	b5b0      	push	{r4, r5, r7, lr}
 800055e:	b090      	sub	sp, #64	@ 0x40
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
 8000564:	6039      	str	r1, [r7, #0]
	const uint32_t daysInMonth[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
 8000566:	4b17      	ldr	r3, [pc, #92]	@ (80005c4 <dateTimeDaysInMonth+0x68>)
 8000568:	f107 040c 	add.w	r4, r7, #12
 800056c:	461d      	mov	r5, r3
 800056e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000570:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000572:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000574:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000576:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800057a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint32_t maxDays;
	if(month < 1 || month > 12){
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	2b00      	cmp	r3, #0
 8000582:	d002      	beq.n	800058a <dateTimeDaysInMonth+0x2e>
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2b0c      	cmp	r3, #12
 8000588:	d902      	bls.n	8000590 <dateTimeDaysInMonth+0x34>
		maxDays = 0;					//Invalid month
 800058a:	2300      	movs	r3, #0
 800058c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800058e:	e013      	b.n	80005b8 <dateTimeDaysInMonth+0x5c>
	}
	//If the current month is February check for leap year
	else if(month == 2 && dateTimeIsLeapYear(year)){
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d108      	bne.n	80005a8 <dateTimeDaysInMonth+0x4c>
 8000596:	6838      	ldr	r0, [r7, #0]
 8000598:	f7ff ffb6 	bl	8000508 <dateTimeIsLeapYear>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d002      	beq.n	80005a8 <dateTimeDaysInMonth+0x4c>
		maxDays = 29;
 80005a2:	231d      	movs	r3, #29
 80005a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80005a6:	e007      	b.n	80005b8 <dateTimeDaysInMonth+0x5c>
	}
	else{
		maxDays = daysInMonth[month - 1];
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	3b01      	subs	r3, #1
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	3340      	adds	r3, #64	@ 0x40
 80005b0:	443b      	add	r3, r7
 80005b2:	f853 3c34 	ldr.w	r3, [r3, #-52]
 80005b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
	}
	return maxDays;
 80005b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3740      	adds	r7, #64	@ 0x40
 80005be:	46bd      	mov	sp, r7
 80005c0:	bdb0      	pop	{r4, r5, r7, pc}
 80005c2:	bf00      	nop
 80005c4:	08002d60 	.word	0x08002d60

080005c8 <dateTimeNormalize>:
 * functions, so the add operation doesn't throw out of range values.
 *
 * @param dateTime Pointer to a sDateTime structure.
 * @return None.
 */
static void dateTimeNormalize(sDateTime *dateTime){
 80005c8:	b590      	push	{r4, r7, lr}
 80005ca:	b085      	sub	sp, #20
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
	uint32_t daysAdded;

	//Adjust seconds
	dateTime->minutes += dateTime->seconds / 60;
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	685a      	ldr	r2, [r3, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	494a      	ldr	r1, [pc, #296]	@ (8000704 <dateTimeNormalize+0x13c>)
 80005da:	fba1 1303 	umull	r1, r3, r1, r3
 80005de:	095b      	lsrs	r3, r3, #5
 80005e0:	441a      	add	r2, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	605a      	str	r2, [r3, #4]
	dateTime->seconds %= 60;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6819      	ldr	r1, [r3, #0]
 80005ea:	4b46      	ldr	r3, [pc, #280]	@ (8000704 <dateTimeNormalize+0x13c>)
 80005ec:	fba3 2301 	umull	r2, r3, r3, r1
 80005f0:	095a      	lsrs	r2, r3, #5
 80005f2:	4613      	mov	r3, r2
 80005f4:	011b      	lsls	r3, r3, #4
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	1aca      	subs	r2, r1, r3
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	601a      	str	r2, [r3, #0]

	//Adjust minutes
	dateTime->hours += dateTime->minutes / 60;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	689a      	ldr	r2, [r3, #8]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	685b      	ldr	r3, [r3, #4]
 8000608:	493e      	ldr	r1, [pc, #248]	@ (8000704 <dateTimeNormalize+0x13c>)
 800060a:	fba1 1303 	umull	r1, r3, r1, r3
 800060e:	095b      	lsrs	r3, r3, #5
 8000610:	441a      	add	r2, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	609a      	str	r2, [r3, #8]
	dateTime->minutes %= 60;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6859      	ldr	r1, [r3, #4]
 800061a:	4b3a      	ldr	r3, [pc, #232]	@ (8000704 <dateTimeNormalize+0x13c>)
 800061c:	fba3 2301 	umull	r2, r3, r3, r1
 8000620:	095a      	lsrs	r2, r3, #5
 8000622:	4613      	mov	r3, r2
 8000624:	011b      	lsls	r3, r3, #4
 8000626:	1a9b      	subs	r3, r3, r2
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	1aca      	subs	r2, r1, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	605a      	str	r2, [r3, #4]

	//Adjust hours
	dateTime->date += dateTime->hours / 24;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	691a      	ldr	r2, [r3, #16]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	689b      	ldr	r3, [r3, #8]
 8000638:	4933      	ldr	r1, [pc, #204]	@ (8000708 <dateTimeNormalize+0x140>)
 800063a:	fba1 1303 	umull	r1, r3, r1, r3
 800063e:	091b      	lsrs	r3, r3, #4
 8000640:	441a      	add	r2, r3
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	611a      	str	r2, [r3, #16]
	daysAdded = dateTime->hours / 24;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	689b      	ldr	r3, [r3, #8]
 800064a:	4a2f      	ldr	r2, [pc, #188]	@ (8000708 <dateTimeNormalize+0x140>)
 800064c:	fba2 2303 	umull	r2, r3, r2, r3
 8000650:	091b      	lsrs	r3, r3, #4
 8000652:	60fb      	str	r3, [r7, #12]
	dateTime->hours %= 24;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	6899      	ldr	r1, [r3, #8]
 8000658:	4b2b      	ldr	r3, [pc, #172]	@ (8000708 <dateTimeNormalize+0x140>)
 800065a:	fba3 2301 	umull	r2, r3, r3, r1
 800065e:	091a      	lsrs	r2, r3, #4
 8000660:	4613      	mov	r3, r2
 8000662:	005b      	lsls	r3, r3, #1
 8000664:	4413      	add	r3, r2
 8000666:	00db      	lsls	r3, r3, #3
 8000668:	1aca      	subs	r2, r1, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	609a      	str	r2, [r3, #8]

	//Adjust day of the week
	if(daysAdded > 0){
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d034      	beq.n	80006de <dateTimeNormalize+0x116>
		dateTime->dayOfWeek = ((dateTime->dayOfWeek - 1 + daysAdded) % 7) + 1;		//Substract 1 to daoOfWeek in order to use modulus operation.
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	68da      	ldr	r2, [r3, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	4413      	add	r3, r2
 800067c:	1e59      	subs	r1, r3, #1
 800067e:	4b23      	ldr	r3, [pc, #140]	@ (800070c <dateTimeNormalize+0x144>)
 8000680:	fba3 2301 	umull	r2, r3, r3, r1
 8000684:	1aca      	subs	r2, r1, r3
 8000686:	0852      	lsrs	r2, r2, #1
 8000688:	4413      	add	r3, r2
 800068a:	089a      	lsrs	r2, r3, #2
 800068c:	4613      	mov	r3, r2
 800068e:	00db      	lsls	r3, r3, #3
 8000690:	1a9b      	subs	r3, r3, r2
 8000692:	1aca      	subs	r2, r1, r3
 8000694:	3201      	adds	r2, #1
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	60da      	str	r2, [r3, #12]
																					//Then add 1 to retrieve original number
	}

	//Adjust months and years
	while(dateTime->date > dateTimeDaysInMonth(dateTime->month, 2000 + dateTime->year)){
 800069a:	e020      	b.n	80006de <dateTimeNormalize+0x116>
		dateTime->date -= dateTimeDaysInMonth(dateTime->month, 2000 + dateTime->year);
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	695a      	ldr	r2, [r3, #20]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80006a8:	4619      	mov	r1, r3
 80006aa:	4610      	mov	r0, r2
 80006ac:	f7ff ff56 	bl	800055c <dateTimeDaysInMonth>
 80006b0:	4602      	mov	r2, r0
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	691b      	ldr	r3, [r3, #16]
 80006b6:	1a9a      	subs	r2, r3, r2
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	611a      	str	r2, [r3, #16]
		dateTime->month++;
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	695b      	ldr	r3, [r3, #20]
 80006c0:	1c5a      	adds	r2, r3, #1
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	615a      	str	r2, [r3, #20]
		if(dateTime->month > 12){
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	695b      	ldr	r3, [r3, #20]
 80006ca:	2b0c      	cmp	r3, #12
 80006cc:	d907      	bls.n	80006de <dateTimeNormalize+0x116>
			dateTime->month = 1;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2201      	movs	r2, #1
 80006d2:	615a      	str	r2, [r3, #20]
			dateTime->year++;
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	1c5a      	adds	r2, r3, #1
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	619a      	str	r2, [r3, #24]
	while(dateTime->date > dateTimeDaysInMonth(dateTime->month, 2000 + dateTime->year)){
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	691c      	ldr	r4, [r3, #16]
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	695a      	ldr	r2, [r3, #20]
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	699b      	ldr	r3, [r3, #24]
 80006ea:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80006ee:	4619      	mov	r1, r3
 80006f0:	4610      	mov	r0, r2
 80006f2:	f7ff ff33 	bl	800055c <dateTimeDaysInMonth>
 80006f6:	4603      	mov	r3, r0
 80006f8:	429c      	cmp	r4, r3
 80006fa:	d8cf      	bhi.n	800069c <dateTimeNormalize+0xd4>
		}
	}
	return;
 80006fc:	bf00      	nop
}
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	bd90      	pop	{r4, r7, pc}
 8000704:	88888889 	.word	0x88888889
 8000708:	aaaaaaab 	.word	0xaaaaaaab
 800070c:	24924925 	.word	0x24924925

08000710 <dateTimeisValid>:
 * @param dateTime Pointer to a sDateTime structure.
 * @return DATETIME_OK for a valid date and time,
 * 		   DATETIME_INVALID_DATE if the entered date is incorrect,
 * 		   DATETIME_INVALID_TIME if the entered time is incorrect.
 */
tDateTimeStatus dateTimeisValid(sDateTime *dateTime){
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	tDateTimeStatus status;
	//Check for valid date
	if(dateTime->dayOfWeek > 7 || dateTime->dayOfWeek < 1 ||
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	68db      	ldr	r3, [r3, #12]
 800071c:	2b07      	cmp	r3, #7
 800071e:	d822      	bhi.n	8000766 <dateTimeisValid+0x56>
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	2b00      	cmp	r3, #0
 8000726:	d01e      	beq.n	8000766 <dateTimeisValid+0x56>
	   dateTime->date > dateTimeDaysInMonth(dateTime->month, 2000 + dateTime->year) ||
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	691c      	ldr	r4, [r3, #16]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	695a      	ldr	r2, [r3, #20]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	699b      	ldr	r3, [r3, #24]
 8000734:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000738:	4619      	mov	r1, r3
 800073a:	4610      	mov	r0, r2
 800073c:	f7ff ff0e 	bl	800055c <dateTimeDaysInMonth>
 8000740:	4603      	mov	r3, r0
	if(dateTime->dayOfWeek > 7 || dateTime->dayOfWeek < 1 ||
 8000742:	429c      	cmp	r4, r3
 8000744:	d80f      	bhi.n	8000766 <dateTimeisValid+0x56>
	   dateTime->date < 1 || dateTime->month > 12 || dateTime->month < 1 || dateTime->year > 99)
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	691b      	ldr	r3, [r3, #16]
	   dateTime->date > dateTimeDaysInMonth(dateTime->month, 2000 + dateTime->year) ||
 800074a:	2b00      	cmp	r3, #0
 800074c:	d00b      	beq.n	8000766 <dateTimeisValid+0x56>
	   dateTime->date < 1 || dateTime->month > 12 || dateTime->month < 1 || dateTime->year > 99)
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	2b0c      	cmp	r3, #12
 8000754:	d807      	bhi.n	8000766 <dateTimeisValid+0x56>
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	2b00      	cmp	r3, #0
 800075c:	d003      	beq.n	8000766 <dateTimeisValid+0x56>
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	2b63      	cmp	r3, #99	@ 0x63
 8000764:	d902      	bls.n	800076c <dateTimeisValid+0x5c>
	{
		status = DATETIME_INVALID_DATE;
 8000766:	2301      	movs	r3, #1
 8000768:	73fb      	strb	r3, [r7, #15]
 800076a:	e010      	b.n	800078e <dateTimeisValid+0x7e>
	}
	else if(dateTime->seconds > 59 || dateTime->minutes > 59 || dateTime->hours > 23){
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	2b3b      	cmp	r3, #59	@ 0x3b
 8000772:	d807      	bhi.n	8000784 <dateTimeisValid+0x74>
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	2b3b      	cmp	r3, #59	@ 0x3b
 800077a:	d803      	bhi.n	8000784 <dateTimeisValid+0x74>
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	689b      	ldr	r3, [r3, #8]
 8000780:	2b17      	cmp	r3, #23
 8000782:	d902      	bls.n	800078a <dateTimeisValid+0x7a>
		status = DATETIME_INVALID_TIME;
 8000784:	2302      	movs	r3, #2
 8000786:	73fb      	strb	r3, [r7, #15]
 8000788:	e001      	b.n	800078e <dateTimeisValid+0x7e>
	}
	else{
		status = DATETIME_OK;
 800078a:	2300      	movs	r3, #0
 800078c:	73fb      	strb	r3, [r7, #15]
	}
	return status;
 800078e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000790:	4618      	mov	r0, r3
 8000792:	3714      	adds	r7, #20
 8000794:	46bd      	mov	sp, r7
 8000796:	bd90      	pop	{r4, r7, pc}

08000798 <dateTimeAddMinutes>:
 *
 * @param dateTime Pointer to a sDateTime structure.
 * @param minutesToAdd Minutes to add to the current date and time.
 * @return None.
 */
void dateTimeAddMinutes(sDateTime *dateTime, uint32_t minutesToAdd){
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	6039      	str	r1, [r7, #0]
	if(dateTime == NULL) return;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d009      	beq.n	80007bc <dateTimeAddMinutes+0x24>
	dateTime->minutes += minutesToAdd;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	685a      	ldr	r2, [r3, #4]
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	441a      	add	r2, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	605a      	str	r2, [r3, #4]
	dateTimeNormalize(dateTime);
 80007b4:	6878      	ldr	r0, [r7, #4]
 80007b6:	f7ff ff07 	bl	80005c8 <dateTimeNormalize>
 80007ba:	e000      	b.n	80007be <dateTimeAddMinutes+0x26>
	if(dateTime == NULL) return;
 80007bc:	bf00      	nop
}
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <decimalToBCD>:
 * Convert a decimal number into its BCD representation
 *
 * @param Desired decimal number between 0 and 99.
 * @return BCD representation (4 bits per digit, 4 MSBs are tens, the other 4 bits are units).
 */
static uint8_t decimalToBCD(uint8_t decimal){
 80007c4:	b480      	push	{r7}
 80007c6:	b083      	sub	sp, #12
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	4603      	mov	r3, r0
 80007cc:	71fb      	strb	r3, [r7, #7]
	return ((decimal / 10) << 4) | (decimal % 10);
 80007ce:	79fb      	ldrb	r3, [r7, #7]
 80007d0:	4a0d      	ldr	r2, [pc, #52]	@ (8000808 <decimalToBCD+0x44>)
 80007d2:	fba2 2303 	umull	r2, r3, r2, r3
 80007d6:	08db      	lsrs	r3, r3, #3
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	b25b      	sxtb	r3, r3
 80007dc:	011b      	lsls	r3, r3, #4
 80007de:	b258      	sxtb	r0, r3
 80007e0:	79fa      	ldrb	r2, [r7, #7]
 80007e2:	4b09      	ldr	r3, [pc, #36]	@ (8000808 <decimalToBCD+0x44>)
 80007e4:	fba3 1302 	umull	r1, r3, r3, r2
 80007e8:	08d9      	lsrs	r1, r3, #3
 80007ea:	460b      	mov	r3, r1
 80007ec:	009b      	lsls	r3, r3, #2
 80007ee:	440b      	add	r3, r1
 80007f0:	005b      	lsls	r3, r3, #1
 80007f2:	1ad3      	subs	r3, r2, r3
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	b25b      	sxtb	r3, r3
 80007f8:	4303      	orrs	r3, r0
 80007fa:	b25b      	sxtb	r3, r3
 80007fc:	b2db      	uxtb	r3, r3
}
 80007fe:	4618      	mov	r0, r3
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr
 8000808:	cccccccd 	.word	0xcccccccd

0800080c <BCDToDecimal>:
 * Convert a BCD representation into its corresponding decimal number.
 *
 * @param BCD representation (4 bits per digit, 4 MSBs are tens, the other 4 bits are units).
 * @return Resulting decimal number between 0 and 99.
 */
static uint8_t BCDToDecimal(uint8_t bcd){
 800080c:	b480      	push	{r7}
 800080e:	b083      	sub	sp, #12
 8000810:	af00      	add	r7, sp, #0
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
	return ((bcd >> 4) * 10) + (bcd & 0x0F);
 8000816:	79fb      	ldrb	r3, [r7, #7]
 8000818:	091b      	lsrs	r3, r3, #4
 800081a:	b2db      	uxtb	r3, r3
 800081c:	461a      	mov	r2, r3
 800081e:	0092      	lsls	r2, r2, #2
 8000820:	4413      	add	r3, r2
 8000822:	005b      	lsls	r3, r3, #1
 8000824:	b2da      	uxtb	r2, r3
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	f003 030f 	and.w	r3, r3, #15
 800082c:	b2db      	uxtb	r3, r3
 800082e:	4413      	add	r3, r2
 8000830:	b2db      	uxtb	r3, r3
}
 8000832:	4618      	mov	r0, r3
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	bc80      	pop	{r7}
 800083a:	4770      	bx	lr

0800083c <rtcWriteRegisters>:


static tRtcStatus rtcWriteRegisters(uint16_t slaveAddress, uint16_t registerAddress, uint8_t *dataToWrite, uint16_t dataSize){
 800083c:	b580      	push	{r7, lr}
 800083e:	b08a      	sub	sp, #40	@ 0x28
 8000840:	af04      	add	r7, sp, #16
 8000842:	60ba      	str	r2, [r7, #8]
 8000844:	461a      	mov	r2, r3
 8000846:	4603      	mov	r3, r0
 8000848:	81fb      	strh	r3, [r7, #14]
 800084a:	460b      	mov	r3, r1
 800084c:	81bb      	strh	r3, [r7, #12]
 800084e:	4613      	mov	r3, r2
 8000850:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint8_t retries = 0;
 8000852:	2300      	movs	r3, #0
 8000854:	75fb      	strb	r3, [r7, #23]

	//Try to write on RTC registers
	do{
		status = HAL_I2C_Mem_Write(&hi2c1, slaveAddress, registerAddress, I2C_MEMADD_SIZE_8BIT, dataToWrite, dataSize, HAL_MAX_DELAY);
 8000856:	89ba      	ldrh	r2, [r7, #12]
 8000858:	89f9      	ldrh	r1, [r7, #14]
 800085a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800085e:	9302      	str	r3, [sp, #8]
 8000860:	88fb      	ldrh	r3, [r7, #6]
 8000862:	9301      	str	r3, [sp, #4]
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	2301      	movs	r3, #1
 800086a:	480c      	ldr	r0, [pc, #48]	@ (800089c <rtcWriteRegisters+0x60>)
 800086c:	f000 ff14 	bl	8001698 <HAL_I2C_Mem_Write>
 8000870:	4603      	mov	r3, r0
 8000872:	75bb      	strb	r3, [r7, #22]
		retries++;
 8000874:	7dfb      	ldrb	r3, [r7, #23]
 8000876:	3301      	adds	r3, #1
 8000878:	75fb      	strb	r3, [r7, #23]
	}while(status != HAL_OK && retries < RTC_MAX_RETRIES);
 800087a:	7dbb      	ldrb	r3, [r7, #22]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d002      	beq.n	8000886 <rtcWriteRegisters+0x4a>
 8000880:	7dfb      	ldrb	r3, [r7, #23]
 8000882:	2b09      	cmp	r3, #9
 8000884:	d9e7      	bls.n	8000856 <rtcWriteRegisters+0x1a>

	//Return writing status
	return (status == HAL_OK) ? RTC_OK : RTC_ERROR_WRITE;
 8000886:	7dbb      	ldrb	r3, [r7, #22]
 8000888:	2b00      	cmp	r3, #0
 800088a:	bf14      	ite	ne
 800088c:	2301      	movne	r3, #1
 800088e:	2300      	moveq	r3, #0
 8000890:	b2db      	uxtb	r3, r3
}
 8000892:	4618      	mov	r0, r3
 8000894:	3718      	adds	r7, #24
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	20000028 	.word	0x20000028

080008a0 <rtcReadRegisters>:

static tRtcStatus rtcReadRegisters(uint16_t slaveAddress, uint16_t registerAddress, uint8_t *dataToRead, uint16_t dataSize){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08a      	sub	sp, #40	@ 0x28
 80008a4:	af04      	add	r7, sp, #16
 80008a6:	60ba      	str	r2, [r7, #8]
 80008a8:	461a      	mov	r2, r3
 80008aa:	4603      	mov	r3, r0
 80008ac:	81fb      	strh	r3, [r7, #14]
 80008ae:	460b      	mov	r3, r1
 80008b0:	81bb      	strh	r3, [r7, #12]
 80008b2:	4613      	mov	r3, r2
 80008b4:	80fb      	strh	r3, [r7, #6]
	HAL_StatusTypeDef status;
	uint8_t retries = 0;
 80008b6:	2300      	movs	r3, #0
 80008b8:	75fb      	strb	r3, [r7, #23]
	do{
		status = HAL_I2C_Mem_Read(&hi2c1, slaveAddress, registerAddress, I2C_MEMADD_SIZE_8BIT, dataToRead, dataSize, HAL_MAX_DELAY);
 80008ba:	89ba      	ldrh	r2, [r7, #12]
 80008bc:	89f9      	ldrh	r1, [r7, #14]
 80008be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008c2:	9302      	str	r3, [sp, #8]
 80008c4:	88fb      	ldrh	r3, [r7, #6]
 80008c6:	9301      	str	r3, [sp, #4]
 80008c8:	68bb      	ldr	r3, [r7, #8]
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2301      	movs	r3, #1
 80008ce:	480c      	ldr	r0, [pc, #48]	@ (8000900 <rtcReadRegisters+0x60>)
 80008d0:	f000 ffdc 	bl	800188c <HAL_I2C_Mem_Read>
 80008d4:	4603      	mov	r3, r0
 80008d6:	75bb      	strb	r3, [r7, #22]
		retries++;
 80008d8:	7dfb      	ldrb	r3, [r7, #23]
 80008da:	3301      	adds	r3, #1
 80008dc:	75fb      	strb	r3, [r7, #23]
	}while(status != HAL_OK && retries < RTC_MAX_RETRIES);
 80008de:	7dbb      	ldrb	r3, [r7, #22]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d002      	beq.n	80008ea <rtcReadRegisters+0x4a>
 80008e4:	7dfb      	ldrb	r3, [r7, #23]
 80008e6:	2b09      	cmp	r3, #9
 80008e8:	d9e7      	bls.n	80008ba <rtcReadRegisters+0x1a>

	return (status == HAL_OK) ? RTC_OK : RTC_ERROR_READ;
 80008ea:	7dbb      	ldrb	r3, [r7, #22]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d101      	bne.n	80008f4 <rtcReadRegisters+0x54>
 80008f0:	2300      	movs	r3, #0
 80008f2:	e000      	b.n	80008f6 <rtcReadRegisters+0x56>
 80008f4:	2302      	movs	r3, #2
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3718      	adds	r7, #24
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000028 	.word	0x20000028

08000904 <rtcReadDateTime>:
tRtcStatus rtcInit(void){
	tRtcStatus status = RTC_OK;
	return status;
}

tRtcStatus rtcReadDateTime(sRtcDateTime *dateTime){
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]
	tRtcStatus status;
	uint8_t rtcRegisters[RTC_DATETIME_REGISTERS];

	//Read date and time from DS3231 memory
	status = rtcReadRegisters(RTC_SLAVE_ADDRESS, RTC_DATETIME_BASE_ADDRESS, rtcRegisters, RTC_DATETIME_REGISTERS);
 800090c:	f107 0208 	add.w	r2, r7, #8
 8000910:	2307      	movs	r3, #7
 8000912:	2100      	movs	r1, #0
 8000914:	20d0      	movs	r0, #208	@ 0xd0
 8000916:	f7ff ffc3 	bl	80008a0 <rtcReadRegisters>
 800091a:	4603      	mov	r3, r0
 800091c:	73fb      	strb	r3, [r7, #15]


	if(status == RTC_OK){
 800091e:	7bfb      	ldrb	r3, [r7, #15]
 8000920:	2b00      	cmp	r3, #0
 8000922:	d13d      	bne.n	80009a0 <rtcReadDateTime+0x9c>
		//Decode and pass time data into the structure
		dateTime->seconds = BCDToDecimal(rtcRegisters[0]);
 8000924:	7a3b      	ldrb	r3, [r7, #8]
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff ff70 	bl	800080c <BCDToDecimal>
 800092c:	4603      	mov	r3, r0
 800092e:	461a      	mov	r2, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	701a      	strb	r2, [r3, #0]
		dateTime->minutes = BCDToDecimal(rtcRegisters[1]);
 8000934:	7a7b      	ldrb	r3, [r7, #9]
 8000936:	4618      	mov	r0, r3
 8000938:	f7ff ff68 	bl	800080c <BCDToDecimal>
 800093c:	4603      	mov	r3, r0
 800093e:	461a      	mov	r2, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	705a      	strb	r2, [r3, #1]
		dateTime->hours   = BCDToDecimal(rtcRegisters[2] & 0x3F);
 8000944:	7abb      	ldrb	r3, [r7, #10]
 8000946:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800094a:	b2db      	uxtb	r3, r3
 800094c:	4618      	mov	r0, r3
 800094e:	f7ff ff5d 	bl	800080c <BCDToDecimal>
 8000952:	4603      	mov	r3, r0
 8000954:	461a      	mov	r2, r3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	709a      	strb	r2, [r3, #2]

		//Decode and pass date data into the structure
		dateTime->dayOfWeek = BCDToDecimal(rtcRegisters[3]);
 800095a:	7afb      	ldrb	r3, [r7, #11]
 800095c:	4618      	mov	r0, r3
 800095e:	f7ff ff55 	bl	800080c <BCDToDecimal>
 8000962:	4603      	mov	r3, r0
 8000964:	461a      	mov	r2, r3
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	70da      	strb	r2, [r3, #3]
		dateTime->date      = BCDToDecimal(rtcRegisters[4]);
 800096a:	7b3b      	ldrb	r3, [r7, #12]
 800096c:	4618      	mov	r0, r3
 800096e:	f7ff ff4d 	bl	800080c <BCDToDecimal>
 8000972:	4603      	mov	r3, r0
 8000974:	461a      	mov	r2, r3
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	711a      	strb	r2, [r3, #4]
		dateTime->month     = BCDToDecimal(rtcRegisters[5] & 0x1F);
 800097a:	7b7b      	ldrb	r3, [r7, #13]
 800097c:	f003 031f 	and.w	r3, r3, #31
 8000980:	b2db      	uxtb	r3, r3
 8000982:	4618      	mov	r0, r3
 8000984:	f7ff ff42 	bl	800080c <BCDToDecimal>
 8000988:	4603      	mov	r3, r0
 800098a:	461a      	mov	r2, r3
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	715a      	strb	r2, [r3, #5]
		dateTime->year      = BCDToDecimal(rtcRegisters[6]);
 8000990:	7bbb      	ldrb	r3, [r7, #14]
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff ff3a 	bl	800080c <BCDToDecimal>
 8000998:	4603      	mov	r3, r0
 800099a:	461a      	mov	r2, r3
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	719a      	strb	r2, [r3, #6]
	}

	//Return status of the operation
	return status;
 80009a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	3710      	adds	r7, #16
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}

080009aa <rtcWriteDateTime>:

tRtcStatus rtcWriteDateTime(const sRtcDateTime *dateTime){
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b084      	sub	sp, #16
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	6078      	str	r0, [r7, #4]
	tRtcStatus status;
	uint8_t rtcRegisters[RTC_DATETIME_REGISTERS];

	//Encode time data in BCD format
	rtcRegisters[0] = decimalToBCD(dateTime->seconds);
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	4618      	mov	r0, r3
 80009b8:	f7ff ff04 	bl	80007c4 <decimalToBCD>
 80009bc:	4603      	mov	r3, r0
 80009be:	723b      	strb	r3, [r7, #8]
	rtcRegisters[1] = decimalToBCD(dateTime->minutes);
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	785b      	ldrb	r3, [r3, #1]
 80009c4:	4618      	mov	r0, r3
 80009c6:	f7ff fefd 	bl	80007c4 <decimalToBCD>
 80009ca:	4603      	mov	r3, r0
 80009cc:	727b      	strb	r3, [r7, #9]
	rtcRegisters[2] = decimalToBCD(dateTime->hours) & 0x3F;			//Ensure that 12/~24 bit is low to select 24 hours format
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	789b      	ldrb	r3, [r3, #2]
 80009d2:	4618      	mov	r0, r3
 80009d4:	f7ff fef6 	bl	80007c4 <decimalToBCD>
 80009d8:	4603      	mov	r3, r0
 80009da:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	72bb      	strb	r3, [r7, #10]

	//Encode date data
	rtcRegisters[3] = decimalToBCD(dateTime->dayOfWeek);
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	78db      	ldrb	r3, [r3, #3]
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff feec 	bl	80007c4 <decimalToBCD>
 80009ec:	4603      	mov	r3, r0
 80009ee:	72fb      	strb	r3, [r7, #11]
	rtcRegisters[4] = decimalToBCD(dateTime->date);
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	791b      	ldrb	r3, [r3, #4]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fee5 	bl	80007c4 <decimalToBCD>
 80009fa:	4603      	mov	r3, r0
 80009fc:	733b      	strb	r3, [r7, #12]
	rtcRegisters[5] = decimalToBCD(dateTime->month);
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	795b      	ldrb	r3, [r3, #5]
 8000a02:	4618      	mov	r0, r3
 8000a04:	f7ff fede 	bl	80007c4 <decimalToBCD>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	737b      	strb	r3, [r7, #13]
	rtcRegisters[6] = decimalToBCD(dateTime->year);
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	799b      	ldrb	r3, [r3, #6]
 8000a10:	4618      	mov	r0, r3
 8000a12:	f7ff fed7 	bl	80007c4 <decimalToBCD>
 8000a16:	4603      	mov	r3, r0
 8000a18:	73bb      	strb	r3, [r7, #14]

	//Write date and time on DS3231's memory
	status = rtcWriteRegisters(RTC_SLAVE_ADDRESS, RTC_DATETIME_BASE_ADDRESS, rtcRegisters, RTC_DATETIME_REGISTERS);
 8000a1a:	f107 0208 	add.w	r2, r7, #8
 8000a1e:	2307      	movs	r3, #7
 8000a20:	2100      	movs	r1, #0
 8000a22:	20d0      	movs	r0, #208	@ 0xd0
 8000a24:	f7ff ff0a 	bl	800083c <rtcWriteRegisters>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	73fb      	strb	r3, [r7, #15]

	//Return status of the operation
	return status;
 8000a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
	...

08000a38 <rtcSetAlarm2>:

tRtcStatus rtcSetAlarm2(tRtcAlarm2Mode mode, uint8_t minutes, uint8_t hours, uint8_t dyDt){
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	4604      	mov	r4, r0
 8000a40:	4608      	mov	r0, r1
 8000a42:	4611      	mov	r1, r2
 8000a44:	461a      	mov	r2, r3
 8000a46:	4623      	mov	r3, r4
 8000a48:	71fb      	strb	r3, [r7, #7]
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71bb      	strb	r3, [r7, #6]
 8000a4e:	460b      	mov	r3, r1
 8000a50:	717b      	strb	r3, [r7, #5]
 8000a52:	4613      	mov	r3, r2
 8000a54:	713b      	strb	r3, [r7, #4]
	tRtcStatus status;
	uint8_t alarm2Registers[RTC_ALARM2_REGISTERS] = {RTC_SET_ALARM2_MASK_BIT, RTC_SET_ALARM2_MASK_BIT, RTC_SET_ALARM2_MASK_BIT};
 8000a56:	4a4a      	ldr	r2, [pc, #296]	@ (8000b80 <rtcSetAlarm2+0x148>)
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	6812      	ldr	r2, [r2, #0]
 8000a5e:	4611      	mov	r1, r2
 8000a60:	8019      	strh	r1, [r3, #0]
 8000a62:	3302      	adds	r3, #2
 8000a64:	0c12      	lsrs	r2, r2, #16
 8000a66:	701a      	strb	r2, [r3, #0]
//	uint8_t checkRegisters[RTC_ALARM2_REGISTERS] = {0};
	//Decide which registers should be masked
	switch(mode){
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	2b04      	cmp	r3, #4
 8000a6c:	d83b      	bhi.n	8000ae6 <rtcSetAlarm2+0xae>
 8000a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8000a74 <rtcSetAlarm2+0x3c>)
 8000a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a74:	08000ae7 	.word	0x08000ae7
 8000a78:	08000a89 	.word	0x08000a89
 8000a7c:	08000a95 	.word	0x08000a95
 8000a80:	08000aab 	.word	0x08000aab
 8000a84:	08000aab 	.word	0x08000aab
	case RTC_ALARM2_ONCE_PER_MINUTE:
		//set by default
		break;
	case RTC_ALARM2_MINUTES_MATCH:
		//Unmask alarm2 mask bits
		alarm2Registers[0] &= RTC_CLEAR_ALARM2_MASK_BIT;
 8000a88:	7b3b      	ldrb	r3, [r7, #12]
 8000a8a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	733b      	strb	r3, [r7, #12]
		break;
 8000a92:	e029      	b.n	8000ae8 <rtcSetAlarm2+0xb0>
	case RTC_ALARM2_MINUTES_HOURS_MATCH:
		//Unmask alarm2 mask bits
		alarm2Registers[0] &= RTC_CLEAR_ALARM2_MASK_BIT;
 8000a94:	7b3b      	ldrb	r3, [r7, #12]
 8000a96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	733b      	strb	r3, [r7, #12]
		alarm2Registers[1] &= RTC_CLEAR_ALARM2_MASK_BIT;
 8000a9e:	7b7b      	ldrb	r3, [r7, #13]
 8000aa0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000aa4:	b2db      	uxtb	r3, r3
 8000aa6:	737b      	strb	r3, [r7, #13]
		break;
 8000aa8:	e01e      	b.n	8000ae8 <rtcSetAlarm2+0xb0>
	case RTC_ALARM2_MINUTES_HOURS_DAY_MATCH:
	case RTC_ALARM2_MINUTES_HOURS_DATE_MATCH:
		//Unmask alarm2 mask bits
		alarm2Registers[0] &= RTC_CLEAR_ALARM2_MASK_BIT;
 8000aaa:	7b3b      	ldrb	r3, [r7, #12]
 8000aac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ab0:	b2db      	uxtb	r3, r3
 8000ab2:	733b      	strb	r3, [r7, #12]
		alarm2Registers[1] &= RTC_CLEAR_ALARM2_MASK_BIT;
 8000ab4:	7b7b      	ldrb	r3, [r7, #13]
 8000ab6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000aba:	b2db      	uxtb	r3, r3
 8000abc:	737b      	strb	r3, [r7, #13]
		alarm2Registers[2] &= RTC_CLEAR_ALARM2_MASK_BIT;
 8000abe:	7bbb      	ldrb	r3, [r7, #14]
 8000ac0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	73bb      	strb	r3, [r7, #14]

		//Select day or date
		if(mode == RTC_ALARM2_MINUTES_HOURS_DATE_MATCH){
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	2b03      	cmp	r3, #3
 8000acc:	d105      	bne.n	8000ada <rtcSetAlarm2+0xa2>
			alarm2Registers[2] &= RTC_CLEAR_DYDT_BIT;
 8000ace:	7bbb      	ldrb	r3, [r7, #14]
 8000ad0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	73bb      	strb	r3, [r7, #14]
		}
		else{
			alarm2Registers[2] |= RTC_SET_DYDT_BIT;
		}
		break;
 8000ad8:	e006      	b.n	8000ae8 <rtcSetAlarm2+0xb0>
			alarm2Registers[2] |= RTC_SET_DYDT_BIT;
 8000ada:	7bbb      	ldrb	r3, [r7, #14]
 8000adc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ae0:	b2db      	uxtb	r3, r3
 8000ae2:	73bb      	strb	r3, [r7, #14]
		break;
 8000ae4:	e000      	b.n	8000ae8 <rtcSetAlarm2+0xb0>
	default:
		break;
 8000ae6:	bf00      	nop
	}

	//Select 24 hours format
	alarm2Registers[1] &= RTC_SET_24HOURS_FORMAT;
 8000ae8:	7b7b      	ldrb	r3, [r7, #13]
 8000aea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000aee:	b2db      	uxtb	r3, r3
 8000af0:	737b      	strb	r3, [r7, #13]

	//Encode alarm 2 time and date vaues into bcd format
	alarm2Registers[0] &= 0x80;								//Clear minutes bits
 8000af2:	7b3b      	ldrb	r3, [r7, #12]
 8000af4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	733b      	strb	r3, [r7, #12]
	alarm2Registers[1] &= 0xC0;								//Clear hours bits
 8000afc:	7b7b      	ldrb	r3, [r7, #13]
 8000afe:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	737b      	strb	r3, [r7, #13]
	alarm2Registers[2] &= 0xC0;								//Clear date/day bits
 8000b06:	7bbb      	ldrb	r3, [r7, #14]
 8000b08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8000b0c:	b2db      	uxtb	r3, r3
 8000b0e:	73bb      	strb	r3, [r7, #14]
	alarm2Registers[0] |= (decimalToBCD(minutes) & 0x7F);	//Ensure the BCD conversion has only the requiered number of bits
 8000b10:	79bb      	ldrb	r3, [r7, #6]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fe56 	bl	80007c4 <decimalToBCD>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000b1e:	7b3a      	ldrb	r2, [r7, #12]
 8000b20:	b252      	sxtb	r2, r2
 8000b22:	b25b      	sxtb	r3, r3
 8000b24:	4313      	orrs	r3, r2
 8000b26:	b25b      	sxtb	r3, r3
 8000b28:	b2db      	uxtb	r3, r3
 8000b2a:	733b      	strb	r3, [r7, #12]
	alarm2Registers[1] |= (decimalToBCD(hours)   & 0x3F);
 8000b2c:	797b      	ldrb	r3, [r7, #5]
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f7ff fe48 	bl	80007c4 <decimalToBCD>
 8000b34:	4603      	mov	r3, r0
 8000b36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000b3a:	7b7a      	ldrb	r2, [r7, #13]
 8000b3c:	b252      	sxtb	r2, r2
 8000b3e:	b25b      	sxtb	r3, r3
 8000b40:	4313      	orrs	r3, r2
 8000b42:	b25b      	sxtb	r3, r3
 8000b44:	b2db      	uxtb	r3, r3
 8000b46:	737b      	strb	r3, [r7, #13]
	alarm2Registers[2] |= (decimalToBCD(dyDt)    & 0x3F);
 8000b48:	793b      	ldrb	r3, [r7, #4]
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff fe3a 	bl	80007c4 <decimalToBCD>
 8000b50:	4603      	mov	r3, r0
 8000b52:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000b56:	7bba      	ldrb	r2, [r7, #14]
 8000b58:	b252      	sxtb	r2, r2
 8000b5a:	b25b      	sxtb	r3, r3
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	b25b      	sxtb	r3, r3
 8000b60:	b2db      	uxtb	r3, r3
 8000b62:	73bb      	strb	r3, [r7, #14]

	//Write alarm2 registers
	status = rtcWriteRegisters(RTC_SLAVE_ADDRESS, RTC_ALARM2_BASE_ADDRESS, alarm2Registers, RTC_ALARM2_REGISTERS);
 8000b64:	f107 020c 	add.w	r2, r7, #12
 8000b68:	2303      	movs	r3, #3
 8000b6a:	210b      	movs	r1, #11
 8000b6c:	20d0      	movs	r0, #208	@ 0xd0
 8000b6e:	f7ff fe65 	bl	800083c <rtcWriteRegisters>
 8000b72:	4603      	mov	r3, r0
 8000b74:	73fb      	strb	r3, [r7, #15]

//	//Read alarm2 registers
//	status = rtcReadRegisters(RTC_SLAVE_ADDRESS, RTC_ALARM2_BASE_ADDRESS, checkRegisters, RTC_ALARM2_REGISTERS);
	//Return status of operation
	return status;
 8000b76:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd90      	pop	{r4, r7, pc}
 8000b80:	08002d90 	.word	0x08002d90

08000b84 <rtcSetAlarm2Interrupt>:


tRtcStatus rtcSetAlarm2Interrupt(bool enable){
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
	tRtcStatus status;
	uint8_t controlRegister;
//	uint8_t checkRegister;

	//Read the control register
	status = rtcReadRegisters(RTC_SLAVE_ADDRESS, RTC_CONTROL_REGISTER_ADDRESS, &controlRegister, 1);
 8000b8e:	f107 020e 	add.w	r2, r7, #14
 8000b92:	2301      	movs	r3, #1
 8000b94:	210e      	movs	r1, #14
 8000b96:	20d0      	movs	r0, #208	@ 0xd0
 8000b98:	f7ff fe82 	bl	80008a0 <rtcReadRegisters>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	73fb      	strb	r3, [r7, #15]
	if(status == RTC_OK){
 8000ba0:	7bfb      	ldrb	r3, [r7, #15]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d116      	bne.n	8000bd4 <rtcSetAlarm2Interrupt+0x50>
		//Check if interrupt should be enabled or disabled
		if(enable){
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d005      	beq.n	8000bb8 <rtcSetAlarm2Interrupt+0x34>
			controlRegister |= RTC_ENABLE_ALARM2_INTERRUPT | RTC_ENABLE_INT_OUTPUT;
 8000bac:	7bbb      	ldrb	r3, [r7, #14]
 8000bae:	f043 0306 	orr.w	r3, r3, #6
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	73bb      	strb	r3, [r7, #14]
 8000bb6:	e004      	b.n	8000bc2 <rtcSetAlarm2Interrupt+0x3e>
		}
		else{
			controlRegister &= ~(RTC_ENABLE_ALARM2_INTERRUPT | RTC_ENABLE_INT_OUTPUT);
 8000bb8:	7bbb      	ldrb	r3, [r7, #14]
 8000bba:	f023 0306 	bic.w	r3, r3, #6
 8000bbe:	b2db      	uxtb	r3, r3
 8000bc0:	73bb      	strb	r3, [r7, #14]
		}

		//Write the control register
		status = rtcWriteRegisters(RTC_SLAVE_ADDRESS, RTC_CONTROL_REGISTER_ADDRESS, &controlRegister, 1);
 8000bc2:	f107 020e 	add.w	r2, r7, #14
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	210e      	movs	r1, #14
 8000bca:	20d0      	movs	r0, #208	@ 0xd0
 8000bcc:	f7ff fe36 	bl	800083c <rtcWriteRegisters>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	73fb      	strb	r3, [r7, #15]
//		//Read control register
//		status = rtcReadRegisters(RTC_SLAVE_ADDRESS, RTC_CONTROL_REGISTER_ADDRESS, &checkRegister, 1);
	}

	//Return status of the operation
	return status;
 8000bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3710      	adds	r7, #16
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <rtcClearAlarm2Flag>:




tRtcStatus rtcClearAlarm2Flag(void){
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b082      	sub	sp, #8
 8000be2:	af00      	add	r7, sp, #0
	tRtcStatus status;
	uint8_t statusRegister;
//	uint8_t checkRegister;

	//Read the status register
	status = rtcReadRegisters(RTC_SLAVE_ADDRESS, RTC_STATUS_REGISTER_ADDRESS, &statusRegister, 1);
 8000be4:	1dba      	adds	r2, r7, #6
 8000be6:	2301      	movs	r3, #1
 8000be8:	210f      	movs	r1, #15
 8000bea:	20d0      	movs	r0, #208	@ 0xd0
 8000bec:	f7ff fe58 	bl	80008a0 <rtcReadRegisters>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	71fb      	strb	r3, [r7, #7]
	if(status == RTC_OK){
 8000bf4:	79fb      	ldrb	r3, [r7, #7]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d10c      	bne.n	8000c14 <rtcClearAlarm2Flag+0x36>
		//Clear the A2F bit
		statusRegister &= RTC_CLEAR_ALARM2_INTERRUPT;
 8000bfa:	79bb      	ldrb	r3, [r7, #6]
 8000bfc:	f023 0302 	bic.w	r3, r3, #2
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	71bb      	strb	r3, [r7, #6]

		//Write the status register bit 1 to clear the A2F
		status = rtcWriteRegisters(RTC_SLAVE_ADDRESS, RTC_STATUS_REGISTER_ADDRESS, &statusRegister, 1);
 8000c04:	1dba      	adds	r2, r7, #6
 8000c06:	2301      	movs	r3, #1
 8000c08:	210f      	movs	r1, #15
 8000c0a:	20d0      	movs	r0, #208	@ 0xd0
 8000c0c:	f7ff fe16 	bl	800083c <rtcWriteRegisters>
 8000c10:	4603      	mov	r3, r0
 8000c12:	71fb      	strb	r3, [r7, #7]

//		status = rtcReadRegisters(RTC_SLAVE_ADDRESS, RTC_STATUS_REGISTER_ADDRESS, &checkRegister, 1);
	}
	return status;
 8000c14:	79fb      	ldrb	r3, [r7, #7]
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}

08000c1e <rtcToDateTimeFormat>:
#include "rtc_manager.h"

static void rtcToDateTimeFormat(sRtcDateTime *rtcDateTime, sDateTime *dateTime){
 8000c1e:	b480      	push	{r7}
 8000c20:	b083      	sub	sp, #12
 8000c22:	af00      	add	r7, sp, #0
 8000c24:	6078      	str	r0, [r7, #4]
 8000c26:	6039      	str	r1, [r7, #0]
	dateTime->seconds   = (uint32_t) (rtcDateTime->seconds);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	461a      	mov	r2, r3
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	601a      	str	r2, [r3, #0]
	dateTime->minutes   = (uint32_t) (rtcDateTime->minutes);
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	785b      	ldrb	r3, [r3, #1]
 8000c36:	461a      	mov	r2, r3
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	605a      	str	r2, [r3, #4]
	dateTime->hours     = (uint32_t) (rtcDateTime->hours);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	789b      	ldrb	r3, [r3, #2]
 8000c40:	461a      	mov	r2, r3
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	609a      	str	r2, [r3, #8]
	dateTime->dayOfWeek = (uint32_t) (rtcDateTime->dayOfWeek);
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	78db      	ldrb	r3, [r3, #3]
 8000c4a:	461a      	mov	r2, r3
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	60da      	str	r2, [r3, #12]
	dateTime->date      = (uint32_t) (rtcDateTime->date);
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	791b      	ldrb	r3, [r3, #4]
 8000c54:	461a      	mov	r2, r3
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	611a      	str	r2, [r3, #16]
	dateTime->month     = (uint32_t) (rtcDateTime->month);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	795b      	ldrb	r3, [r3, #5]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	615a      	str	r2, [r3, #20]
	dateTime->year      = (uint32_t) (rtcDateTime->year);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	799b      	ldrb	r3, [r3, #6]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	619a      	str	r2, [r3, #24]
	return;
 8000c6e:	bf00      	nop
}
 8000c70:	370c      	adds	r7, #12
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bc80      	pop	{r7}
 8000c76:	4770      	bx	lr

08000c78 <setDateTime>:


void setDateTime(sDateTime *dateTime){
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
	if(dateTimeisValid(dateTime) == DATETIME_OK){
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff fd45 	bl	8000710 <dateTimeisValid>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d121      	bne.n	8000cd0 <setDateTime+0x58>
		//Convert to the data type the rtc can handle
		const sRtcDateTime rtcDateTime = {.seconds   = (uint8_t) (dateTime->seconds),
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	723b      	strb	r3, [r7, #8]
										  .minutes   = (uint8_t) (dateTime->minutes),
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	b2db      	uxtb	r3, r3
		const sRtcDateTime rtcDateTime = {.seconds   = (uint8_t) (dateTime->seconds),
 8000c9a:	727b      	strb	r3, [r7, #9]
										  .hours     = (uint8_t) (dateTime->hours),
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	b2db      	uxtb	r3, r3
		const sRtcDateTime rtcDateTime = {.seconds   = (uint8_t) (dateTime->seconds),
 8000ca2:	72bb      	strb	r3, [r7, #10]
										  .dayOfWeek = (uint8_t) (dateTime->dayOfWeek),
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	b2db      	uxtb	r3, r3
		const sRtcDateTime rtcDateTime = {.seconds   = (uint8_t) (dateTime->seconds),
 8000caa:	72fb      	strb	r3, [r7, #11]
										  .date      = (uint8_t) (dateTime->date),
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	691b      	ldr	r3, [r3, #16]
 8000cb0:	b2db      	uxtb	r3, r3
		const sRtcDateTime rtcDateTime = {.seconds   = (uint8_t) (dateTime->seconds),
 8000cb2:	733b      	strb	r3, [r7, #12]
										  .month     = (uint8_t) (dateTime->month),
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	695b      	ldr	r3, [r3, #20]
 8000cb8:	b2db      	uxtb	r3, r3
		const sRtcDateTime rtcDateTime = {.seconds   = (uint8_t) (dateTime->seconds),
 8000cba:	737b      	strb	r3, [r7, #13]
										  .year      = (uint8_t) (dateTime->year)		};
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	b2db      	uxtb	r3, r3
		const sRtcDateTime rtcDateTime = {.seconds   = (uint8_t) (dateTime->seconds),
 8000cc2:	73bb      	strb	r3, [r7, #14]

		//Write date and time information into the rtc
		rtcWriteDateTime(&rtcDateTime);
 8000cc4:	f107 0308 	add.w	r3, r7, #8
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f7ff fe6e 	bl	80009aa <rtcWriteDateTime>
	}
	return;
 8000cce:	bf00      	nop
 8000cd0:	bf00      	nop
}
 8000cd2:	3710      	adds	r7, #16
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <readDateTime>:

void readDateTime(sDateTime *dateTime){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
	sRtcDateTime rtcDateTime = {0};
 8000ce0:	f107 0308 	add.w	r3, r7, #8
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	601a      	str	r2, [r3, #0]
 8000ce8:	f8c3 2003 	str.w	r2, [r3, #3]

	//Read date and time from the RTC
	rtcReadDateTime(&rtcDateTime);
 8000cec:	f107 0308 	add.w	r3, r7, #8
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff fe07 	bl	8000904 <rtcReadDateTime>

	//Cast values to uint32_t
	rtcToDateTimeFormat(&rtcDateTime, dateTime);
 8000cf6:	f107 0308 	add.w	r3, r7, #8
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff8e 	bl	8000c1e <rtcToDateTimeFormat>
	return;
 8000d02:	bf00      	nop
}
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <enableAlarmInterrupt>:

void enableAlarmInterrupt(void){
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	af00      	add	r7, sp, #0
	rtcSetAlarm2Interrupt(true);
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f7ff ff38 	bl	8000b84 <rtcSetAlarm2Interrupt>
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <clearAlarmInterruptFlag>:

void disableAlarmInterrupt(void){
	rtcSetAlarm2Interrupt(false);
}

void clearAlarmInterruptFlag(void){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
	rtcClearAlarm2Flag();
 8000d1c:	f7ff ff5f 	bl	8000bde <rtcClearAlarm2Flag>
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <SetNextMinutesAlarm>:

void SetNextMinutesAlarm(uint32_t minutesToAdd){
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08c      	sub	sp, #48	@ 0x30
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
	sDateTime dateTime = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
 8000d3c:	615a      	str	r2, [r3, #20]
 8000d3e:	619a      	str	r2, [r3, #24]

	//Read current datetime
	readDateTime(&dateTime);
 8000d40:	f107 0314 	add.w	r3, r7, #20
 8000d44:	4618      	mov	r0, r3
 8000d46:	f7ff ffc7 	bl	8000cd8 <readDateTime>

	//Add minutes
	dateTimeAddMinutes(&dateTime, minutesToAdd);
 8000d4a:	f107 0314 	add.w	r3, r7, #20
 8000d4e:	6879      	ldr	r1, [r7, #4]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff fd21 	bl	8000798 <dateTimeAddMinutes>

	//Convert again to rtc structure
	const sRtcDateTime rtcDateTime = {.seconds   = (uint8_t) (dateTime.seconds),
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	733b      	strb	r3, [r7, #12]
									  	   .minutes   = (uint8_t) (dateTime.minutes),
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	b2db      	uxtb	r3, r3
	const sRtcDateTime rtcDateTime = {.seconds   = (uint8_t) (dateTime.seconds),
 8000d60:	737b      	strb	r3, [r7, #13]
										   .hours     = (uint8_t) (dateTime.hours),
 8000d62:	69fb      	ldr	r3, [r7, #28]
 8000d64:	b2db      	uxtb	r3, r3
	const sRtcDateTime rtcDateTime = {.seconds   = (uint8_t) (dateTime.seconds),
 8000d66:	73bb      	strb	r3, [r7, #14]
										   .dayOfWeek = (uint8_t) (dateTime.dayOfWeek),
 8000d68:	6a3b      	ldr	r3, [r7, #32]
 8000d6a:	b2db      	uxtb	r3, r3
	const sRtcDateTime rtcDateTime = {.seconds   = (uint8_t) (dateTime.seconds),
 8000d6c:	73fb      	strb	r3, [r7, #15]
										   .date      = (uint8_t) (dateTime.date),
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d70:	b2db      	uxtb	r3, r3
	const sRtcDateTime rtcDateTime = {.seconds   = (uint8_t) (dateTime.seconds),
 8000d72:	743b      	strb	r3, [r7, #16]
										   .month     = (uint8_t) (dateTime.month),
 8000d74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000d76:	b2db      	uxtb	r3, r3
	const sRtcDateTime rtcDateTime = {.seconds   = (uint8_t) (dateTime.seconds),
 8000d78:	747b      	strb	r3, [r7, #17]
										   .year      = (uint8_t) (dateTime.year)		};
 8000d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000d7c:	b2db      	uxtb	r3, r3
	const sRtcDateTime rtcDateTime = {.seconds   = (uint8_t) (dateTime.seconds),
 8000d7e:	74bb      	strb	r3, [r7, #18]

	//Send new alarm to RTC
	rtcSetAlarm2(RTC_ALARM2_MINUTES_MATCH, rtcDateTime.minutes, rtcDateTime.hours, rtcDateTime.date);
 8000d80:	7b79      	ldrb	r1, [r7, #13]
 8000d82:	7bba      	ldrb	r2, [r7, #14]
 8000d84:	7c3b      	ldrb	r3, [r7, #16]
 8000d86:	2001      	movs	r0, #1
 8000d88:	f7ff fe56 	bl	8000a38 <rtcSetAlarm2>
	return;
 8000d8c:	bf00      	nop
}
 8000d8e:	3730      	adds	r7, #48	@ 0x30
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d98:	4b08      	ldr	r3, [pc, #32]	@ (8000dbc <HAL_Init+0x28>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a07      	ldr	r2, [pc, #28]	@ (8000dbc <HAL_Init+0x28>)
 8000d9e:	f043 0310 	orr.w	r3, r3, #16
 8000da2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da4:	2003      	movs	r0, #3
 8000da6:	f000 f923 	bl	8000ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000daa:	200f      	movs	r0, #15
 8000dac:	f000 f808 	bl	8000dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db0:	f7ff fada 	bl	8000368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40022000 	.word	0x40022000

08000dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc8:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <HAL_InitTick+0x54>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b12      	ldr	r3, [pc, #72]	@ (8000e18 <HAL_InitTick+0x58>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f93b 	bl	800105a <HAL_SYSTICK_Config>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00e      	b.n	8000e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b0f      	cmp	r3, #15
 8000df2:	d80a      	bhi.n	8000e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df4:	2200      	movs	r2, #0
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000dfc:	f000 f903 	bl	8001006 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e00:	4a06      	ldr	r2, [pc, #24]	@ (8000e1c <HAL_InitTick+0x5c>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	e000      	b.n	8000e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000000 	.word	0x20000000
 8000e18:	20000008 	.word	0x20000008
 8000e1c:	20000004 	.word	0x20000004

08000e20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b05      	ldr	r3, [pc, #20]	@ (8000e3c <HAL_IncTick+0x1c>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b05      	ldr	r3, [pc, #20]	@ (8000e40 <HAL_IncTick+0x20>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a03      	ldr	r2, [pc, #12]	@ (8000e40 <HAL_IncTick+0x20>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	20000008 	.word	0x20000008
 8000e40:	2000007c 	.word	0x2000007c

08000e44 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return uwTick;
 8000e48:	4b02      	ldr	r3, [pc, #8]	@ (8000e54 <HAL_GetTick+0x10>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr
 8000e54:	2000007c 	.word	0x2000007c

08000e58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b085      	sub	sp, #20
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e68:	4b0c      	ldr	r3, [pc, #48]	@ (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e6e:	68ba      	ldr	r2, [r7, #8]
 8000e70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e74:	4013      	ands	r3, r2
 8000e76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8a:	4a04      	ldr	r2, [pc, #16]	@ (8000e9c <__NVIC_SetPriorityGrouping+0x44>)
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	60d3      	str	r3, [r2, #12]
}
 8000e90:	bf00      	nop
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bc80      	pop	{r7}
 8000e98:	4770      	bx	lr
 8000e9a:	bf00      	nop
 8000e9c:	e000ed00 	.word	0xe000ed00

08000ea0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea4:	4b04      	ldr	r3, [pc, #16]	@ (8000eb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ea6:	68db      	ldr	r3, [r3, #12]
 8000ea8:	0a1b      	lsrs	r3, r3, #8
 8000eaa:	f003 0307 	and.w	r3, r3, #7
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bc80      	pop	{r7}
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	e000ed00 	.word	0xe000ed00

08000ebc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	db0b      	blt.n	8000ee6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ece:	79fb      	ldrb	r3, [r7, #7]
 8000ed0:	f003 021f 	and.w	r2, r3, #31
 8000ed4:	4906      	ldr	r1, [pc, #24]	@ (8000ef0 <__NVIC_EnableIRQ+0x34>)
 8000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eda:	095b      	lsrs	r3, r3, #5
 8000edc:	2001      	movs	r0, #1
 8000ede:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	e000e100 	.word	0xe000e100

08000ef4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	b083      	sub	sp, #12
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	db0a      	blt.n	8000f1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	490c      	ldr	r1, [pc, #48]	@ (8000f40 <__NVIC_SetPriority+0x4c>)
 8000f0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f12:	0112      	lsls	r2, r2, #4
 8000f14:	b2d2      	uxtb	r2, r2
 8000f16:	440b      	add	r3, r1
 8000f18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f1c:	e00a      	b.n	8000f34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	b2da      	uxtb	r2, r3
 8000f22:	4908      	ldr	r1, [pc, #32]	@ (8000f44 <__NVIC_SetPriority+0x50>)
 8000f24:	79fb      	ldrb	r3, [r7, #7]
 8000f26:	f003 030f 	and.w	r3, r3, #15
 8000f2a:	3b04      	subs	r3, #4
 8000f2c:	0112      	lsls	r2, r2, #4
 8000f2e:	b2d2      	uxtb	r2, r2
 8000f30:	440b      	add	r3, r1
 8000f32:	761a      	strb	r2, [r3, #24]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000e100 	.word	0xe000e100
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	@ 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	f003 0307 	and.w	r3, r3, #7
 8000f5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f1c3 0307 	rsb	r3, r3, #7
 8000f62:	2b04      	cmp	r3, #4
 8000f64:	bf28      	it	cs
 8000f66:	2304      	movcs	r3, #4
 8000f68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6a:	69fb      	ldr	r3, [r7, #28]
 8000f6c:	3304      	adds	r3, #4
 8000f6e:	2b06      	cmp	r3, #6
 8000f70:	d902      	bls.n	8000f78 <NVIC_EncodePriority+0x30>
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3b03      	subs	r3, #3
 8000f76:	e000      	b.n	8000f7a <NVIC_EncodePriority+0x32>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000f80:	69bb      	ldr	r3, [r7, #24]
 8000f82:	fa02 f303 	lsl.w	r3, r2, r3
 8000f86:	43da      	mvns	r2, r3
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	401a      	ands	r2, r3
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f90:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	43d9      	mvns	r1, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa0:	4313      	orrs	r3, r2
         );
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3724      	adds	r7, #36	@ 0x24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr

08000fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3b01      	subs	r3, #1
 8000fb8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fbc:	d301      	bcc.n	8000fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e00f      	b.n	8000fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	@ (8000fec <SysTick_Config+0x40>)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	3b01      	subs	r3, #1
 8000fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fca:	210f      	movs	r1, #15
 8000fcc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fd0:	f7ff ff90 	bl	8000ef4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd4:	4b05      	ldr	r3, [pc, #20]	@ (8000fec <SysTick_Config+0x40>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fda:	4b04      	ldr	r3, [pc, #16]	@ (8000fec <SysTick_Config+0x40>)
 8000fdc:	2207      	movs	r2, #7
 8000fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	e000e010 	.word	0xe000e010

08000ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ff2d 	bl	8000e58 <__NVIC_SetPriorityGrouping>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001006:	b580      	push	{r7, lr}
 8001008:	b086      	sub	sp, #24
 800100a:	af00      	add	r7, sp, #0
 800100c:	4603      	mov	r3, r0
 800100e:	60b9      	str	r1, [r7, #8]
 8001010:	607a      	str	r2, [r7, #4]
 8001012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001018:	f7ff ff42 	bl	8000ea0 <__NVIC_GetPriorityGrouping>
 800101c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	6978      	ldr	r0, [r7, #20]
 8001024:	f7ff ff90 	bl	8000f48 <NVIC_EncodePriority>
 8001028:	4602      	mov	r2, r0
 800102a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800102e:	4611      	mov	r1, r2
 8001030:	4618      	mov	r0, r3
 8001032:	f7ff ff5f 	bl	8000ef4 <__NVIC_SetPriority>
}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	4603      	mov	r3, r0
 8001046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff35 	bl	8000ebc <__NVIC_EnableIRQ>
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ffa2 	bl	8000fac <SysTick_Config>
 8001068:	4603      	mov	r3, r0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001074:	b480      	push	{r7}
 8001076:	b08b      	sub	sp, #44	@ 0x2c
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001082:	2300      	movs	r3, #0
 8001084:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001086:	e169      	b.n	800135c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001088:	2201      	movs	r2, #1
 800108a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	69fa      	ldr	r2, [r7, #28]
 8001098:	4013      	ands	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	f040 8158 	bne.w	8001356 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	4a9a      	ldr	r2, [pc, #616]	@ (8001314 <HAL_GPIO_Init+0x2a0>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d05e      	beq.n	800116e <HAL_GPIO_Init+0xfa>
 80010b0:	4a98      	ldr	r2, [pc, #608]	@ (8001314 <HAL_GPIO_Init+0x2a0>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d875      	bhi.n	80011a2 <HAL_GPIO_Init+0x12e>
 80010b6:	4a98      	ldr	r2, [pc, #608]	@ (8001318 <HAL_GPIO_Init+0x2a4>)
 80010b8:	4293      	cmp	r3, r2
 80010ba:	d058      	beq.n	800116e <HAL_GPIO_Init+0xfa>
 80010bc:	4a96      	ldr	r2, [pc, #600]	@ (8001318 <HAL_GPIO_Init+0x2a4>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d86f      	bhi.n	80011a2 <HAL_GPIO_Init+0x12e>
 80010c2:	4a96      	ldr	r2, [pc, #600]	@ (800131c <HAL_GPIO_Init+0x2a8>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d052      	beq.n	800116e <HAL_GPIO_Init+0xfa>
 80010c8:	4a94      	ldr	r2, [pc, #592]	@ (800131c <HAL_GPIO_Init+0x2a8>)
 80010ca:	4293      	cmp	r3, r2
 80010cc:	d869      	bhi.n	80011a2 <HAL_GPIO_Init+0x12e>
 80010ce:	4a94      	ldr	r2, [pc, #592]	@ (8001320 <HAL_GPIO_Init+0x2ac>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d04c      	beq.n	800116e <HAL_GPIO_Init+0xfa>
 80010d4:	4a92      	ldr	r2, [pc, #584]	@ (8001320 <HAL_GPIO_Init+0x2ac>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d863      	bhi.n	80011a2 <HAL_GPIO_Init+0x12e>
 80010da:	4a92      	ldr	r2, [pc, #584]	@ (8001324 <HAL_GPIO_Init+0x2b0>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d046      	beq.n	800116e <HAL_GPIO_Init+0xfa>
 80010e0:	4a90      	ldr	r2, [pc, #576]	@ (8001324 <HAL_GPIO_Init+0x2b0>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d85d      	bhi.n	80011a2 <HAL_GPIO_Init+0x12e>
 80010e6:	2b12      	cmp	r3, #18
 80010e8:	d82a      	bhi.n	8001140 <HAL_GPIO_Init+0xcc>
 80010ea:	2b12      	cmp	r3, #18
 80010ec:	d859      	bhi.n	80011a2 <HAL_GPIO_Init+0x12e>
 80010ee:	a201      	add	r2, pc, #4	@ (adr r2, 80010f4 <HAL_GPIO_Init+0x80>)
 80010f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010f4:	0800116f 	.word	0x0800116f
 80010f8:	08001149 	.word	0x08001149
 80010fc:	0800115b 	.word	0x0800115b
 8001100:	0800119d 	.word	0x0800119d
 8001104:	080011a3 	.word	0x080011a3
 8001108:	080011a3 	.word	0x080011a3
 800110c:	080011a3 	.word	0x080011a3
 8001110:	080011a3 	.word	0x080011a3
 8001114:	080011a3 	.word	0x080011a3
 8001118:	080011a3 	.word	0x080011a3
 800111c:	080011a3 	.word	0x080011a3
 8001120:	080011a3 	.word	0x080011a3
 8001124:	080011a3 	.word	0x080011a3
 8001128:	080011a3 	.word	0x080011a3
 800112c:	080011a3 	.word	0x080011a3
 8001130:	080011a3 	.word	0x080011a3
 8001134:	080011a3 	.word	0x080011a3
 8001138:	08001151 	.word	0x08001151
 800113c:	08001165 	.word	0x08001165
 8001140:	4a79      	ldr	r2, [pc, #484]	@ (8001328 <HAL_GPIO_Init+0x2b4>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d013      	beq.n	800116e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001146:	e02c      	b.n	80011a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	623b      	str	r3, [r7, #32]
          break;
 800114e:	e029      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	3304      	adds	r3, #4
 8001156:	623b      	str	r3, [r7, #32]
          break;
 8001158:	e024      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	3308      	adds	r3, #8
 8001160:	623b      	str	r3, [r7, #32]
          break;
 8001162:	e01f      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	330c      	adds	r3, #12
 800116a:	623b      	str	r3, [r7, #32]
          break;
 800116c:	e01a      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d102      	bne.n	800117c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001176:	2304      	movs	r3, #4
 8001178:	623b      	str	r3, [r7, #32]
          break;
 800117a:	e013      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d105      	bne.n	8001190 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001184:	2308      	movs	r3, #8
 8001186:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69fa      	ldr	r2, [r7, #28]
 800118c:	611a      	str	r2, [r3, #16]
          break;
 800118e:	e009      	b.n	80011a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001190:	2308      	movs	r3, #8
 8001192:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	69fa      	ldr	r2, [r7, #28]
 8001198:	615a      	str	r2, [r3, #20]
          break;
 800119a:	e003      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800119c:	2300      	movs	r3, #0
 800119e:	623b      	str	r3, [r7, #32]
          break;
 80011a0:	e000      	b.n	80011a4 <HAL_GPIO_Init+0x130>
          break;
 80011a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	2bff      	cmp	r3, #255	@ 0xff
 80011a8:	d801      	bhi.n	80011ae <HAL_GPIO_Init+0x13a>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	e001      	b.n	80011b2 <HAL_GPIO_Init+0x13e>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	3304      	adds	r3, #4
 80011b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	2bff      	cmp	r3, #255	@ 0xff
 80011b8:	d802      	bhi.n	80011c0 <HAL_GPIO_Init+0x14c>
 80011ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	e002      	b.n	80011c6 <HAL_GPIO_Init+0x152>
 80011c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011c2:	3b08      	subs	r3, #8
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	681a      	ldr	r2, [r3, #0]
 80011cc:	210f      	movs	r1, #15
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	fa01 f303 	lsl.w	r3, r1, r3
 80011d4:	43db      	mvns	r3, r3
 80011d6:	401a      	ands	r2, r3
 80011d8:	6a39      	ldr	r1, [r7, #32]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	fa01 f303 	lsl.w	r3, r1, r3
 80011e0:	431a      	orrs	r2, r3
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	f000 80b1 	beq.w	8001356 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011f4:	4b4d      	ldr	r3, [pc, #308]	@ (800132c <HAL_GPIO_Init+0x2b8>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	4a4c      	ldr	r2, [pc, #304]	@ (800132c <HAL_GPIO_Init+0x2b8>)
 80011fa:	f043 0301 	orr.w	r3, r3, #1
 80011fe:	6193      	str	r3, [r2, #24]
 8001200:	4b4a      	ldr	r3, [pc, #296]	@ (800132c <HAL_GPIO_Init+0x2b8>)
 8001202:	699b      	ldr	r3, [r3, #24]
 8001204:	f003 0301 	and.w	r3, r3, #1
 8001208:	60bb      	str	r3, [r7, #8]
 800120a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800120c:	4a48      	ldr	r2, [pc, #288]	@ (8001330 <HAL_GPIO_Init+0x2bc>)
 800120e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001210:	089b      	lsrs	r3, r3, #2
 8001212:	3302      	adds	r3, #2
 8001214:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001218:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800121a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800121c:	f003 0303 	and.w	r3, r3, #3
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	220f      	movs	r2, #15
 8001224:	fa02 f303 	lsl.w	r3, r2, r3
 8001228:	43db      	mvns	r3, r3
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	4013      	ands	r3, r2
 800122e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	4a40      	ldr	r2, [pc, #256]	@ (8001334 <HAL_GPIO_Init+0x2c0>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d013      	beq.n	8001260 <HAL_GPIO_Init+0x1ec>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4a3f      	ldr	r2, [pc, #252]	@ (8001338 <HAL_GPIO_Init+0x2c4>)
 800123c:	4293      	cmp	r3, r2
 800123e:	d00d      	beq.n	800125c <HAL_GPIO_Init+0x1e8>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a3e      	ldr	r2, [pc, #248]	@ (800133c <HAL_GPIO_Init+0x2c8>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d007      	beq.n	8001258 <HAL_GPIO_Init+0x1e4>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	4a3d      	ldr	r2, [pc, #244]	@ (8001340 <HAL_GPIO_Init+0x2cc>)
 800124c:	4293      	cmp	r3, r2
 800124e:	d101      	bne.n	8001254 <HAL_GPIO_Init+0x1e0>
 8001250:	2303      	movs	r3, #3
 8001252:	e006      	b.n	8001262 <HAL_GPIO_Init+0x1ee>
 8001254:	2304      	movs	r3, #4
 8001256:	e004      	b.n	8001262 <HAL_GPIO_Init+0x1ee>
 8001258:	2302      	movs	r3, #2
 800125a:	e002      	b.n	8001262 <HAL_GPIO_Init+0x1ee>
 800125c:	2301      	movs	r3, #1
 800125e:	e000      	b.n	8001262 <HAL_GPIO_Init+0x1ee>
 8001260:	2300      	movs	r3, #0
 8001262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001264:	f002 0203 	and.w	r2, r2, #3
 8001268:	0092      	lsls	r2, r2, #2
 800126a:	4093      	lsls	r3, r2
 800126c:	68fa      	ldr	r2, [r7, #12]
 800126e:	4313      	orrs	r3, r2
 8001270:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001272:	492f      	ldr	r1, [pc, #188]	@ (8001330 <HAL_GPIO_Init+0x2bc>)
 8001274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001276:	089b      	lsrs	r3, r3, #2
 8001278:	3302      	adds	r3, #2
 800127a:	68fa      	ldr	r2, [r7, #12]
 800127c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d006      	beq.n	800129a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800128c:	4b2d      	ldr	r3, [pc, #180]	@ (8001344 <HAL_GPIO_Init+0x2d0>)
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	492c      	ldr	r1, [pc, #176]	@ (8001344 <HAL_GPIO_Init+0x2d0>)
 8001292:	69bb      	ldr	r3, [r7, #24]
 8001294:	4313      	orrs	r3, r2
 8001296:	608b      	str	r3, [r1, #8]
 8001298:	e006      	b.n	80012a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800129a:	4b2a      	ldr	r3, [pc, #168]	@ (8001344 <HAL_GPIO_Init+0x2d0>)
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	69bb      	ldr	r3, [r7, #24]
 80012a0:	43db      	mvns	r3, r3
 80012a2:	4928      	ldr	r1, [pc, #160]	@ (8001344 <HAL_GPIO_Init+0x2d0>)
 80012a4:	4013      	ands	r3, r2
 80012a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	685b      	ldr	r3, [r3, #4]
 80012ac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d006      	beq.n	80012c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012b4:	4b23      	ldr	r3, [pc, #140]	@ (8001344 <HAL_GPIO_Init+0x2d0>)
 80012b6:	68da      	ldr	r2, [r3, #12]
 80012b8:	4922      	ldr	r1, [pc, #136]	@ (8001344 <HAL_GPIO_Init+0x2d0>)
 80012ba:	69bb      	ldr	r3, [r7, #24]
 80012bc:	4313      	orrs	r3, r2
 80012be:	60cb      	str	r3, [r1, #12]
 80012c0:	e006      	b.n	80012d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80012c2:	4b20      	ldr	r3, [pc, #128]	@ (8001344 <HAL_GPIO_Init+0x2d0>)
 80012c4:	68da      	ldr	r2, [r3, #12]
 80012c6:	69bb      	ldr	r3, [r7, #24]
 80012c8:	43db      	mvns	r3, r3
 80012ca:	491e      	ldr	r1, [pc, #120]	@ (8001344 <HAL_GPIO_Init+0x2d0>)
 80012cc:	4013      	ands	r3, r2
 80012ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d006      	beq.n	80012ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012dc:	4b19      	ldr	r3, [pc, #100]	@ (8001344 <HAL_GPIO_Init+0x2d0>)
 80012de:	685a      	ldr	r2, [r3, #4]
 80012e0:	4918      	ldr	r1, [pc, #96]	@ (8001344 <HAL_GPIO_Init+0x2d0>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	4313      	orrs	r3, r2
 80012e6:	604b      	str	r3, [r1, #4]
 80012e8:	e006      	b.n	80012f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012ea:	4b16      	ldr	r3, [pc, #88]	@ (8001344 <HAL_GPIO_Init+0x2d0>)
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	69bb      	ldr	r3, [r7, #24]
 80012f0:	43db      	mvns	r3, r3
 80012f2:	4914      	ldr	r1, [pc, #80]	@ (8001344 <HAL_GPIO_Init+0x2d0>)
 80012f4:	4013      	ands	r3, r2
 80012f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d021      	beq.n	8001348 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001304:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <HAL_GPIO_Init+0x2d0>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	490e      	ldr	r1, [pc, #56]	@ (8001344 <HAL_GPIO_Init+0x2d0>)
 800130a:	69bb      	ldr	r3, [r7, #24]
 800130c:	4313      	orrs	r3, r2
 800130e:	600b      	str	r3, [r1, #0]
 8001310:	e021      	b.n	8001356 <HAL_GPIO_Init+0x2e2>
 8001312:	bf00      	nop
 8001314:	10320000 	.word	0x10320000
 8001318:	10310000 	.word	0x10310000
 800131c:	10220000 	.word	0x10220000
 8001320:	10210000 	.word	0x10210000
 8001324:	10120000 	.word	0x10120000
 8001328:	10110000 	.word	0x10110000
 800132c:	40021000 	.word	0x40021000
 8001330:	40010000 	.word	0x40010000
 8001334:	40010800 	.word	0x40010800
 8001338:	40010c00 	.word	0x40010c00
 800133c:	40011000 	.word	0x40011000
 8001340:	40011400 	.word	0x40011400
 8001344:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001348:	4b0b      	ldr	r3, [pc, #44]	@ (8001378 <HAL_GPIO_Init+0x304>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	43db      	mvns	r3, r3
 8001350:	4909      	ldr	r1, [pc, #36]	@ (8001378 <HAL_GPIO_Init+0x304>)
 8001352:	4013      	ands	r3, r2
 8001354:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001358:	3301      	adds	r3, #1
 800135a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001362:	fa22 f303 	lsr.w	r3, r2, r3
 8001366:	2b00      	cmp	r3, #0
 8001368:	f47f ae8e 	bne.w	8001088 <HAL_GPIO_Init+0x14>
  }
}
 800136c:	bf00      	nop
 800136e:	bf00      	nop
 8001370:	372c      	adds	r7, #44	@ 0x2c
 8001372:	46bd      	mov	sp, r7
 8001374:	bc80      	pop	{r7}
 8001376:	4770      	bx	lr
 8001378:	40010400 	.word	0x40010400

0800137c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
 8001384:	460b      	mov	r3, r1
 8001386:	807b      	strh	r3, [r7, #2]
 8001388:	4613      	mov	r3, r2
 800138a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800138c:	787b      	ldrb	r3, [r7, #1]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d003      	beq.n	800139a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001392:	887a      	ldrh	r2, [r7, #2]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001398:	e003      	b.n	80013a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800139a:	887b      	ldrh	r3, [r7, #2]
 800139c:	041a      	lsls	r2, r3, #16
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	611a      	str	r2, [r3, #16]
}
 80013a2:	bf00      	nop
 80013a4:	370c      	adds	r7, #12
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bc80      	pop	{r7}
 80013aa:	4770      	bx	lr

080013ac <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	460b      	mov	r3, r1
 80013b6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013be:	887a      	ldrh	r2, [r7, #2]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4013      	ands	r3, r2
 80013c4:	041a      	lsls	r2, r3, #16
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	43d9      	mvns	r1, r3
 80013ca:	887b      	ldrh	r3, [r7, #2]
 80013cc:	400b      	ands	r3, r1
 80013ce:	431a      	orrs	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	611a      	str	r2, [r3, #16]
}
 80013d4:	bf00      	nop
 80013d6:	3714      	adds	r7, #20
 80013d8:	46bd      	mov	sp, r7
 80013da:	bc80      	pop	{r7}
 80013dc:	4770      	bx	lr
	...

080013e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013ea:	4b08      	ldr	r3, [pc, #32]	@ (800140c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013ec:	695a      	ldr	r2, [r3, #20]
 80013ee:	88fb      	ldrh	r3, [r7, #6]
 80013f0:	4013      	ands	r3, r2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d006      	beq.n	8001404 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013f6:	4a05      	ldr	r2, [pc, #20]	@ (800140c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f8:	88fb      	ldrh	r3, [r7, #6]
 80013fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7fe ff96 	bl	8000330 <HAL_GPIO_EXTI_Callback>
  }
}
 8001404:	bf00      	nop
 8001406:	3708      	adds	r7, #8
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40010400 	.word	0x40010400

08001410 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e12b      	b.n	800167a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d106      	bne.n	800143c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	2200      	movs	r2, #0
 8001432:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7fe ffc8 	bl	80003cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2224      	movs	r2, #36	@ 0x24
 8001440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 0201 	bic.w	r2, r2, #1
 8001452:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001462:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001472:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001474:	f001 fbfc 	bl	8002c70 <HAL_RCC_GetPCLK1Freq>
 8001478:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	4a81      	ldr	r2, [pc, #516]	@ (8001684 <HAL_I2C_Init+0x274>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d807      	bhi.n	8001494 <HAL_I2C_Init+0x84>
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	4a80      	ldr	r2, [pc, #512]	@ (8001688 <HAL_I2C_Init+0x278>)
 8001488:	4293      	cmp	r3, r2
 800148a:	bf94      	ite	ls
 800148c:	2301      	movls	r3, #1
 800148e:	2300      	movhi	r3, #0
 8001490:	b2db      	uxtb	r3, r3
 8001492:	e006      	b.n	80014a2 <HAL_I2C_Init+0x92>
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4a7d      	ldr	r2, [pc, #500]	@ (800168c <HAL_I2C_Init+0x27c>)
 8001498:	4293      	cmp	r3, r2
 800149a:	bf94      	ite	ls
 800149c:	2301      	movls	r3, #1
 800149e:	2300      	movhi	r3, #0
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e0e7      	b.n	800167a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	4a78      	ldr	r2, [pc, #480]	@ (8001690 <HAL_I2C_Init+0x280>)
 80014ae:	fba2 2303 	umull	r2, r3, r2, r3
 80014b2:	0c9b      	lsrs	r3, r3, #18
 80014b4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68ba      	ldr	r2, [r7, #8]
 80014c6:	430a      	orrs	r2, r1
 80014c8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	6a1b      	ldr	r3, [r3, #32]
 80014d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	4a6a      	ldr	r2, [pc, #424]	@ (8001684 <HAL_I2C_Init+0x274>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d802      	bhi.n	80014e4 <HAL_I2C_Init+0xd4>
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	3301      	adds	r3, #1
 80014e2:	e009      	b.n	80014f8 <HAL_I2C_Init+0xe8>
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80014ea:	fb02 f303 	mul.w	r3, r2, r3
 80014ee:	4a69      	ldr	r2, [pc, #420]	@ (8001694 <HAL_I2C_Init+0x284>)
 80014f0:	fba2 2303 	umull	r2, r3, r2, r3
 80014f4:	099b      	lsrs	r3, r3, #6
 80014f6:	3301      	adds	r3, #1
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6812      	ldr	r2, [r2, #0]
 80014fc:	430b      	orrs	r3, r1
 80014fe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800150a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	495c      	ldr	r1, [pc, #368]	@ (8001684 <HAL_I2C_Init+0x274>)
 8001514:	428b      	cmp	r3, r1
 8001516:	d819      	bhi.n	800154c <HAL_I2C_Init+0x13c>
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	1e59      	subs	r1, r3, #1
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	fbb1 f3f3 	udiv	r3, r1, r3
 8001526:	1c59      	adds	r1, r3, #1
 8001528:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800152c:	400b      	ands	r3, r1
 800152e:	2b00      	cmp	r3, #0
 8001530:	d00a      	beq.n	8001548 <HAL_I2C_Init+0x138>
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	1e59      	subs	r1, r3, #1
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001540:	3301      	adds	r3, #1
 8001542:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001546:	e051      	b.n	80015ec <HAL_I2C_Init+0x1dc>
 8001548:	2304      	movs	r3, #4
 800154a:	e04f      	b.n	80015ec <HAL_I2C_Init+0x1dc>
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d111      	bne.n	8001578 <HAL_I2C_Init+0x168>
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	1e58      	subs	r0, r3, #1
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6859      	ldr	r1, [r3, #4]
 800155c:	460b      	mov	r3, r1
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	440b      	add	r3, r1
 8001562:	fbb0 f3f3 	udiv	r3, r0, r3
 8001566:	3301      	adds	r3, #1
 8001568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800156c:	2b00      	cmp	r3, #0
 800156e:	bf0c      	ite	eq
 8001570:	2301      	moveq	r3, #1
 8001572:	2300      	movne	r3, #0
 8001574:	b2db      	uxtb	r3, r3
 8001576:	e012      	b.n	800159e <HAL_I2C_Init+0x18e>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	1e58      	subs	r0, r3, #1
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6859      	ldr	r1, [r3, #4]
 8001580:	460b      	mov	r3, r1
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	440b      	add	r3, r1
 8001586:	0099      	lsls	r1, r3, #2
 8001588:	440b      	add	r3, r1
 800158a:	fbb0 f3f3 	udiv	r3, r0, r3
 800158e:	3301      	adds	r3, #1
 8001590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001594:	2b00      	cmp	r3, #0
 8001596:	bf0c      	ite	eq
 8001598:	2301      	moveq	r3, #1
 800159a:	2300      	movne	r3, #0
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_I2C_Init+0x196>
 80015a2:	2301      	movs	r3, #1
 80015a4:	e022      	b.n	80015ec <HAL_I2C_Init+0x1dc>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10e      	bne.n	80015cc <HAL_I2C_Init+0x1bc>
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	1e58      	subs	r0, r3, #1
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6859      	ldr	r1, [r3, #4]
 80015b6:	460b      	mov	r3, r1
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	440b      	add	r3, r1
 80015bc:	fbb0 f3f3 	udiv	r3, r0, r3
 80015c0:	3301      	adds	r3, #1
 80015c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015c6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015ca:	e00f      	b.n	80015ec <HAL_I2C_Init+0x1dc>
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	1e58      	subs	r0, r3, #1
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6859      	ldr	r1, [r3, #4]
 80015d4:	460b      	mov	r3, r1
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	440b      	add	r3, r1
 80015da:	0099      	lsls	r1, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	fbb0 f3f3 	udiv	r3, r0, r3
 80015e2:	3301      	adds	r3, #1
 80015e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015e8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	6809      	ldr	r1, [r1, #0]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	69da      	ldr	r2, [r3, #28]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	431a      	orrs	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	430a      	orrs	r2, r1
 800160e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800161a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	6911      	ldr	r1, [r2, #16]
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	68d2      	ldr	r2, [r2, #12]
 8001626:	4311      	orrs	r1, r2
 8001628:	687a      	ldr	r2, [r7, #4]
 800162a:	6812      	ldr	r2, [r2, #0]
 800162c:	430b      	orrs	r3, r1
 800162e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	695a      	ldr	r2, [r3, #20]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	431a      	orrs	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f042 0201 	orr.w	r2, r2, #1
 800165a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2220      	movs	r2, #32
 8001666:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001678:	2300      	movs	r3, #0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	000186a0 	.word	0x000186a0
 8001688:	001e847f 	.word	0x001e847f
 800168c:	003d08ff 	.word	0x003d08ff
 8001690:	431bde83 	.word	0x431bde83
 8001694:	10624dd3 	.word	0x10624dd3

08001698 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b088      	sub	sp, #32
 800169c:	af02      	add	r7, sp, #8
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	4608      	mov	r0, r1
 80016a2:	4611      	mov	r1, r2
 80016a4:	461a      	mov	r2, r3
 80016a6:	4603      	mov	r3, r0
 80016a8:	817b      	strh	r3, [r7, #10]
 80016aa:	460b      	mov	r3, r1
 80016ac:	813b      	strh	r3, [r7, #8]
 80016ae:	4613      	mov	r3, r2
 80016b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80016b2:	f7ff fbc7 	bl	8000e44 <HAL_GetTick>
 80016b6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b20      	cmp	r3, #32
 80016c2:	f040 80d9 	bne.w	8001878 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	9300      	str	r3, [sp, #0]
 80016ca:	2319      	movs	r3, #25
 80016cc:	2201      	movs	r2, #1
 80016ce:	496d      	ldr	r1, [pc, #436]	@ (8001884 <HAL_I2C_Mem_Write+0x1ec>)
 80016d0:	68f8      	ldr	r0, [r7, #12]
 80016d2:	f000 fccd 	bl	8002070 <I2C_WaitOnFlagUntilTimeout>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80016dc:	2302      	movs	r3, #2
 80016de:	e0cc      	b.n	800187a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d101      	bne.n	80016ee <HAL_I2C_Mem_Write+0x56>
 80016ea:	2302      	movs	r3, #2
 80016ec:	e0c5      	b.n	800187a <HAL_I2C_Mem_Write+0x1e2>
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0301 	and.w	r3, r3, #1
 8001700:	2b01      	cmp	r3, #1
 8001702:	d007      	beq.n	8001714 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f042 0201 	orr.w	r2, r2, #1
 8001712:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001722:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2221      	movs	r2, #33	@ 0x21
 8001728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2240      	movs	r2, #64	@ 0x40
 8001730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2200      	movs	r2, #0
 8001738:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	6a3a      	ldr	r2, [r7, #32]
 800173e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001744:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800174a:	b29a      	uxth	r2, r3
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	4a4d      	ldr	r2, [pc, #308]	@ (8001888 <HAL_I2C_Mem_Write+0x1f0>)
 8001754:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001756:	88f8      	ldrh	r0, [r7, #6]
 8001758:	893a      	ldrh	r2, [r7, #8]
 800175a:	8979      	ldrh	r1, [r7, #10]
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	4603      	mov	r3, r0
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f000 fb04 	bl	8001d74 <I2C_RequestMemoryWrite>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d052      	beq.n	8001818 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e081      	b.n	800187a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001776:	697a      	ldr	r2, [r7, #20]
 8001778:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f000 fd92 	bl	80022a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d00d      	beq.n	80017a2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	2b04      	cmp	r3, #4
 800178c:	d107      	bne.n	800179e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800179c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e06b      	b.n	800187a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a6:	781a      	ldrb	r2, [r3, #0]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017bc:	3b01      	subs	r3, #1
 80017be:	b29a      	uxth	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80017c8:	b29b      	uxth	r3, r3
 80017ca:	3b01      	subs	r3, #1
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	f003 0304 	and.w	r3, r3, #4
 80017dc:	2b04      	cmp	r3, #4
 80017de:	d11b      	bne.n	8001818 <HAL_I2C_Mem_Write+0x180>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d017      	beq.n	8001818 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ec:	781a      	ldrb	r2, [r3, #0]
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017f8:	1c5a      	adds	r2, r3, #1
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001802:	3b01      	subs	r3, #1
 8001804:	b29a      	uxth	r2, r3
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800180e:	b29b      	uxth	r3, r3
 8001810:	3b01      	subs	r3, #1
 8001812:	b29a      	uxth	r2, r3
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800181c:	2b00      	cmp	r3, #0
 800181e:	d1aa      	bne.n	8001776 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001824:	68f8      	ldr	r0, [r7, #12]
 8001826:	f000 fd85 	bl	8002334 <I2C_WaitOnBTFFlagUntilTimeout>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d00d      	beq.n	800184c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001834:	2b04      	cmp	r3, #4
 8001836:	d107      	bne.n	8001848 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001846:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e016      	b.n	800187a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800185a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	2220      	movs	r2, #32
 8001860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	2200      	movs	r2, #0
 8001870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001874:	2300      	movs	r3, #0
 8001876:	e000      	b.n	800187a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001878:	2302      	movs	r3, #2
  }
}
 800187a:	4618      	mov	r0, r3
 800187c:	3718      	adds	r7, #24
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	00100002 	.word	0x00100002
 8001888:	ffff0000 	.word	0xffff0000

0800188c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b08c      	sub	sp, #48	@ 0x30
 8001890:	af02      	add	r7, sp, #8
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	4608      	mov	r0, r1
 8001896:	4611      	mov	r1, r2
 8001898:	461a      	mov	r2, r3
 800189a:	4603      	mov	r3, r0
 800189c:	817b      	strh	r3, [r7, #10]
 800189e:	460b      	mov	r3, r1
 80018a0:	813b      	strh	r3, [r7, #8]
 80018a2:	4613      	mov	r3, r2
 80018a4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80018a6:	2300      	movs	r3, #0
 80018a8:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80018aa:	f7ff facb 	bl	8000e44 <HAL_GetTick>
 80018ae:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018b6:	b2db      	uxtb	r3, r3
 80018b8:	2b20      	cmp	r3, #32
 80018ba:	f040 8250 	bne.w	8001d5e <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80018be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2319      	movs	r3, #25
 80018c4:	2201      	movs	r2, #1
 80018c6:	4982      	ldr	r1, [pc, #520]	@ (8001ad0 <HAL_I2C_Mem_Read+0x244>)
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f000 fbd1 	bl	8002070 <I2C_WaitOnFlagUntilTimeout>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d001      	beq.n	80018d8 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 80018d4:	2302      	movs	r3, #2
 80018d6:	e243      	b.n	8001d60 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d101      	bne.n	80018e6 <HAL_I2C_Mem_Read+0x5a>
 80018e2:	2302      	movs	r3, #2
 80018e4:	e23c      	b.n	8001d60 <HAL_I2C_Mem_Read+0x4d4>
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2201      	movs	r2, #1
 80018ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d007      	beq.n	800190c <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f042 0201 	orr.w	r2, r2, #1
 800190a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800191a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2222      	movs	r2, #34	@ 0x22
 8001920:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	2240      	movs	r2, #64	@ 0x40
 8001928:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001936:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800193c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001942:	b29a      	uxth	r2, r3
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4a62      	ldr	r2, [pc, #392]	@ (8001ad4 <HAL_I2C_Mem_Read+0x248>)
 800194c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800194e:	88f8      	ldrh	r0, [r7, #6]
 8001950:	893a      	ldrh	r2, [r7, #8]
 8001952:	8979      	ldrh	r1, [r7, #10]
 8001954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001956:	9301      	str	r3, [sp, #4]
 8001958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800195a:	9300      	str	r3, [sp, #0]
 800195c:	4603      	mov	r3, r0
 800195e:	68f8      	ldr	r0, [r7, #12]
 8001960:	f000 fa9e 	bl	8001ea0 <I2C_RequestMemoryRead>
 8001964:	4603      	mov	r3, r0
 8001966:	2b00      	cmp	r3, #0
 8001968:	d001      	beq.n	800196e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e1f8      	b.n	8001d60 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001972:	2b00      	cmp	r3, #0
 8001974:	d113      	bne.n	800199e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001976:	2300      	movs	r3, #0
 8001978:	61fb      	str	r3, [r7, #28]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	695b      	ldr	r3, [r3, #20]
 8001980:	61fb      	str	r3, [r7, #28]
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	61fb      	str	r3, [r7, #28]
 800198a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	e1cc      	b.n	8001d38 <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d11e      	bne.n	80019e4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80019b4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80019b6:	b672      	cpsid	i
}
 80019b8:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80019ba:	2300      	movs	r3, #0
 80019bc:	61bb      	str	r3, [r7, #24]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	695b      	ldr	r3, [r3, #20]
 80019c4:	61bb      	str	r3, [r7, #24]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	699b      	ldr	r3, [r3, #24]
 80019cc:	61bb      	str	r3, [r7, #24]
 80019ce:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019de:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80019e0:	b662      	cpsie	i
}
 80019e2:	e035      	b.n	8001a50 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d11e      	bne.n	8001a2a <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80019fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80019fc:	b672      	cpsid	i
}
 80019fe:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a00:	2300      	movs	r3, #0
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	695b      	ldr	r3, [r3, #20]
 8001a0a:	617b      	str	r3, [r7, #20]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	699b      	ldr	r3, [r3, #24]
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a24:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001a26:	b662      	cpsie	i
}
 8001a28:	e012      	b.n	8001a50 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001a38:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	695b      	ldr	r3, [r3, #20]
 8001a44:	613b      	str	r3, [r7, #16]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	699b      	ldr	r3, [r3, #24]
 8001a4c:	613b      	str	r3, [r7, #16]
 8001a4e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8001a50:	e172      	b.n	8001d38 <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a56:	2b03      	cmp	r3, #3
 8001a58:	f200 811f 	bhi.w	8001c9a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d123      	bne.n	8001aac <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a66:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001a68:	68f8      	ldr	r0, [r7, #12]
 8001a6a:	f000 fcab 	bl	80023c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d001      	beq.n	8001a78 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e173      	b.n	8001d60 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	691a      	ldr	r2, [r3, #16]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a94:	3b01      	subs	r3, #1
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001aaa:	e145      	b.n	8001d38 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d152      	bne.n	8001b5a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001aba:	2200      	movs	r2, #0
 8001abc:	4906      	ldr	r1, [pc, #24]	@ (8001ad8 <HAL_I2C_Mem_Read+0x24c>)
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f000 fad6 	bl	8002070 <I2C_WaitOnFlagUntilTimeout>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d008      	beq.n	8001adc <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e148      	b.n	8001d60 <HAL_I2C_Mem_Read+0x4d4>
 8001ace:	bf00      	nop
 8001ad0:	00100002 	.word	0x00100002
 8001ad4:	ffff0000 	.word	0xffff0000
 8001ad8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8001adc:	b672      	cpsid	i
}
 8001ade:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001aee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	691a      	ldr	r2, [r3, #16]
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afa:	b2d2      	uxtb	r2, r2
 8001afc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b0c:	3b01      	subs	r3, #1
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b18:	b29b      	uxth	r3, r3
 8001b1a:	3b01      	subs	r3, #1
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001b22:	b662      	cpsie	i
}
 8001b24:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	691a      	ldr	r2, [r3, #16]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b30:	b2d2      	uxtb	r2, r2
 8001b32:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b38:	1c5a      	adds	r2, r3, #1
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001b42:	3b01      	subs	r3, #1
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	3b01      	subs	r3, #1
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001b58:	e0ee      	b.n	8001d38 <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001b60:	2200      	movs	r2, #0
 8001b62:	4981      	ldr	r1, [pc, #516]	@ (8001d68 <HAL_I2C_Mem_Read+0x4dc>)
 8001b64:	68f8      	ldr	r0, [r7, #12]
 8001b66:	f000 fa83 	bl	8002070 <I2C_WaitOnFlagUntilTimeout>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e0f5      	b.n	8001d60 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681a      	ldr	r2, [r3, #0]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001b82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001b84:	b672      	cpsid	i
}
 8001b86:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	691a      	ldr	r2, [r3, #16]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b9a:	1c5a      	adds	r2, r3, #1
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ba4:	3b01      	subs	r3, #1
 8001ba6:	b29a      	uxth	r2, r3
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	b29a      	uxth	r2, r3
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8001bba:	4b6c      	ldr	r3, [pc, #432]	@ (8001d6c <HAL_I2C_Mem_Read+0x4e0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	08db      	lsrs	r3, r3, #3
 8001bc0:	4a6b      	ldr	r2, [pc, #428]	@ (8001d70 <HAL_I2C_Mem_Read+0x4e4>)
 8001bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc6:	0a1a      	lsrs	r2, r3, #8
 8001bc8:	4613      	mov	r3, r2
 8001bca:	009b      	lsls	r3, r3, #2
 8001bcc:	4413      	add	r3, r2
 8001bce:	00da      	lsls	r2, r3, #3
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8001bda:	6a3b      	ldr	r3, [r7, #32]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d118      	bne.n	8001c12 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2220      	movs	r2, #32
 8001bea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfa:	f043 0220 	orr.w	r2, r3, #32
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8001c02:	b662      	cpsie	i
}
 8001c04:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e0a6      	b.n	8001d60 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	f003 0304 	and.w	r3, r3, #4
 8001c1c:	2b04      	cmp	r3, #4
 8001c1e:	d1d9      	bne.n	8001bd4 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c2e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	691a      	ldr	r2, [r3, #16]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3a:	b2d2      	uxtb	r2, r2
 8001c3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c4c:	3b01      	subs	r3, #1
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	b29a      	uxth	r2, r3
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8001c62:	b662      	cpsie	i
}
 8001c64:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c70:	b2d2      	uxtb	r2, r2
 8001c72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c78:	1c5a      	adds	r2, r3, #1
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c82:	3b01      	subs	r3, #1
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	3b01      	subs	r3, #1
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8001c98:	e04e      	b.n	8001d38 <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c9c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f000 fb90 	bl	80023c4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e058      	b.n	8001d60 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	691a      	ldr	r2, [r3, #16]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cc0:	1c5a      	adds	r2, r3, #1
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	b29a      	uxth	r2, r3
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	b29a      	uxth	r2, r3
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	f003 0304 	and.w	r3, r3, #4
 8001cea:	2b04      	cmp	r3, #4
 8001cec:	d124      	bne.n	8001d38 <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cf2:	2b03      	cmp	r3, #3
 8001cf4:	d107      	bne.n	8001d06 <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d04:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	691a      	ldr	r2, [r3, #16]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d10:	b2d2      	uxtb	r2, r2
 8001d12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d22:	3b01      	subs	r3, #1
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	3b01      	subs	r3, #1
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f47f ae88 	bne.w	8001a52 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2220      	movs	r2, #32
 8001d46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	e000      	b.n	8001d60 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8001d5e:	2302      	movs	r3, #2
  }
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3728      	adds	r7, #40	@ 0x28
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	00010004 	.word	0x00010004
 8001d6c:	20000000 	.word	0x20000000
 8001d70:	14f8b589 	.word	0x14f8b589

08001d74 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b088      	sub	sp, #32
 8001d78:	af02      	add	r7, sp, #8
 8001d7a:	60f8      	str	r0, [r7, #12]
 8001d7c:	4608      	mov	r0, r1
 8001d7e:	4611      	mov	r1, r2
 8001d80:	461a      	mov	r2, r3
 8001d82:	4603      	mov	r3, r0
 8001d84:	817b      	strh	r3, [r7, #10]
 8001d86:	460b      	mov	r3, r1
 8001d88:	813b      	strh	r3, [r7, #8]
 8001d8a:	4613      	mov	r3, r2
 8001d8c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001d9c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	6a3b      	ldr	r3, [r7, #32]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f000 f960 	bl	8002070 <I2C_WaitOnFlagUntilTimeout>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d00d      	beq.n	8001dd2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001dc4:	d103      	bne.n	8001dce <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dcc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e05f      	b.n	8001e92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001dd2:	897b      	ldrh	r3, [r7, #10]
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	461a      	mov	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001de0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de4:	6a3a      	ldr	r2, [r7, #32]
 8001de6:	492d      	ldr	r1, [pc, #180]	@ (8001e9c <I2C_RequestMemoryWrite+0x128>)
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f000 f9bb 	bl	8002164 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e04c      	b.n	8001e92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001df8:	2300      	movs	r3, #0
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	699b      	ldr	r3, [r3, #24]
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e10:	6a39      	ldr	r1, [r7, #32]
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f000 fa46 	bl	80022a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00d      	beq.n	8001e3a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	2b04      	cmp	r3, #4
 8001e24:	d107      	bne.n	8001e36 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e34:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	e02b      	b.n	8001e92 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001e3a:	88fb      	ldrh	r3, [r7, #6]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d105      	bne.n	8001e4c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e40:	893b      	ldrh	r3, [r7, #8]
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	611a      	str	r2, [r3, #16]
 8001e4a:	e021      	b.n	8001e90 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001e4c:	893b      	ldrh	r3, [r7, #8]
 8001e4e:	0a1b      	lsrs	r3, r3, #8
 8001e50:	b29b      	uxth	r3, r3
 8001e52:	b2da      	uxtb	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e5c:	6a39      	ldr	r1, [r7, #32]
 8001e5e:	68f8      	ldr	r0, [r7, #12]
 8001e60:	f000 fa20 	bl	80022a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00d      	beq.n	8001e86 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6e:	2b04      	cmp	r3, #4
 8001e70:	d107      	bne.n	8001e82 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001e80:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e005      	b.n	8001e92 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001e86:	893b      	ldrh	r3, [r7, #8]
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001e90:	2300      	movs	r3, #0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	00010002 	.word	0x00010002

08001ea0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b088      	sub	sp, #32
 8001ea4:	af02      	add	r7, sp, #8
 8001ea6:	60f8      	str	r0, [r7, #12]
 8001ea8:	4608      	mov	r0, r1
 8001eaa:	4611      	mov	r1, r2
 8001eac:	461a      	mov	r2, r3
 8001eae:	4603      	mov	r3, r0
 8001eb0:	817b      	strh	r3, [r7, #10]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	813b      	strh	r3, [r7, #8]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8001ec8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ed8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	6a3b      	ldr	r3, [r7, #32]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ee6:	68f8      	ldr	r0, [r7, #12]
 8001ee8:	f000 f8c2 	bl	8002070 <I2C_WaitOnFlagUntilTimeout>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00d      	beq.n	8001f0e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001efc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f00:	d103      	bne.n	8001f0a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f08:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e0aa      	b.n	8002064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f0e:	897b      	ldrh	r3, [r7, #10]
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001f1c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f20:	6a3a      	ldr	r2, [r7, #32]
 8001f22:	4952      	ldr	r1, [pc, #328]	@ (800206c <I2C_RequestMemoryRead+0x1cc>)
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f000 f91d 	bl	8002164 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d001      	beq.n	8001f34 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e097      	b.n	8002064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f34:	2300      	movs	r3, #0
 8001f36:	617b      	str	r3, [r7, #20]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	617b      	str	r3, [r7, #20]
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	617b      	str	r3, [r7, #20]
 8001f48:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f4c:	6a39      	ldr	r1, [r7, #32]
 8001f4e:	68f8      	ldr	r0, [r7, #12]
 8001f50:	f000 f9a8 	bl	80022a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00d      	beq.n	8001f76 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d107      	bne.n	8001f72 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001f70:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e076      	b.n	8002064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d105      	bne.n	8001f88 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f7c:	893b      	ldrh	r3, [r7, #8]
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	611a      	str	r2, [r3, #16]
 8001f86:	e021      	b.n	8001fcc <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f88:	893b      	ldrh	r3, [r7, #8]
 8001f8a:	0a1b      	lsrs	r3, r3, #8
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f98:	6a39      	ldr	r1, [r7, #32]
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f000 f982 	bl	80022a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00d      	beq.n	8001fc2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001faa:	2b04      	cmp	r3, #4
 8001fac:	d107      	bne.n	8001fbe <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001fbc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e050      	b.n	8002064 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fc2:	893b      	ldrh	r3, [r7, #8]
 8001fc4:	b2da      	uxtb	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fce:	6a39      	ldr	r1, [r7, #32]
 8001fd0:	68f8      	ldr	r0, [r7, #12]
 8001fd2:	f000 f967 	bl	80022a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d00d      	beq.n	8001ff8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe0:	2b04      	cmp	r3, #4
 8001fe2:	d107      	bne.n	8001ff4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001ff2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e035      	b.n	8002064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002006:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	6a3b      	ldr	r3, [r7, #32]
 800200e:	2200      	movs	r2, #0
 8002010:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002014:	68f8      	ldr	r0, [r7, #12]
 8002016:	f000 f82b 	bl	8002070 <I2C_WaitOnFlagUntilTimeout>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00d      	beq.n	800203c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800202a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800202e:	d103      	bne.n	8002038 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002036:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e013      	b.n	8002064 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800203c:	897b      	ldrh	r3, [r7, #10]
 800203e:	b2db      	uxtb	r3, r3
 8002040:	f043 0301 	orr.w	r3, r3, #1
 8002044:	b2da      	uxtb	r2, r3
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800204c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204e:	6a3a      	ldr	r2, [r7, #32]
 8002050:	4906      	ldr	r1, [pc, #24]	@ (800206c <I2C_RequestMemoryRead+0x1cc>)
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f000 f886 	bl	8002164 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e000      	b.n	8002064 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002062:	2300      	movs	r3, #0
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	00010002 	.word	0x00010002

08002070 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	60f8      	str	r0, [r7, #12]
 8002078:	60b9      	str	r1, [r7, #8]
 800207a:	603b      	str	r3, [r7, #0]
 800207c:	4613      	mov	r3, r2
 800207e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002080:	e048      	b.n	8002114 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002088:	d044      	beq.n	8002114 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800208a:	f7fe fedb 	bl	8000e44 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d302      	bcc.n	80020a0 <I2C_WaitOnFlagUntilTimeout+0x30>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d139      	bne.n	8002114 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	0c1b      	lsrs	r3, r3, #16
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d10d      	bne.n	80020c6 <I2C_WaitOnFlagUntilTimeout+0x56>
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	695b      	ldr	r3, [r3, #20]
 80020b0:	43da      	mvns	r2, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	4013      	ands	r3, r2
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	bf0c      	ite	eq
 80020bc:	2301      	moveq	r3, #1
 80020be:	2300      	movne	r3, #0
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	461a      	mov	r2, r3
 80020c4:	e00c      	b.n	80020e0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	43da      	mvns	r2, r3
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	4013      	ands	r3, r2
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	bf0c      	ite	eq
 80020d8:	2301      	moveq	r3, #1
 80020da:	2300      	movne	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	461a      	mov	r2, r3
 80020e0:	79fb      	ldrb	r3, [r7, #7]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d116      	bne.n	8002114 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2220      	movs	r2, #32
 80020f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2200      	movs	r2, #0
 80020f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002100:	f043 0220 	orr.w	r2, r3, #32
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e023      	b.n	800215c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	0c1b      	lsrs	r3, r3, #16
 8002118:	b2db      	uxtb	r3, r3
 800211a:	2b01      	cmp	r3, #1
 800211c:	d10d      	bne.n	800213a <I2C_WaitOnFlagUntilTimeout+0xca>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	695b      	ldr	r3, [r3, #20]
 8002124:	43da      	mvns	r2, r3
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	4013      	ands	r3, r2
 800212a:	b29b      	uxth	r3, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	bf0c      	ite	eq
 8002130:	2301      	moveq	r3, #1
 8002132:	2300      	movne	r3, #0
 8002134:	b2db      	uxtb	r3, r3
 8002136:	461a      	mov	r2, r3
 8002138:	e00c      	b.n	8002154 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	699b      	ldr	r3, [r3, #24]
 8002140:	43da      	mvns	r2, r3
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	4013      	ands	r3, r2
 8002146:	b29b      	uxth	r3, r3
 8002148:	2b00      	cmp	r3, #0
 800214a:	bf0c      	ite	eq
 800214c:	2301      	moveq	r3, #1
 800214e:	2300      	movne	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	461a      	mov	r2, r3
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	429a      	cmp	r2, r3
 8002158:	d093      	beq.n	8002082 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002172:	e071      	b.n	8002258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	695b      	ldr	r3, [r3, #20]
 800217a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800217e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002182:	d123      	bne.n	80021cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002192:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800219c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	2220      	movs	r2, #32
 80021a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b8:	f043 0204 	orr.w	r2, r3, #4
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e067      	b.n	800229c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80021d2:	d041      	beq.n	8002258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021d4:	f7fe fe36 	bl	8000e44 <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	429a      	cmp	r2, r3
 80021e2:	d302      	bcc.n	80021ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d136      	bne.n	8002258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	0c1b      	lsrs	r3, r3, #16
 80021ee:	b2db      	uxtb	r3, r3
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d10c      	bne.n	800220e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	695b      	ldr	r3, [r3, #20]
 80021fa:	43da      	mvns	r2, r3
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	4013      	ands	r3, r2
 8002200:	b29b      	uxth	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	bf14      	ite	ne
 8002206:	2301      	movne	r3, #1
 8002208:	2300      	moveq	r3, #0
 800220a:	b2db      	uxtb	r3, r3
 800220c:	e00b      	b.n	8002226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	43da      	mvns	r2, r3
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	4013      	ands	r3, r2
 800221a:	b29b      	uxth	r3, r3
 800221c:	2b00      	cmp	r3, #0
 800221e:	bf14      	ite	ne
 8002220:	2301      	movne	r3, #1
 8002222:	2300      	moveq	r3, #0
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b00      	cmp	r3, #0
 8002228:	d016      	beq.n	8002258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2200      	movs	r2, #0
 800222e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2220      	movs	r2, #32
 8002234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002244:	f043 0220 	orr.w	r2, r3, #32
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2200      	movs	r2, #0
 8002250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	e021      	b.n	800229c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	0c1b      	lsrs	r3, r3, #16
 800225c:	b2db      	uxtb	r3, r3
 800225e:	2b01      	cmp	r3, #1
 8002260:	d10c      	bne.n	800227c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	695b      	ldr	r3, [r3, #20]
 8002268:	43da      	mvns	r2, r3
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	4013      	ands	r3, r2
 800226e:	b29b      	uxth	r3, r3
 8002270:	2b00      	cmp	r3, #0
 8002272:	bf14      	ite	ne
 8002274:	2301      	movne	r3, #1
 8002276:	2300      	moveq	r3, #0
 8002278:	b2db      	uxtb	r3, r3
 800227a:	e00b      	b.n	8002294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	699b      	ldr	r3, [r3, #24]
 8002282:	43da      	mvns	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	4013      	ands	r3, r2
 8002288:	b29b      	uxth	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	bf14      	ite	ne
 800228e:	2301      	movne	r3, #1
 8002290:	2300      	moveq	r3, #0
 8002292:	b2db      	uxtb	r3, r3
 8002294:	2b00      	cmp	r3, #0
 8002296:	f47f af6d 	bne.w	8002174 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	3710      	adds	r7, #16
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b084      	sub	sp, #16
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	60f8      	str	r0, [r7, #12]
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022b0:	e034      	b.n	800231c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 f8e3 	bl	800247e <I2C_IsAcknowledgeFailed>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e034      	b.n	800232c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80022c8:	d028      	beq.n	800231c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ca:	f7fe fdbb 	bl	8000e44 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	68ba      	ldr	r2, [r7, #8]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	d302      	bcc.n	80022e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d11d      	bne.n	800231c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022ea:	2b80      	cmp	r3, #128	@ 0x80
 80022ec:	d016      	beq.n	800231c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2220      	movs	r2, #32
 80022f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2200      	movs	r2, #0
 8002300:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002308:	f043 0220 	orr.w	r2, r3, #32
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2200      	movs	r2, #0
 8002314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002318:	2301      	movs	r3, #1
 800231a:	e007      	b.n	800232c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	695b      	ldr	r3, [r3, #20]
 8002322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002326:	2b80      	cmp	r3, #128	@ 0x80
 8002328:	d1c3      	bne.n	80022b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800232a:	2300      	movs	r3, #0
}
 800232c:	4618      	mov	r0, r3
 800232e:	3710      	adds	r7, #16
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002340:	e034      	b.n	80023ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 f89b 	bl	800247e <I2C_IsAcknowledgeFailed>
 8002348:	4603      	mov	r3, r0
 800234a:	2b00      	cmp	r3, #0
 800234c:	d001      	beq.n	8002352 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e034      	b.n	80023bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002358:	d028      	beq.n	80023ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800235a:	f7fe fd73 	bl	8000e44 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	429a      	cmp	r2, r3
 8002368:	d302      	bcc.n	8002370 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d11d      	bne.n	80023ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	2b04      	cmp	r3, #4
 800237c:	d016      	beq.n	80023ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2200      	movs	r2, #0
 8002382:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2220      	movs	r2, #32
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002398:	f043 0220 	orr.w	r2, r3, #32
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e007      	b.n	80023bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	695b      	ldr	r3, [r3, #20]
 80023b2:	f003 0304 	and.w	r3, r3, #4
 80023b6:	2b04      	cmp	r3, #4
 80023b8:	d1c3      	bne.n	8002342 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80023ba:	2300      	movs	r3, #0
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3710      	adds	r7, #16
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80023d0:	e049      	b.n	8002466 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	695b      	ldr	r3, [r3, #20]
 80023d8:	f003 0310 	and.w	r3, r3, #16
 80023dc:	2b10      	cmp	r3, #16
 80023de:	d119      	bne.n	8002414 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f06f 0210 	mvn.w	r2, #16
 80023e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2200      	movs	r2, #0
 80023ee:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2200      	movs	r2, #0
 800240c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e030      	b.n	8002476 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002414:	f7fe fd16 	bl	8000e44 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	429a      	cmp	r2, r3
 8002422:	d302      	bcc.n	800242a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002424:	68bb      	ldr	r3, [r7, #8]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d11d      	bne.n	8002466 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	695b      	ldr	r3, [r3, #20]
 8002430:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002434:	2b40      	cmp	r3, #64	@ 0x40
 8002436:	d016      	beq.n	8002466 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2220      	movs	r2, #32
 8002442:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002452:	f043 0220 	orr.w	r2, r3, #32
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e007      	b.n	8002476 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002470:	2b40      	cmp	r3, #64	@ 0x40
 8002472:	d1ae      	bne.n	80023d2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800247e:	b480      	push	{r7}
 8002480:	b083      	sub	sp, #12
 8002482:	af00      	add	r7, sp, #0
 8002484:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002490:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002494:	d11b      	bne.n	80024ce <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800249e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2200      	movs	r2, #0
 80024a4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2220      	movs	r2, #32
 80024aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ba:	f043 0204 	orr.w	r2, r3, #4
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e000      	b.n	80024d0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	370c      	adds	r7, #12
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bc80      	pop	{r7}
 80024d8:	4770      	bx	lr
	...

080024dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b086      	sub	sp, #24
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e272      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 8087 	beq.w	800260a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024fc:	4b92      	ldr	r3, [pc, #584]	@ (8002748 <HAL_RCC_OscConfig+0x26c>)
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f003 030c 	and.w	r3, r3, #12
 8002504:	2b04      	cmp	r3, #4
 8002506:	d00c      	beq.n	8002522 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002508:	4b8f      	ldr	r3, [pc, #572]	@ (8002748 <HAL_RCC_OscConfig+0x26c>)
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 030c 	and.w	r3, r3, #12
 8002510:	2b08      	cmp	r3, #8
 8002512:	d112      	bne.n	800253a <HAL_RCC_OscConfig+0x5e>
 8002514:	4b8c      	ldr	r3, [pc, #560]	@ (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800251c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002520:	d10b      	bne.n	800253a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002522:	4b89      	ldr	r3, [pc, #548]	@ (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d06c      	beq.n	8002608 <HAL_RCC_OscConfig+0x12c>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d168      	bne.n	8002608 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e24c      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002542:	d106      	bne.n	8002552 <HAL_RCC_OscConfig+0x76>
 8002544:	4b80      	ldr	r3, [pc, #512]	@ (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a7f      	ldr	r2, [pc, #508]	@ (8002748 <HAL_RCC_OscConfig+0x26c>)
 800254a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	e02e      	b.n	80025b0 <HAL_RCC_OscConfig+0xd4>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10c      	bne.n	8002574 <HAL_RCC_OscConfig+0x98>
 800255a:	4b7b      	ldr	r3, [pc, #492]	@ (8002748 <HAL_RCC_OscConfig+0x26c>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a7a      	ldr	r2, [pc, #488]	@ (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002560:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	4b78      	ldr	r3, [pc, #480]	@ (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a77      	ldr	r2, [pc, #476]	@ (8002748 <HAL_RCC_OscConfig+0x26c>)
 800256c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	e01d      	b.n	80025b0 <HAL_RCC_OscConfig+0xd4>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800257c:	d10c      	bne.n	8002598 <HAL_RCC_OscConfig+0xbc>
 800257e:	4b72      	ldr	r3, [pc, #456]	@ (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a71      	ldr	r2, [pc, #452]	@ (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002584:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	4b6f      	ldr	r3, [pc, #444]	@ (8002748 <HAL_RCC_OscConfig+0x26c>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a6e      	ldr	r2, [pc, #440]	@ (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002590:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	e00b      	b.n	80025b0 <HAL_RCC_OscConfig+0xd4>
 8002598:	4b6b      	ldr	r3, [pc, #428]	@ (8002748 <HAL_RCC_OscConfig+0x26c>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a6a      	ldr	r2, [pc, #424]	@ (8002748 <HAL_RCC_OscConfig+0x26c>)
 800259e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	4b68      	ldr	r3, [pc, #416]	@ (8002748 <HAL_RCC_OscConfig+0x26c>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a67      	ldr	r2, [pc, #412]	@ (8002748 <HAL_RCC_OscConfig+0x26c>)
 80025aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d013      	beq.n	80025e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b8:	f7fe fc44 	bl	8000e44 <HAL_GetTick>
 80025bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c0:	f7fe fc40 	bl	8000e44 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b64      	cmp	r3, #100	@ 0x64
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e200      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025d2:	4b5d      	ldr	r3, [pc, #372]	@ (8002748 <HAL_RCC_OscConfig+0x26c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0xe4>
 80025de:	e014      	b.n	800260a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025e0:	f7fe fc30 	bl	8000e44 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e8:	f7fe fc2c 	bl	8000e44 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b64      	cmp	r3, #100	@ 0x64
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e1ec      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025fa:	4b53      	ldr	r3, [pc, #332]	@ (8002748 <HAL_RCC_OscConfig+0x26c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x10c>
 8002606:	e000      	b.n	800260a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d063      	beq.n	80026de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002616:	4b4c      	ldr	r3, [pc, #304]	@ (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00b      	beq.n	800263a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002622:	4b49      	ldr	r3, [pc, #292]	@ (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f003 030c 	and.w	r3, r3, #12
 800262a:	2b08      	cmp	r3, #8
 800262c:	d11c      	bne.n	8002668 <HAL_RCC_OscConfig+0x18c>
 800262e:	4b46      	ldr	r3, [pc, #280]	@ (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d116      	bne.n	8002668 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800263a:	4b43      	ldr	r3, [pc, #268]	@ (8002748 <HAL_RCC_OscConfig+0x26c>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0302 	and.w	r3, r3, #2
 8002642:	2b00      	cmp	r3, #0
 8002644:	d005      	beq.n	8002652 <HAL_RCC_OscConfig+0x176>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691b      	ldr	r3, [r3, #16]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d001      	beq.n	8002652 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e1c0      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002652:	4b3d      	ldr	r3, [pc, #244]	@ (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	00db      	lsls	r3, r3, #3
 8002660:	4939      	ldr	r1, [pc, #228]	@ (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002662:	4313      	orrs	r3, r2
 8002664:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002666:	e03a      	b.n	80026de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d020      	beq.n	80026b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002670:	4b36      	ldr	r3, [pc, #216]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 8002672:	2201      	movs	r2, #1
 8002674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002676:	f7fe fbe5 	bl	8000e44 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267c:	e008      	b.n	8002690 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800267e:	f7fe fbe1 	bl	8000e44 <HAL_GetTick>
 8002682:	4602      	mov	r2, r0
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	1ad3      	subs	r3, r2, r3
 8002688:	2b02      	cmp	r3, #2
 800268a:	d901      	bls.n	8002690 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800268c:	2303      	movs	r3, #3
 800268e:	e1a1      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002690:	4b2d      	ldr	r3, [pc, #180]	@ (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f003 0302 	and.w	r3, r3, #2
 8002698:	2b00      	cmp	r3, #0
 800269a:	d0f0      	beq.n	800267e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269c:	4b2a      	ldr	r3, [pc, #168]	@ (8002748 <HAL_RCC_OscConfig+0x26c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	00db      	lsls	r3, r3, #3
 80026aa:	4927      	ldr	r1, [pc, #156]	@ (8002748 <HAL_RCC_OscConfig+0x26c>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	600b      	str	r3, [r1, #0]
 80026b0:	e015      	b.n	80026de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026b2:	4b26      	ldr	r3, [pc, #152]	@ (800274c <HAL_RCC_OscConfig+0x270>)
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b8:	f7fe fbc4 	bl	8000e44 <HAL_GetTick>
 80026bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026be:	e008      	b.n	80026d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c0:	f7fe fbc0 	bl	8000e44 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d901      	bls.n	80026d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80026ce:	2303      	movs	r3, #3
 80026d0:	e180      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d2:	4b1d      	ldr	r3, [pc, #116]	@ (8002748 <HAL_RCC_OscConfig+0x26c>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d1f0      	bne.n	80026c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0308 	and.w	r3, r3, #8
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d03a      	beq.n	8002760 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d019      	beq.n	8002726 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026f2:	4b17      	ldr	r3, [pc, #92]	@ (8002750 <HAL_RCC_OscConfig+0x274>)
 80026f4:	2201      	movs	r2, #1
 80026f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f8:	f7fe fba4 	bl	8000e44 <HAL_GetTick>
 80026fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026fe:	e008      	b.n	8002712 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002700:	f7fe fba0 	bl	8000e44 <HAL_GetTick>
 8002704:	4602      	mov	r2, r0
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	1ad3      	subs	r3, r2, r3
 800270a:	2b02      	cmp	r3, #2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e160      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002712:	4b0d      	ldr	r3, [pc, #52]	@ (8002748 <HAL_RCC_OscConfig+0x26c>)
 8002714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	2b00      	cmp	r3, #0
 800271c:	d0f0      	beq.n	8002700 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800271e:	2001      	movs	r0, #1
 8002720:	f000 faba 	bl	8002c98 <RCC_Delay>
 8002724:	e01c      	b.n	8002760 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002726:	4b0a      	ldr	r3, [pc, #40]	@ (8002750 <HAL_RCC_OscConfig+0x274>)
 8002728:	2200      	movs	r2, #0
 800272a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800272c:	f7fe fb8a 	bl	8000e44 <HAL_GetTick>
 8002730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002732:	e00f      	b.n	8002754 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002734:	f7fe fb86 	bl	8000e44 <HAL_GetTick>
 8002738:	4602      	mov	r2, r0
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	2b02      	cmp	r3, #2
 8002740:	d908      	bls.n	8002754 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e146      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
 8002746:	bf00      	nop
 8002748:	40021000 	.word	0x40021000
 800274c:	42420000 	.word	0x42420000
 8002750:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002754:	4b92      	ldr	r3, [pc, #584]	@ (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1e9      	bne.n	8002734 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 0304 	and.w	r3, r3, #4
 8002768:	2b00      	cmp	r3, #0
 800276a:	f000 80a6 	beq.w	80028ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800276e:	2300      	movs	r3, #0
 8002770:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002772:	4b8b      	ldr	r3, [pc, #556]	@ (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10d      	bne.n	800279a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800277e:	4b88      	ldr	r3, [pc, #544]	@ (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002780:	69db      	ldr	r3, [r3, #28]
 8002782:	4a87      	ldr	r2, [pc, #540]	@ (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002784:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002788:	61d3      	str	r3, [r2, #28]
 800278a:	4b85      	ldr	r3, [pc, #532]	@ (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 800278c:	69db      	ldr	r3, [r3, #28]
 800278e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002796:	2301      	movs	r3, #1
 8002798:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279a:	4b82      	ldr	r3, [pc, #520]	@ (80029a4 <HAL_RCC_OscConfig+0x4c8>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d118      	bne.n	80027d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027a6:	4b7f      	ldr	r3, [pc, #508]	@ (80029a4 <HAL_RCC_OscConfig+0x4c8>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a7e      	ldr	r2, [pc, #504]	@ (80029a4 <HAL_RCC_OscConfig+0x4c8>)
 80027ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027b2:	f7fe fb47 	bl	8000e44 <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ba:	f7fe fb43 	bl	8000e44 <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b64      	cmp	r3, #100	@ 0x64
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e103      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027cc:	4b75      	ldr	r3, [pc, #468]	@ (80029a4 <HAL_RCC_OscConfig+0x4c8>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d106      	bne.n	80027ee <HAL_RCC_OscConfig+0x312>
 80027e0:	4b6f      	ldr	r3, [pc, #444]	@ (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	4a6e      	ldr	r2, [pc, #440]	@ (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 80027e6:	f043 0301 	orr.w	r3, r3, #1
 80027ea:	6213      	str	r3, [r2, #32]
 80027ec:	e02d      	b.n	800284a <HAL_RCC_OscConfig+0x36e>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	68db      	ldr	r3, [r3, #12]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10c      	bne.n	8002810 <HAL_RCC_OscConfig+0x334>
 80027f6:	4b6a      	ldr	r3, [pc, #424]	@ (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	4a69      	ldr	r2, [pc, #420]	@ (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 80027fc:	f023 0301 	bic.w	r3, r3, #1
 8002800:	6213      	str	r3, [r2, #32]
 8002802:	4b67      	ldr	r3, [pc, #412]	@ (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	4a66      	ldr	r2, [pc, #408]	@ (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002808:	f023 0304 	bic.w	r3, r3, #4
 800280c:	6213      	str	r3, [r2, #32]
 800280e:	e01c      	b.n	800284a <HAL_RCC_OscConfig+0x36e>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	2b05      	cmp	r3, #5
 8002816:	d10c      	bne.n	8002832 <HAL_RCC_OscConfig+0x356>
 8002818:	4b61      	ldr	r3, [pc, #388]	@ (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	4a60      	ldr	r2, [pc, #384]	@ (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 800281e:	f043 0304 	orr.w	r3, r3, #4
 8002822:	6213      	str	r3, [r2, #32]
 8002824:	4b5e      	ldr	r3, [pc, #376]	@ (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002826:	6a1b      	ldr	r3, [r3, #32]
 8002828:	4a5d      	ldr	r2, [pc, #372]	@ (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 800282a:	f043 0301 	orr.w	r3, r3, #1
 800282e:	6213      	str	r3, [r2, #32]
 8002830:	e00b      	b.n	800284a <HAL_RCC_OscConfig+0x36e>
 8002832:	4b5b      	ldr	r3, [pc, #364]	@ (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002834:	6a1b      	ldr	r3, [r3, #32]
 8002836:	4a5a      	ldr	r2, [pc, #360]	@ (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002838:	f023 0301 	bic.w	r3, r3, #1
 800283c:	6213      	str	r3, [r2, #32]
 800283e:	4b58      	ldr	r3, [pc, #352]	@ (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	4a57      	ldr	r2, [pc, #348]	@ (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002844:	f023 0304 	bic.w	r3, r3, #4
 8002848:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d015      	beq.n	800287e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002852:	f7fe faf7 	bl	8000e44 <HAL_GetTick>
 8002856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002858:	e00a      	b.n	8002870 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285a:	f7fe faf3 	bl	8000e44 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002868:	4293      	cmp	r3, r2
 800286a:	d901      	bls.n	8002870 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800286c:	2303      	movs	r3, #3
 800286e:	e0b1      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002870:	4b4b      	ldr	r3, [pc, #300]	@ (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002872:	6a1b      	ldr	r3, [r3, #32]
 8002874:	f003 0302 	and.w	r3, r3, #2
 8002878:	2b00      	cmp	r3, #0
 800287a:	d0ee      	beq.n	800285a <HAL_RCC_OscConfig+0x37e>
 800287c:	e014      	b.n	80028a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287e:	f7fe fae1 	bl	8000e44 <HAL_GetTick>
 8002882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002884:	e00a      	b.n	800289c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002886:	f7fe fadd 	bl	8000e44 <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002894:	4293      	cmp	r3, r2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e09b      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800289c:	4b40      	ldr	r3, [pc, #256]	@ (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	f003 0302 	and.w	r3, r3, #2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1ee      	bne.n	8002886 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80028a8:	7dfb      	ldrb	r3, [r7, #23]
 80028aa:	2b01      	cmp	r3, #1
 80028ac:	d105      	bne.n	80028ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ae:	4b3c      	ldr	r3, [pc, #240]	@ (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 80028b0:	69db      	ldr	r3, [r3, #28]
 80028b2:	4a3b      	ldr	r2, [pc, #236]	@ (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 80028b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	f000 8087 	beq.w	80029d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028c4:	4b36      	ldr	r3, [pc, #216]	@ (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f003 030c 	and.w	r3, r3, #12
 80028cc:	2b08      	cmp	r3, #8
 80028ce:	d061      	beq.n	8002994 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	69db      	ldr	r3, [r3, #28]
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d146      	bne.n	8002966 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028d8:	4b33      	ldr	r3, [pc, #204]	@ (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 80028da:	2200      	movs	r2, #0
 80028dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028de:	f7fe fab1 	bl	8000e44 <HAL_GetTick>
 80028e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028e4:	e008      	b.n	80028f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028e6:	f7fe faad 	bl	8000e44 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d901      	bls.n	80028f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	e06d      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028f8:	4b29      	ldr	r3, [pc, #164]	@ (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d1f0      	bne.n	80028e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a1b      	ldr	r3, [r3, #32]
 8002908:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800290c:	d108      	bne.n	8002920 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800290e:	4b24      	ldr	r3, [pc, #144]	@ (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	4921      	ldr	r1, [pc, #132]	@ (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 800291c:	4313      	orrs	r3, r2
 800291e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002920:	4b1f      	ldr	r3, [pc, #124]	@ (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6a19      	ldr	r1, [r3, #32]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002930:	430b      	orrs	r3, r1
 8002932:	491b      	ldr	r1, [pc, #108]	@ (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002934:	4313      	orrs	r3, r2
 8002936:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002938:	4b1b      	ldr	r3, [pc, #108]	@ (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 800293a:	2201      	movs	r2, #1
 800293c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293e:	f7fe fa81 	bl	8000e44 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002946:	f7fe fa7d 	bl	8000e44 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e03d      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002958:	4b11      	ldr	r3, [pc, #68]	@ (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0f0      	beq.n	8002946 <HAL_RCC_OscConfig+0x46a>
 8002964:	e035      	b.n	80029d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002966:	4b10      	ldr	r3, [pc, #64]	@ (80029a8 <HAL_RCC_OscConfig+0x4cc>)
 8002968:	2200      	movs	r2, #0
 800296a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296c:	f7fe fa6a 	bl	8000e44 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002974:	f7fe fa66 	bl	8000e44 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e026      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002986:	4b06      	ldr	r3, [pc, #24]	@ (80029a0 <HAL_RCC_OscConfig+0x4c4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x498>
 8002992:	e01e      	b.n	80029d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	69db      	ldr	r3, [r3, #28]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d107      	bne.n	80029ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e019      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40007000 	.word	0x40007000
 80029a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80029ac:	4b0b      	ldr	r3, [pc, #44]	@ (80029dc <HAL_RCC_OscConfig+0x500>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6a1b      	ldr	r3, [r3, #32]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d106      	bne.n	80029ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ca:	429a      	cmp	r2, r3
 80029cc:	d001      	beq.n	80029d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40021000 	.word	0x40021000

080029e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d101      	bne.n	80029f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	e0d0      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029f4:	4b6a      	ldr	r3, [pc, #424]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1c0>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 0307 	and.w	r3, r3, #7
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d910      	bls.n	8002a24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a02:	4b67      	ldr	r3, [pc, #412]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 0207 	bic.w	r2, r3, #7
 8002a0a:	4965      	ldr	r1, [pc, #404]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a12:	4b63      	ldr	r3, [pc, #396]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0307 	and.w	r3, r3, #7
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e0b8      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d020      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d005      	beq.n	8002a48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a3c:	4b59      	ldr	r3, [pc, #356]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	4a58      	ldr	r2, [pc, #352]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002a46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0308 	and.w	r3, r3, #8
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d005      	beq.n	8002a60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a54:	4b53      	ldr	r3, [pc, #332]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	4a52      	ldr	r2, [pc, #328]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a5a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002a5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a60:	4b50      	ldr	r3, [pc, #320]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	494d      	ldr	r1, [pc, #308]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0301 	and.w	r3, r3, #1
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d040      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b01      	cmp	r3, #1
 8002a84:	d107      	bne.n	8002a96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a86:	4b47      	ldr	r3, [pc, #284]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d115      	bne.n	8002abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e07f      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d107      	bne.n	8002aae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a9e:	4b41      	ldr	r3, [pc, #260]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d109      	bne.n	8002abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e073      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002aae:	4b3d      	ldr	r3, [pc, #244]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0302 	and.w	r3, r3, #2
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e06b      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002abe:	4b39      	ldr	r3, [pc, #228]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f023 0203 	bic.w	r2, r3, #3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	685b      	ldr	r3, [r3, #4]
 8002aca:	4936      	ldr	r1, [pc, #216]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ad0:	f7fe f9b8 	bl	8000e44 <HAL_GetTick>
 8002ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad6:	e00a      	b.n	8002aee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ad8:	f7fe f9b4 	bl	8000e44 <HAL_GetTick>
 8002adc:	4602      	mov	r2, r0
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e053      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aee:	4b2d      	ldr	r3, [pc, #180]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	f003 020c 	and.w	r2, r3, #12
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d1eb      	bne.n	8002ad8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b00:	4b27      	ldr	r3, [pc, #156]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d210      	bcs.n	8002b30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b0e:	4b24      	ldr	r3, [pc, #144]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f023 0207 	bic.w	r2, r3, #7
 8002b16:	4922      	ldr	r1, [pc, #136]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b1e:	4b20      	ldr	r3, [pc, #128]	@ (8002ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	683a      	ldr	r2, [r7, #0]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d001      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e032      	b.n	8002b96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0304 	and.w	r3, r3, #4
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b3c:	4b19      	ldr	r3, [pc, #100]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	4916      	ldr	r1, [pc, #88]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d009      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b5a:	4b12      	ldr	r3, [pc, #72]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	00db      	lsls	r3, r3, #3
 8002b68:	490e      	ldr	r1, [pc, #56]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b6e:	f000 f821 	bl	8002bb4 <HAL_RCC_GetSysClockFreq>
 8002b72:	4602      	mov	r2, r0
 8002b74:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	091b      	lsrs	r3, r3, #4
 8002b7a:	f003 030f 	and.w	r3, r3, #15
 8002b7e:	490a      	ldr	r1, [pc, #40]	@ (8002ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8002b80:	5ccb      	ldrb	r3, [r1, r3]
 8002b82:	fa22 f303 	lsr.w	r3, r2, r3
 8002b86:	4a09      	ldr	r2, [pc, #36]	@ (8002bac <HAL_RCC_ClockConfig+0x1cc>)
 8002b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b8a:	4b09      	ldr	r3, [pc, #36]	@ (8002bb0 <HAL_RCC_ClockConfig+0x1d0>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7fe f916 	bl	8000dc0 <HAL_InitTick>

  return HAL_OK;
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3710      	adds	r7, #16
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}
 8002b9e:	bf00      	nop
 8002ba0:	40022000 	.word	0x40022000
 8002ba4:	40021000 	.word	0x40021000
 8002ba8:	08002d94 	.word	0x08002d94
 8002bac:	20000000 	.word	0x20000000
 8002bb0:	20000004 	.word	0x20000004

08002bb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b087      	sub	sp, #28
 8002bb8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60fb      	str	r3, [r7, #12]
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	60bb      	str	r3, [r7, #8]
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	617b      	str	r3, [r7, #20]
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bce:	4b1e      	ldr	r3, [pc, #120]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x94>)
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f003 030c 	and.w	r3, r3, #12
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	d002      	beq.n	8002be4 <HAL_RCC_GetSysClockFreq+0x30>
 8002bde:	2b08      	cmp	r3, #8
 8002be0:	d003      	beq.n	8002bea <HAL_RCC_GetSysClockFreq+0x36>
 8002be2:	e027      	b.n	8002c34 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002be4:	4b19      	ldr	r3, [pc, #100]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x98>)
 8002be6:	613b      	str	r3, [r7, #16]
      break;
 8002be8:	e027      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	0c9b      	lsrs	r3, r3, #18
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	4a17      	ldr	r2, [pc, #92]	@ (8002c50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002bf4:	5cd3      	ldrb	r3, [r2, r3]
 8002bf6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d010      	beq.n	8002c24 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c02:	4b11      	ldr	r3, [pc, #68]	@ (8002c48 <HAL_RCC_GetSysClockFreq+0x94>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	0c5b      	lsrs	r3, r3, #17
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	4a11      	ldr	r2, [pc, #68]	@ (8002c54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002c0e:	5cd3      	ldrb	r3, [r2, r3]
 8002c10:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a0d      	ldr	r2, [pc, #52]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x98>)
 8002c16:	fb03 f202 	mul.w	r2, r3, r2
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c20:	617b      	str	r3, [r7, #20]
 8002c22:	e004      	b.n	8002c2e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a0c      	ldr	r2, [pc, #48]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002c28:	fb02 f303 	mul.w	r3, r2, r3
 8002c2c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	613b      	str	r3, [r7, #16]
      break;
 8002c32:	e002      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c34:	4b05      	ldr	r3, [pc, #20]	@ (8002c4c <HAL_RCC_GetSysClockFreq+0x98>)
 8002c36:	613b      	str	r3, [r7, #16]
      break;
 8002c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c3a:	693b      	ldr	r3, [r7, #16]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	371c      	adds	r7, #28
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bc80      	pop	{r7}
 8002c44:	4770      	bx	lr
 8002c46:	bf00      	nop
 8002c48:	40021000 	.word	0x40021000
 8002c4c:	007a1200 	.word	0x007a1200
 8002c50:	08002dac 	.word	0x08002dac
 8002c54:	08002dbc 	.word	0x08002dbc
 8002c58:	003d0900 	.word	0x003d0900

08002c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c60:	4b02      	ldr	r3, [pc, #8]	@ (8002c6c <HAL_RCC_GetHCLKFreq+0x10>)
 8002c62:	681b      	ldr	r3, [r3, #0]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr
 8002c6c:	20000000 	.word	0x20000000

08002c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002c74:	f7ff fff2 	bl	8002c5c <HAL_RCC_GetHCLKFreq>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	4b05      	ldr	r3, [pc, #20]	@ (8002c90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	0a1b      	lsrs	r3, r3, #8
 8002c80:	f003 0307 	and.w	r3, r3, #7
 8002c84:	4903      	ldr	r1, [pc, #12]	@ (8002c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c86:	5ccb      	ldrb	r3, [r1, r3]
 8002c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	bd80      	pop	{r7, pc}
 8002c90:	40021000 	.word	0x40021000
 8002c94:	08002da4 	.word	0x08002da4

08002c98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b085      	sub	sp, #20
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8002ccc <RCC_Delay+0x34>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd0 <RCC_Delay+0x38>)
 8002ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8002caa:	0a5b      	lsrs	r3, r3, #9
 8002cac:	687a      	ldr	r2, [r7, #4]
 8002cae:	fb02 f303 	mul.w	r3, r2, r3
 8002cb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002cb4:	bf00      	nop
  }
  while (Delay --);
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	1e5a      	subs	r2, r3, #1
 8002cba:	60fa      	str	r2, [r7, #12]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d1f9      	bne.n	8002cb4 <RCC_Delay+0x1c>
}
 8002cc0:	bf00      	nop
 8002cc2:	bf00      	nop
 8002cc4:	3714      	adds	r7, #20
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bc80      	pop	{r7}
 8002cca:	4770      	bx	lr
 8002ccc:	20000000 	.word	0x20000000
 8002cd0:	10624dd3 	.word	0x10624dd3

08002cd4 <memset>:
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	4402      	add	r2, r0
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d100      	bne.n	8002cde <memset+0xa>
 8002cdc:	4770      	bx	lr
 8002cde:	f803 1b01 	strb.w	r1, [r3], #1
 8002ce2:	e7f9      	b.n	8002cd8 <memset+0x4>

08002ce4 <__libc_init_array>:
 8002ce4:	b570      	push	{r4, r5, r6, lr}
 8002ce6:	2600      	movs	r6, #0
 8002ce8:	4d0c      	ldr	r5, [pc, #48]	@ (8002d1c <__libc_init_array+0x38>)
 8002cea:	4c0d      	ldr	r4, [pc, #52]	@ (8002d20 <__libc_init_array+0x3c>)
 8002cec:	1b64      	subs	r4, r4, r5
 8002cee:	10a4      	asrs	r4, r4, #2
 8002cf0:	42a6      	cmp	r6, r4
 8002cf2:	d109      	bne.n	8002d08 <__libc_init_array+0x24>
 8002cf4:	f000 f81a 	bl	8002d2c <_init>
 8002cf8:	2600      	movs	r6, #0
 8002cfa:	4d0a      	ldr	r5, [pc, #40]	@ (8002d24 <__libc_init_array+0x40>)
 8002cfc:	4c0a      	ldr	r4, [pc, #40]	@ (8002d28 <__libc_init_array+0x44>)
 8002cfe:	1b64      	subs	r4, r4, r5
 8002d00:	10a4      	asrs	r4, r4, #2
 8002d02:	42a6      	cmp	r6, r4
 8002d04:	d105      	bne.n	8002d12 <__libc_init_array+0x2e>
 8002d06:	bd70      	pop	{r4, r5, r6, pc}
 8002d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d0c:	4798      	blx	r3
 8002d0e:	3601      	adds	r6, #1
 8002d10:	e7ee      	b.n	8002cf0 <__libc_init_array+0xc>
 8002d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d16:	4798      	blx	r3
 8002d18:	3601      	adds	r6, #1
 8002d1a:	e7f2      	b.n	8002d02 <__libc_init_array+0x1e>
 8002d1c:	08002dc0 	.word	0x08002dc0
 8002d20:	08002dc0 	.word	0x08002dc0
 8002d24:	08002dc0 	.word	0x08002dc0
 8002d28:	08002dc4 	.word	0x08002dc4

08002d2c <_init>:
 8002d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d2e:	bf00      	nop
 8002d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d32:	bc08      	pop	{r3}
 8002d34:	469e      	mov	lr, r3
 8002d36:	4770      	bx	lr

08002d38 <_fini>:
 8002d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d3a:	bf00      	nop
 8002d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d3e:	bc08      	pop	{r3}
 8002d40:	469e      	mov	lr, r3
 8002d42:	4770      	bx	lr
