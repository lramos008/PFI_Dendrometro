
PFI_Dendro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004504  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08004614  08004614  00005614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004740  08004740  00006024  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004740  08004740  00006024  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004740  08004740  00006024  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004740  08004740  00005740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004744  08004744  00005744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000024  20000000  08004748  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000024  0800476c  00006024  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  0800476c  0000610c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006024  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009651  00000000  00000000  0000604d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001efb  00000000  00000000  0000f69e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a50  00000000  00000000  000115a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007d6  00000000  00000000  00011ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017261  00000000  00000000  000127c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d91d  00000000  00000000  00029a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000843c3  00000000  00000000  00037344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb707  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a24  00000000  00000000  000bb74c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000be170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000024 	.word	0x20000024
 800012c:	00000000 	.word	0x00000000
 8000130:	080045fc 	.word	0x080045fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000028 	.word	0x20000028
 800014c:	080045fc 	.word	0x080045fc

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	@ 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bae:	f001 f8d5 	bl	8001d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bb2:	f000 f81d 	bl	8000bf0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb6:	f000 f8c5 	bl	8000d44 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000bba:	f000 f85f 	bl	8000c7c <MX_I2C1_Init>
  MX_SPI2_Init();
 8000bbe:	f000 f88b 	bl	8000cd8 <MX_SPI2_Init>
  MX_FATFS_Init();
 8000bc2:	f003 fc2d 	bl	8004420 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  tSht21Status status;
  float relativeHumidity, temperature;
  status = sht21Init();
 8000bc6:	f001 f89b 	bl	8001d00 <sht21Init>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	73fb      	strb	r3, [r7, #15]
  status = sht21GetRelativeHumidity(&relativeHumidity);
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f001 f8a4 	bl	8001d20 <sht21GetRelativeHumidity>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	73fb      	strb	r3, [r7, #15]
  status = sht21GetTemperature(&temperature);
 8000bdc:	1d3b      	adds	r3, r7, #4
 8000bde:	4618      	mov	r0, r3
 8000be0:	f001 f8ad 	bl	8001d3e <sht21GetTemperature>
 8000be4:	4603      	mov	r3, r0
 8000be6:	73fb      	strb	r3, [r7, #15]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_Delay(1);
 8000be8:	2001      	movs	r0, #1
 8000bea:	f001 f919 	bl	8001e20 <HAL_Delay>
 8000bee:	e7fb      	b.n	8000be8 <main+0x40>

08000bf0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b090      	sub	sp, #64	@ 0x40
 8000bf4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bf6:	f107 0318 	add.w	r3, r7, #24
 8000bfa:	2228      	movs	r2, #40	@ 0x28
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f003 fccf 	bl	80045a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c04:	1d3b      	adds	r3, r7, #4
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]
 8000c0c:	609a      	str	r2, [r3, #8]
 8000c0e:	60da      	str	r2, [r3, #12]
 8000c10:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c12:	2301      	movs	r3, #1
 8000c14:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c16:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c20:	2301      	movs	r3, #1
 8000c22:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c24:	2302      	movs	r3, #2
 8000c26:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000c2e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c34:	f107 0318 	add.w	r3, r7, #24
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f002 fbc9 	bl	80033d0 <HAL_RCC_OscConfig>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d001      	beq.n	8000c48 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000c44:	f000 f8ec 	bl	8000e20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c48:	230f      	movs	r3, #15
 8000c4a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c50:	2300      	movs	r3, #0
 8000c52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c54:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2102      	movs	r1, #2
 8000c62:	4618      	mov	r0, r3
 8000c64:	f002 fe36 	bl	80038d4 <HAL_RCC_ClockConfig>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000c6e:	f000 f8d7 	bl	8000e20 <Error_Handler>
  }
}
 8000c72:	bf00      	nop
 8000c74:	3740      	adds	r7, #64	@ 0x40
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
	...

08000c7c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c80:	4b12      	ldr	r3, [pc, #72]	@ (8000ccc <MX_I2C1_Init+0x50>)
 8000c82:	4a13      	ldr	r2, [pc, #76]	@ (8000cd0 <MX_I2C1_Init+0x54>)
 8000c84:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c86:	4b11      	ldr	r3, [pc, #68]	@ (8000ccc <MX_I2C1_Init+0x50>)
 8000c88:	4a12      	ldr	r2, [pc, #72]	@ (8000cd4 <MX_I2C1_Init+0x58>)
 8000c8a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c8c:	4b0f      	ldr	r3, [pc, #60]	@ (8000ccc <MX_I2C1_Init+0x50>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ccc <MX_I2C1_Init+0x50>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <MX_I2C1_Init+0x50>)
 8000c9a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c9e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8000ccc <MX_I2C1_Init+0x50>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000ca6:	4b09      	ldr	r3, [pc, #36]	@ (8000ccc <MX_I2C1_Init+0x50>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cac:	4b07      	ldr	r3, [pc, #28]	@ (8000ccc <MX_I2C1_Init+0x50>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ccc <MX_I2C1_Init+0x50>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cb8:	4804      	ldr	r0, [pc, #16]	@ (8000ccc <MX_I2C1_Init+0x50>)
 8000cba:	f001 fb55 	bl	8002368 <HAL_I2C_Init>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cc4:	f000 f8ac 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000040 	.word	0x20000040
 8000cd0:	40005400 	.word	0x40005400
 8000cd4:	000186a0 	.word	0x000186a0

08000cd8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000cdc:	4b17      	ldr	r3, [pc, #92]	@ (8000d3c <MX_SPI2_Init+0x64>)
 8000cde:	4a18      	ldr	r2, [pc, #96]	@ (8000d40 <MX_SPI2_Init+0x68>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000ce2:	4b16      	ldr	r3, [pc, #88]	@ (8000d3c <MX_SPI2_Init+0x64>)
 8000ce4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ce8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000cea:	4b14      	ldr	r3, [pc, #80]	@ (8000d3c <MX_SPI2_Init+0x64>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cf0:	4b12      	ldr	r3, [pc, #72]	@ (8000d3c <MX_SPI2_Init+0x64>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cf6:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <MX_SPI2_Init+0x64>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cfc:	4b0f      	ldr	r3, [pc, #60]	@ (8000d3c <MX_SPI2_Init+0x64>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <MX_SPI2_Init+0x64>)
 8000d04:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000d08:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <MX_SPI2_Init+0x64>)
 8000d0c:	2208      	movs	r2, #8
 8000d0e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d10:	4b0a      	ldr	r3, [pc, #40]	@ (8000d3c <MX_SPI2_Init+0x64>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d16:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <MX_SPI2_Init+0x64>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d1c:	4b07      	ldr	r3, [pc, #28]	@ (8000d3c <MX_SPI2_Init+0x64>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000d22:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <MX_SPI2_Init+0x64>)
 8000d24:	220a      	movs	r2, #10
 8000d26:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d28:	4804      	ldr	r0, [pc, #16]	@ (8000d3c <MX_SPI2_Init+0x64>)
 8000d2a:	f002 ff4d 	bl	8003bc8 <HAL_SPI_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000d34:	f000 f874 	bl	8000e20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d38:	bf00      	nop
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000094 	.word	0x20000094
 8000d40:	40003800 	.word	0x40003800

08000d44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b088      	sub	sp, #32
 8000d48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4a:	f107 0310 	add.w	r3, r7, #16
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d58:	4b2e      	ldr	r3, [pc, #184]	@ (8000e14 <MX_GPIO_Init+0xd0>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	4a2d      	ldr	r2, [pc, #180]	@ (8000e14 <MX_GPIO_Init+0xd0>)
 8000d5e:	f043 0310 	orr.w	r3, r3, #16
 8000d62:	6193      	str	r3, [r2, #24]
 8000d64:	4b2b      	ldr	r3, [pc, #172]	@ (8000e14 <MX_GPIO_Init+0xd0>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	f003 0310 	and.w	r3, r3, #16
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d70:	4b28      	ldr	r3, [pc, #160]	@ (8000e14 <MX_GPIO_Init+0xd0>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	4a27      	ldr	r2, [pc, #156]	@ (8000e14 <MX_GPIO_Init+0xd0>)
 8000d76:	f043 0320 	orr.w	r3, r3, #32
 8000d7a:	6193      	str	r3, [r2, #24]
 8000d7c:	4b25      	ldr	r3, [pc, #148]	@ (8000e14 <MX_GPIO_Init+0xd0>)
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	f003 0320 	and.w	r3, r3, #32
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d88:	4b22      	ldr	r3, [pc, #136]	@ (8000e14 <MX_GPIO_Init+0xd0>)
 8000d8a:	699b      	ldr	r3, [r3, #24]
 8000d8c:	4a21      	ldr	r2, [pc, #132]	@ (8000e14 <MX_GPIO_Init+0xd0>)
 8000d8e:	f043 0308 	orr.w	r3, r3, #8
 8000d92:	6193      	str	r3, [r2, #24]
 8000d94:	4b1f      	ldr	r3, [pc, #124]	@ (8000e14 <MX_GPIO_Init+0xd0>)
 8000d96:	699b      	ldr	r3, [r3, #24]
 8000d98:	f003 0308 	and.w	r3, r3, #8
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da0:	4b1c      	ldr	r3, [pc, #112]	@ (8000e14 <MX_GPIO_Init+0xd0>)
 8000da2:	699b      	ldr	r3, [r3, #24]
 8000da4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e14 <MX_GPIO_Init+0xd0>)
 8000da6:	f043 0304 	orr.w	r3, r3, #4
 8000daa:	6193      	str	r3, [r2, #24]
 8000dac:	4b19      	ldr	r3, [pc, #100]	@ (8000e14 <MX_GPIO_Init+0xd0>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	f003 0304 	and.w	r3, r3, #4
 8000db4:	603b      	str	r3, [r7, #0]
 8000db6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000dbe:	4816      	ldr	r0, [pc, #88]	@ (8000e18 <MX_GPIO_Init+0xd4>)
 8000dc0:	f001 faba 	bl	8002338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000dca:	4814      	ldr	r0, [pc, #80]	@ (8000e1c <MX_GPIO_Init+0xd8>)
 8000dcc:	f001 fab4 	bl	8002338 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000dd0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dde:	2302      	movs	r3, #2
 8000de0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000de2:	f107 0310 	add.w	r3, r7, #16
 8000de6:	4619      	mov	r1, r3
 8000de8:	480b      	ldr	r0, [pc, #44]	@ (8000e18 <MX_GPIO_Init+0xd4>)
 8000dea:	f001 f921 	bl	8002030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000dee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000df2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df4:	2301      	movs	r3, #1
 8000df6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	4619      	mov	r1, r3
 8000e06:	4805      	ldr	r0, [pc, #20]	@ (8000e1c <MX_GPIO_Init+0xd8>)
 8000e08:	f001 f912 	bl	8002030 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e0c:	bf00      	nop
 8000e0e:	3720      	adds	r7, #32
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40011000 	.word	0x40011000
 8000e1c:	40010800 	.word	0x40010800

08000e20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e24:	b672      	cpsid	i
}
 8000e26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <Error_Handler+0x8>

08000e2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b085      	sub	sp, #20
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e32:	4b15      	ldr	r3, [pc, #84]	@ (8000e88 <HAL_MspInit+0x5c>)
 8000e34:	699b      	ldr	r3, [r3, #24]
 8000e36:	4a14      	ldr	r2, [pc, #80]	@ (8000e88 <HAL_MspInit+0x5c>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6193      	str	r3, [r2, #24]
 8000e3e:	4b12      	ldr	r3, [pc, #72]	@ (8000e88 <HAL_MspInit+0x5c>)
 8000e40:	699b      	ldr	r3, [r3, #24]
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e88 <HAL_MspInit+0x5c>)
 8000e4c:	69db      	ldr	r3, [r3, #28]
 8000e4e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e88 <HAL_MspInit+0x5c>)
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e54:	61d3      	str	r3, [r2, #28]
 8000e56:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <HAL_MspInit+0x5c>)
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000e62:	4b0a      	ldr	r3, [pc, #40]	@ (8000e8c <HAL_MspInit+0x60>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	60fb      	str	r3, [r7, #12]
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000e6e:	60fb      	str	r3, [r7, #12]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000e76:	60fb      	str	r3, [r7, #12]
 8000e78:	4a04      	ldr	r2, [pc, #16]	@ (8000e8c <HAL_MspInit+0x60>)
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7e:	bf00      	nop
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bc80      	pop	{r7}
 8000e86:	4770      	bx	lr
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40010000 	.word	0x40010000

08000e90 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e98:	f107 0310 	add.w	r3, r7, #16
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	601a      	str	r2, [r3, #0]
 8000ea0:	605a      	str	r2, [r3, #4]
 8000ea2:	609a      	str	r2, [r3, #8]
 8000ea4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	4a15      	ldr	r2, [pc, #84]	@ (8000f00 <HAL_I2C_MspInit+0x70>)
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d123      	bne.n	8000ef8 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eb0:	4b14      	ldr	r3, [pc, #80]	@ (8000f04 <HAL_I2C_MspInit+0x74>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	4a13      	ldr	r2, [pc, #76]	@ (8000f04 <HAL_I2C_MspInit+0x74>)
 8000eb6:	f043 0308 	orr.w	r3, r3, #8
 8000eba:	6193      	str	r3, [r2, #24]
 8000ebc:	4b11      	ldr	r3, [pc, #68]	@ (8000f04 <HAL_I2C_MspInit+0x74>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	f003 0308 	and.w	r3, r3, #8
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000ec8:	23c0      	movs	r3, #192	@ 0xc0
 8000eca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ecc:	2312      	movs	r3, #18
 8000ece:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ed0:	2303      	movs	r3, #3
 8000ed2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ed4:	f107 0310 	add.w	r3, r7, #16
 8000ed8:	4619      	mov	r1, r3
 8000eda:	480b      	ldr	r0, [pc, #44]	@ (8000f08 <HAL_I2C_MspInit+0x78>)
 8000edc:	f001 f8a8 	bl	8002030 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ee0:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <HAL_I2C_MspInit+0x74>)
 8000ee2:	69db      	ldr	r3, [r3, #28]
 8000ee4:	4a07      	ldr	r2, [pc, #28]	@ (8000f04 <HAL_I2C_MspInit+0x74>)
 8000ee6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000eea:	61d3      	str	r3, [r2, #28]
 8000eec:	4b05      	ldr	r3, [pc, #20]	@ (8000f04 <HAL_I2C_MspInit+0x74>)
 8000eee:	69db      	ldr	r3, [r3, #28]
 8000ef0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000ef8:	bf00      	nop
 8000efa:	3720      	adds	r7, #32
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	40005400 	.word	0x40005400
 8000f04:	40021000 	.word	0x40021000
 8000f08:	40010c00 	.word	0x40010c00

08000f0c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b088      	sub	sp, #32
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 0310 	add.w	r3, r7, #16
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a1c      	ldr	r2, [pc, #112]	@ (8000f98 <HAL_SPI_MspInit+0x8c>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d131      	bne.n	8000f90 <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000f2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f9c <HAL_SPI_MspInit+0x90>)
 8000f2e:	69db      	ldr	r3, [r3, #28]
 8000f30:	4a1a      	ldr	r2, [pc, #104]	@ (8000f9c <HAL_SPI_MspInit+0x90>)
 8000f32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f36:	61d3      	str	r3, [r2, #28]
 8000f38:	4b18      	ldr	r3, [pc, #96]	@ (8000f9c <HAL_SPI_MspInit+0x90>)
 8000f3a:	69db      	ldr	r3, [r3, #28]
 8000f3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f40:	60fb      	str	r3, [r7, #12]
 8000f42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f44:	4b15      	ldr	r3, [pc, #84]	@ (8000f9c <HAL_SPI_MspInit+0x90>)
 8000f46:	699b      	ldr	r3, [r3, #24]
 8000f48:	4a14      	ldr	r2, [pc, #80]	@ (8000f9c <HAL_SPI_MspInit+0x90>)
 8000f4a:	f043 0308 	orr.w	r3, r3, #8
 8000f4e:	6193      	str	r3, [r2, #24]
 8000f50:	4b12      	ldr	r3, [pc, #72]	@ (8000f9c <HAL_SPI_MspInit+0x90>)
 8000f52:	699b      	ldr	r3, [r3, #24]
 8000f54:	f003 0308 	and.w	r3, r3, #8
 8000f58:	60bb      	str	r3, [r7, #8]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8000f5c:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000f60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f62:	2302      	movs	r3, #2
 8000f64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f66:	2303      	movs	r3, #3
 8000f68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6a:	f107 0310 	add.w	r3, r7, #16
 8000f6e:	4619      	mov	r1, r3
 8000f70:	480b      	ldr	r0, [pc, #44]	@ (8000fa0 <HAL_SPI_MspInit+0x94>)
 8000f72:	f001 f85d 	bl	8002030 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000f76:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000f7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f84:	f107 0310 	add.w	r3, r7, #16
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4805      	ldr	r0, [pc, #20]	@ (8000fa0 <HAL_SPI_MspInit+0x94>)
 8000f8c:	f001 f850 	bl	8002030 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8000f90:	bf00      	nop
 8000f92:	3720      	adds	r7, #32
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40003800 	.word	0x40003800
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40010c00 	.word	0x40010c00

08000fa4 <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe0 <SDTimer_Handler+0x3c>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d006      	beq.n	8000fc0 <SDTimer_Handler+0x1c>
    Timer1--;
 8000fb2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fe0 <SDTimer_Handler+0x3c>)
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	b2db      	uxtb	r3, r3
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	4b08      	ldr	r3, [pc, #32]	@ (8000fe0 <SDTimer_Handler+0x3c>)
 8000fbe:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 8000fc0:	4b08      	ldr	r3, [pc, #32]	@ (8000fe4 <SDTimer_Handler+0x40>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d006      	beq.n	8000fd8 <SDTimer_Handler+0x34>
    Timer2--;
 8000fca:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <SDTimer_Handler+0x40>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	b2db      	uxtb	r3, r3
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	4b03      	ldr	r3, [pc, #12]	@ (8000fe4 <SDTimer_Handler+0x40>)
 8000fd6:	701a      	strb	r2, [r3, #0]
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bc80      	pop	{r7}
 8000fde:	4770      	bx	lr
 8000fe0:	200000ed 	.word	0x200000ed
 8000fe4:	200000ee 	.word	0x200000ee

08000fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <NMI_Handler+0x4>

08000ff0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <HardFault_Handler+0x4>

08000ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <MemManage_Handler+0x4>

08001000 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <BusFault_Handler+0x4>

08001008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <UsageFault_Handler+0x4>

08001010 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	bc80      	pop	{r7}
 800101a:	4770      	bx	lr

0800101c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	bc80      	pop	{r7}
 8001026:	4770      	bx	lr

08001028 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	   FatFsCnt++;
 8001038:	4b0a      	ldr	r3, [pc, #40]	@ (8001064 <SysTick_Handler+0x30>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	b2db      	uxtb	r3, r3
 800103e:	3301      	adds	r3, #1
 8001040:	b2da      	uxtb	r2, r3
 8001042:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <SysTick_Handler+0x30>)
 8001044:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8001046:	4b07      	ldr	r3, [pc, #28]	@ (8001064 <SysTick_Handler+0x30>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	2b09      	cmp	r3, #9
 800104e:	d904      	bls.n	800105a <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8001050:	4b04      	ldr	r3, [pc, #16]	@ (8001064 <SysTick_Handler+0x30>)
 8001052:	2200      	movs	r2, #0
 8001054:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8001056:	f7ff ffa5 	bl	8000fa4 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105a:	f000 fec5 	bl	8001de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200000ec 	.word	0x200000ec

08001068 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	bc80      	pop	{r7}
 8001072:	4770      	bx	lr

08001074 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001074:	f7ff fff8 	bl	8001068 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001078:	480b      	ldr	r0, [pc, #44]	@ (80010a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800107a:	490c      	ldr	r1, [pc, #48]	@ (80010ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800107c:	4a0c      	ldr	r2, [pc, #48]	@ (80010b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800107e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001080:	e002      	b.n	8001088 <LoopCopyDataInit>

08001082 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001082:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001084:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001086:	3304      	adds	r3, #4

08001088 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001088:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800108c:	d3f9      	bcc.n	8001082 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108e:	4a09      	ldr	r2, [pc, #36]	@ (80010b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001090:	4c09      	ldr	r4, [pc, #36]	@ (80010b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001092:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001094:	e001      	b.n	800109a <LoopFillZerobss>

08001096 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001096:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001098:	3204      	adds	r2, #4

0800109a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800109c:	d3fb      	bcc.n	8001096 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800109e:	f003 fa89 	bl	80045b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010a2:	f7ff fd81 	bl	8000ba8 <main>
  bx lr
 80010a6:	4770      	bx	lr
  ldr r0, =_sdata
 80010a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010ac:	20000024 	.word	0x20000024
  ldr r2, =_sidata
 80010b0:	08004748 	.word	0x08004748
  ldr r2, =_sbss
 80010b4:	20000024 	.word	0x20000024
  ldr r4, =_ebss
 80010b8:	2000010c 	.word	0x2000010c

080010bc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC1_2_IRQHandler>
	...

080010c0 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010ca:	4804      	ldr	r0, [pc, #16]	@ (80010dc <SELECT+0x1c>)
 80010cc:	f001 f934 	bl	8002338 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80010d0:	2001      	movs	r0, #1
 80010d2:	f000 fea5 	bl	8001e20 <HAL_Delay>
}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	40010800 	.word	0x40010800

080010e0 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80010e4:	2201      	movs	r2, #1
 80010e6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80010ea:	4804      	ldr	r0, [pc, #16]	@ (80010fc <DESELECT+0x1c>)
 80010ec:	f001 f924 	bl	8002338 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80010f0:	2001      	movs	r0, #1
 80010f2:	f000 fe95 	bl	8001e20 <HAL_Delay>
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	40010800 	.word	0x40010800

08001100 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800110a:	bf00      	nop
 800110c:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <SPI_TxByte+0x30>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689b      	ldr	r3, [r3, #8]
 8001112:	f003 0302 	and.w	r3, r3, #2
 8001116:	2b02      	cmp	r3, #2
 8001118:	d1f8      	bne.n	800110c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800111a:	1df9      	adds	r1, r7, #7
 800111c:	2364      	movs	r3, #100	@ 0x64
 800111e:	2201      	movs	r2, #1
 8001120:	4803      	ldr	r0, [pc, #12]	@ (8001130 <SPI_TxByte+0x30>)
 8001122:	f002 fdd5 	bl	8003cd0 <HAL_SPI_Transmit>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000094 	.word	0x20000094

08001134 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
 800113c:	460b      	mov	r3, r1
 800113e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001140:	bf00      	nop
 8001142:	4b08      	ldr	r3, [pc, #32]	@ (8001164 <SPI_TxBuffer+0x30>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	689b      	ldr	r3, [r3, #8]
 8001148:	f003 0302 	and.w	r3, r3, #2
 800114c:	2b02      	cmp	r3, #2
 800114e:	d1f8      	bne.n	8001142 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8001150:	887a      	ldrh	r2, [r7, #2]
 8001152:	2364      	movs	r3, #100	@ 0x64
 8001154:	6879      	ldr	r1, [r7, #4]
 8001156:	4803      	ldr	r0, [pc, #12]	@ (8001164 <SPI_TxBuffer+0x30>)
 8001158:	f002 fdba 	bl	8003cd0 <HAL_SPI_Transmit>
}
 800115c:	bf00      	nop
 800115e:	3708      	adds	r7, #8
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	20000094 	.word	0x20000094

08001168 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 800116e:	23ff      	movs	r3, #255	@ 0xff
 8001170:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8001172:	bf00      	nop
 8001174:	4b09      	ldr	r3, [pc, #36]	@ (800119c <SPI_RxByte+0x34>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b02      	cmp	r3, #2
 8001180:	d1f8      	bne.n	8001174 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8001182:	1dba      	adds	r2, r7, #6
 8001184:	1df9      	adds	r1, r7, #7
 8001186:	2364      	movs	r3, #100	@ 0x64
 8001188:	9300      	str	r3, [sp, #0]
 800118a:	2301      	movs	r3, #1
 800118c:	4803      	ldr	r0, [pc, #12]	@ (800119c <SPI_RxByte+0x34>)
 800118e:	f002 fee3 	bl	8003f58 <HAL_SPI_TransmitReceive>

	return data;
 8001192:	79bb      	ldrb	r3, [r7, #6]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000094 	.word	0x20000094

080011a0 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80011a8:	f7ff ffde 	bl	8001168 <SPI_RxByte>
 80011ac:	4603      	mov	r3, r0
 80011ae:	461a      	mov	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	701a      	strb	r2, [r3, #0]
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80011c2:	4b0a      	ldr	r3, [pc, #40]	@ (80011ec <SD_ReadyWait+0x30>)
 80011c4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80011c8:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80011ca:	f7ff ffcd 	bl	8001168 <SPI_RxByte>
 80011ce:	4603      	mov	r3, r0
 80011d0:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80011d2:	79fb      	ldrb	r3, [r7, #7]
 80011d4:	2bff      	cmp	r3, #255	@ 0xff
 80011d6:	d004      	beq.n	80011e2 <SD_ReadyWait+0x26>
 80011d8:	4b04      	ldr	r3, [pc, #16]	@ (80011ec <SD_ReadyWait+0x30>)
 80011da:	881b      	ldrh	r3, [r3, #0]
 80011dc:	b29b      	uxth	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1f3      	bne.n	80011ca <SD_ReadyWait+0xe>

	return res;
 80011e2:	79fb      	ldrb	r3, [r7, #7]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200000ee 	.word	0x200000ee

080011f0 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 80011f6:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80011fa:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 80011fc:	f7ff ff70 	bl	80010e0 <DESELECT>
	for(int i = 0; i < 10; i++)
 8001200:	2300      	movs	r3, #0
 8001202:	60bb      	str	r3, [r7, #8]
 8001204:	e005      	b.n	8001212 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8001206:	20ff      	movs	r0, #255	@ 0xff
 8001208:	f7ff ff7a 	bl	8001100 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	3301      	adds	r3, #1
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	2b09      	cmp	r3, #9
 8001216:	ddf6      	ble.n	8001206 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8001218:	f7ff ff52 	bl	80010c0 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800121c:	2340      	movs	r3, #64	@ 0x40
 800121e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8001224:	2300      	movs	r3, #0
 8001226:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8001228:	2300      	movs	r3, #0
 800122a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8001230:	2395      	movs	r3, #149	@ 0x95
 8001232:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8001234:	463b      	mov	r3, r7
 8001236:	2106      	movs	r1, #6
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff7b 	bl	8001134 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800123e:	e002      	b.n	8001246 <SD_PowerOn+0x56>
	{
		cnt--;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	3b01      	subs	r3, #1
 8001244:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 8001246:	f7ff ff8f 	bl	8001168 <SPI_RxByte>
 800124a:	4603      	mov	r3, r0
 800124c:	2b01      	cmp	r3, #1
 800124e:	d002      	beq.n	8001256 <SD_PowerOn+0x66>
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d1f4      	bne.n	8001240 <SD_PowerOn+0x50>
	}

	DESELECT();
 8001256:	f7ff ff43 	bl	80010e0 <DESELECT>
	SPI_TxByte(0XFF);
 800125a:	20ff      	movs	r0, #255	@ 0xff
 800125c:	f7ff ff50 	bl	8001100 <SPI_TxByte>

	PowerFlag = 1;
 8001260:	4b03      	ldr	r3, [pc, #12]	@ (8001270 <SD_PowerOn+0x80>)
 8001262:	2201      	movs	r2, #1
 8001264:	701a      	strb	r2, [r3, #0]
}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200000f0 	.word	0x200000f0

08001274 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 8001278:	4b03      	ldr	r3, [pc, #12]	@ (8001288 <SD_PowerOff+0x14>)
 800127a:	2200      	movs	r2, #0
 800127c:	701a      	strb	r2, [r3, #0]
}
 800127e:	bf00      	nop
 8001280:	46bd      	mov	sp, r7
 8001282:	bc80      	pop	{r7}
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	200000f0 	.word	0x200000f0

0800128c <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
	return PowerFlag;
 8001290:	4b02      	ldr	r3, [pc, #8]	@ (800129c <SD_CheckPower+0x10>)
 8001292:	781b      	ldrb	r3, [r3, #0]
}
 8001294:	4618      	mov	r0, r3
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	200000f0 	.word	0x200000f0

080012a0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b084      	sub	sp, #16
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
 80012a8:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80012aa:	4b14      	ldr	r3, [pc, #80]	@ (80012fc <SD_RxDataBlock+0x5c>)
 80012ac:	22c8      	movs	r2, #200	@ 0xc8
 80012ae:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80012b0:	f7ff ff5a 	bl	8001168 <SPI_RxByte>
 80012b4:	4603      	mov	r3, r0
 80012b6:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	2bff      	cmp	r3, #255	@ 0xff
 80012bc:	d104      	bne.n	80012c8 <SD_RxDataBlock+0x28>
 80012be:	4b0f      	ldr	r3, [pc, #60]	@ (80012fc <SD_RxDataBlock+0x5c>)
 80012c0:	881b      	ldrh	r3, [r3, #0]
 80012c2:	b29b      	uxth	r3, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1f3      	bne.n	80012b0 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
 80012ca:	2bfe      	cmp	r3, #254	@ 0xfe
 80012cc:	d001      	beq.n	80012d2 <SD_RxDataBlock+0x32>
 80012ce:	2300      	movs	r3, #0
 80012d0:	e00f      	b.n	80012f2 <SD_RxDataBlock+0x52>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	1c5a      	adds	r2, r3, #1
 80012d6:	607a      	str	r2, [r7, #4]
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff ff61 	bl	80011a0 <SPI_RxBytePtr>
	} while(len--);
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	1e5a      	subs	r2, r3, #1
 80012e2:	603a      	str	r2, [r7, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1f4      	bne.n	80012d2 <SD_RxDataBlock+0x32>

	/* discard CRC */
	SPI_RxByte();
 80012e8:	f7ff ff3e 	bl	8001168 <SPI_RxByte>
	SPI_RxByte();
 80012ec:	f7ff ff3c 	bl	8001168 <SPI_RxByte>

	return TRUE;
 80012f0:	2301      	movs	r3, #1
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	200000ed 	.word	0x200000ed

08001300 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
 8001308:	460b      	mov	r3, r1
 800130a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8001310:	f7ff ff54 	bl	80011bc <SD_ReadyWait>
 8001314:	4603      	mov	r3, r0
 8001316:	2bff      	cmp	r3, #255	@ 0xff
 8001318:	d001      	beq.n	800131e <SD_TxDataBlock+0x1e>
 800131a:	2300      	movs	r3, #0
 800131c:	e02f      	b.n	800137e <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800131e:	78fb      	ldrb	r3, [r7, #3]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff feed 	bl	8001100 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8001326:	78fb      	ldrb	r3, [r7, #3]
 8001328:	2bfd      	cmp	r3, #253	@ 0xfd
 800132a:	d020      	beq.n	800136e <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800132c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001330:	6878      	ldr	r0, [r7, #4]
 8001332:	f7ff feff 	bl	8001134 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8001336:	f7ff ff17 	bl	8001168 <SPI_RxByte>
		SPI_RxByte();
 800133a:	f7ff ff15 	bl	8001168 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800133e:	e00b      	b.n	8001358 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8001340:	f7ff ff12 	bl	8001168 <SPI_RxByte>
 8001344:	4603      	mov	r3, r0
 8001346:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	f003 031f 	and.w	r3, r3, #31
 800134e:	2b05      	cmp	r3, #5
 8001350:	d006      	beq.n	8001360 <SD_TxDataBlock+0x60>
			i++;
 8001352:	7bbb      	ldrb	r3, [r7, #14]
 8001354:	3301      	adds	r3, #1
 8001356:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 8001358:	7bbb      	ldrb	r3, [r7, #14]
 800135a:	2b40      	cmp	r3, #64	@ 0x40
 800135c:	d9f0      	bls.n	8001340 <SD_TxDataBlock+0x40>
 800135e:	e000      	b.n	8001362 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8001360:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8001362:	bf00      	nop
 8001364:	f7ff ff00 	bl	8001168 <SPI_RxByte>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0fa      	beq.n	8001364 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	f003 031f 	and.w	r3, r3, #31
 8001374:	2b05      	cmp	r3, #5
 8001376:	d101      	bne.n	800137c <SD_TxDataBlock+0x7c>
 8001378:	2301      	movs	r3, #1
 800137a:	e000      	b.n	800137e <SD_TxDataBlock+0x7e>

	return FALSE;
 800137c:	2300      	movs	r3, #0
}
 800137e:	4618      	mov	r0, r3
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}

08001386 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b084      	sub	sp, #16
 800138a:	af00      	add	r7, sp, #0
 800138c:	4603      	mov	r3, r0
 800138e:	6039      	str	r1, [r7, #0]
 8001390:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8001392:	f7ff ff13 	bl	80011bc <SD_ReadyWait>
 8001396:	4603      	mov	r3, r0
 8001398:	2bff      	cmp	r3, #255	@ 0xff
 800139a:	d001      	beq.n	80013a0 <SD_SendCmd+0x1a>
 800139c:	23ff      	movs	r3, #255	@ 0xff
 800139e:	e042      	b.n	8001426 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff feac 	bl	8001100 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	0e1b      	lsrs	r3, r3, #24
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff fea6 	bl	8001100 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	0c1b      	lsrs	r3, r3, #16
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fea0 	bl	8001100 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	0a1b      	lsrs	r3, r3, #8
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fe9a 	bl	8001100 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fe95 	bl	8001100 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	2b40      	cmp	r3, #64	@ 0x40
 80013da:	d102      	bne.n	80013e2 <SD_SendCmd+0x5c>
 80013dc:	2395      	movs	r3, #149	@ 0x95
 80013de:	73fb      	strb	r3, [r7, #15]
 80013e0:	e007      	b.n	80013f2 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 80013e2:	79fb      	ldrb	r3, [r7, #7]
 80013e4:	2b48      	cmp	r3, #72	@ 0x48
 80013e6:	d102      	bne.n	80013ee <SD_SendCmd+0x68>
 80013e8:	2387      	movs	r3, #135	@ 0x87
 80013ea:	73fb      	strb	r3, [r7, #15]
 80013ec:	e001      	b.n	80013f2 <SD_SendCmd+0x6c>
	else crc = 1;
 80013ee:	2301      	movs	r3, #1
 80013f0:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fe83 	bl	8001100 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	2b4c      	cmp	r3, #76	@ 0x4c
 80013fe:	d101      	bne.n	8001404 <SD_SendCmd+0x7e>
 8001400:	f7ff feb2 	bl	8001168 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8001404:	230a      	movs	r3, #10
 8001406:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8001408:	f7ff feae 	bl	8001168 <SPI_RxByte>
 800140c:	4603      	mov	r3, r0
 800140e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8001410:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001414:	2b00      	cmp	r3, #0
 8001416:	da05      	bge.n	8001424 <SD_SendCmd+0x9e>
 8001418:	7bbb      	ldrb	r3, [r7, #14]
 800141a:	3b01      	subs	r3, #1
 800141c:	73bb      	strb	r3, [r7, #14]
 800141e:	7bbb      	ldrb	r3, [r7, #14]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d1f1      	bne.n	8001408 <SD_SendCmd+0x82>

	return res;
 8001424:	7b7b      	ldrb	r3, [r7, #13]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
	...

08001430 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	4603      	mov	r3, r0
 8001438:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <SD_disk_initialize+0x14>
 8001440:	2301      	movs	r3, #1
 8001442:	e0d6      	b.n	80015f2 <SD_disk_initialize+0x1c2>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8001444:	4b6d      	ldr	r3, [pc, #436]	@ (80015fc <SD_disk_initialize+0x1cc>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	b2db      	uxtb	r3, r3
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d003      	beq.n	800145a <SD_disk_initialize+0x2a>
 8001452:	4b6a      	ldr	r3, [pc, #424]	@ (80015fc <SD_disk_initialize+0x1cc>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	b2db      	uxtb	r3, r3
 8001458:	e0cb      	b.n	80015f2 <SD_disk_initialize+0x1c2>

	/* power on */
	SD_PowerOn();
 800145a:	f7ff fec9 	bl	80011f0 <SD_PowerOn>

	/* slave select */
	SELECT();
 800145e:	f7ff fe2f 	bl	80010c0 <SELECT>

	/* check disk type */
	type = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 8001466:	2100      	movs	r1, #0
 8001468:	2040      	movs	r0, #64	@ 0x40
 800146a:	f7ff ff8c 	bl	8001386 <SD_SendCmd>
 800146e:	4603      	mov	r3, r0
 8001470:	2b01      	cmp	r3, #1
 8001472:	f040 80a6 	bne.w	80015c2 <SD_disk_initialize+0x192>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 8001476:	4b62      	ldr	r3, [pc, #392]	@ (8001600 <SD_disk_initialize+0x1d0>)
 8001478:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800147c:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 800147e:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001482:	2048      	movs	r0, #72	@ 0x48
 8001484:	f7ff ff7f 	bl	8001386 <SD_SendCmd>
 8001488:	4603      	mov	r3, r0
 800148a:	2b01      	cmp	r3, #1
 800148c:	d158      	bne.n	8001540 <SD_disk_initialize+0x110>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 800148e:	2300      	movs	r3, #0
 8001490:	73fb      	strb	r3, [r7, #15]
 8001492:	e00c      	b.n	80014ae <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 8001494:	7bfc      	ldrb	r4, [r7, #15]
 8001496:	f7ff fe67 	bl	8001168 <SPI_RxByte>
 800149a:	4603      	mov	r3, r0
 800149c:	461a      	mov	r2, r3
 800149e:	f104 0310 	add.w	r3, r4, #16
 80014a2:	443b      	add	r3, r7
 80014a4:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
 80014aa:	3301      	adds	r3, #1
 80014ac:	73fb      	strb	r3, [r7, #15]
 80014ae:	7bfb      	ldrb	r3, [r7, #15]
 80014b0:	2b03      	cmp	r3, #3
 80014b2:	d9ef      	bls.n	8001494 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80014b4:	7abb      	ldrb	r3, [r7, #10]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	f040 8083 	bne.w	80015c2 <SD_disk_initialize+0x192>
 80014bc:	7afb      	ldrb	r3, [r7, #11]
 80014be:	2baa      	cmp	r3, #170	@ 0xaa
 80014c0:	d17f      	bne.n	80015c2 <SD_disk_initialize+0x192>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80014c2:	2100      	movs	r1, #0
 80014c4:	2077      	movs	r0, #119	@ 0x77
 80014c6:	f7ff ff5e 	bl	8001386 <SD_SendCmd>
 80014ca:	4603      	mov	r3, r0
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d807      	bhi.n	80014e0 <SD_disk_initialize+0xb0>
 80014d0:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80014d4:	2069      	movs	r0, #105	@ 0x69
 80014d6:	f7ff ff56 	bl	8001386 <SD_SendCmd>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d005      	beq.n	80014ec <SD_disk_initialize+0xbc>
				} while (Timer1);
 80014e0:	4b47      	ldr	r3, [pc, #284]	@ (8001600 <SD_disk_initialize+0x1d0>)
 80014e2:	881b      	ldrh	r3, [r3, #0]
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d1eb      	bne.n	80014c2 <SD_disk_initialize+0x92>
 80014ea:	e000      	b.n	80014ee <SD_disk_initialize+0xbe>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80014ec:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80014ee:	4b44      	ldr	r3, [pc, #272]	@ (8001600 <SD_disk_initialize+0x1d0>)
 80014f0:	881b      	ldrh	r3, [r3, #0]
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d064      	beq.n	80015c2 <SD_disk_initialize+0x192>
 80014f8:	2100      	movs	r1, #0
 80014fa:	207a      	movs	r0, #122	@ 0x7a
 80014fc:	f7ff ff43 	bl	8001386 <SD_SendCmd>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d15d      	bne.n	80015c2 <SD_disk_initialize+0x192>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8001506:	2300      	movs	r3, #0
 8001508:	73fb      	strb	r3, [r7, #15]
 800150a:	e00c      	b.n	8001526 <SD_disk_initialize+0xf6>
					{
						ocr[n] = SPI_RxByte();
 800150c:	7bfc      	ldrb	r4, [r7, #15]
 800150e:	f7ff fe2b 	bl	8001168 <SPI_RxByte>
 8001512:	4603      	mov	r3, r0
 8001514:	461a      	mov	r2, r3
 8001516:	f104 0310 	add.w	r3, r4, #16
 800151a:	443b      	add	r3, r7
 800151c:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8001520:	7bfb      	ldrb	r3, [r7, #15]
 8001522:	3301      	adds	r3, #1
 8001524:	73fb      	strb	r3, [r7, #15]
 8001526:	7bfb      	ldrb	r3, [r7, #15]
 8001528:	2b03      	cmp	r3, #3
 800152a:	d9ef      	bls.n	800150c <SD_disk_initialize+0xdc>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800152c:	7a3b      	ldrb	r3, [r7, #8]
 800152e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <SD_disk_initialize+0x10a>
 8001536:	230c      	movs	r3, #12
 8001538:	e000      	b.n	800153c <SD_disk_initialize+0x10c>
 800153a:	2304      	movs	r3, #4
 800153c:	73bb      	strb	r3, [r7, #14]
 800153e:	e040      	b.n	80015c2 <SD_disk_initialize+0x192>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001540:	2100      	movs	r1, #0
 8001542:	2077      	movs	r0, #119	@ 0x77
 8001544:	f7ff ff1f 	bl	8001386 <SD_SendCmd>
 8001548:	4603      	mov	r3, r0
 800154a:	2b01      	cmp	r3, #1
 800154c:	d808      	bhi.n	8001560 <SD_disk_initialize+0x130>
 800154e:	2100      	movs	r1, #0
 8001550:	2069      	movs	r0, #105	@ 0x69
 8001552:	f7ff ff18 	bl	8001386 <SD_SendCmd>
 8001556:	4603      	mov	r3, r0
 8001558:	2b01      	cmp	r3, #1
 800155a:	d801      	bhi.n	8001560 <SD_disk_initialize+0x130>
 800155c:	2302      	movs	r3, #2
 800155e:	e000      	b.n	8001562 <SD_disk_initialize+0x132>
 8001560:	2301      	movs	r3, #1
 8001562:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8001564:	7bbb      	ldrb	r3, [r7, #14]
 8001566:	2b02      	cmp	r3, #2
 8001568:	d10e      	bne.n	8001588 <SD_disk_initialize+0x158>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800156a:	2100      	movs	r1, #0
 800156c:	2077      	movs	r0, #119	@ 0x77
 800156e:	f7ff ff0a 	bl	8001386 <SD_SendCmd>
 8001572:	4603      	mov	r3, r0
 8001574:	2b01      	cmp	r3, #1
 8001576:	d80e      	bhi.n	8001596 <SD_disk_initialize+0x166>
 8001578:	2100      	movs	r1, #0
 800157a:	2069      	movs	r0, #105	@ 0x69
 800157c:	f7ff ff03 	bl	8001386 <SD_SendCmd>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d107      	bne.n	8001596 <SD_disk_initialize+0x166>
 8001586:	e00d      	b.n	80015a4 <SD_disk_initialize+0x174>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001588:	2100      	movs	r1, #0
 800158a:	2041      	movs	r0, #65	@ 0x41
 800158c:	f7ff fefb 	bl	8001386 <SD_SendCmd>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d005      	beq.n	80015a2 <SD_disk_initialize+0x172>
				}

			} while (Timer1);
 8001596:	4b1a      	ldr	r3, [pc, #104]	@ (8001600 <SD_disk_initialize+0x1d0>)
 8001598:	881b      	ldrh	r3, [r3, #0]
 800159a:	b29b      	uxth	r3, r3
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1e1      	bne.n	8001564 <SD_disk_initialize+0x134>
 80015a0:	e000      	b.n	80015a4 <SD_disk_initialize+0x174>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80015a2:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 80015a4:	4b16      	ldr	r3, [pc, #88]	@ (8001600 <SD_disk_initialize+0x1d0>)
 80015a6:	881b      	ldrh	r3, [r3, #0]
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d007      	beq.n	80015be <SD_disk_initialize+0x18e>
 80015ae:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80015b2:	2050      	movs	r0, #80	@ 0x50
 80015b4:	f7ff fee7 	bl	8001386 <SD_SendCmd>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <SD_disk_initialize+0x192>
 80015be:	2300      	movs	r3, #0
 80015c0:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 80015c2:	4a10      	ldr	r2, [pc, #64]	@ (8001604 <SD_disk_initialize+0x1d4>)
 80015c4:	7bbb      	ldrb	r3, [r7, #14]
 80015c6:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 80015c8:	f7ff fd8a 	bl	80010e0 <DESELECT>
	SPI_RxByte();
 80015cc:	f7ff fdcc 	bl	8001168 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 80015d0:	7bbb      	ldrb	r3, [r7, #14]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d008      	beq.n	80015e8 <SD_disk_initialize+0x1b8>
	{
		Stat &= ~STA_NOINIT;
 80015d6:	4b09      	ldr	r3, [pc, #36]	@ (80015fc <SD_disk_initialize+0x1cc>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	f023 0301 	bic.w	r3, r3, #1
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <SD_disk_initialize+0x1cc>)
 80015e4:	701a      	strb	r2, [r3, #0]
 80015e6:	e001      	b.n	80015ec <SD_disk_initialize+0x1bc>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 80015e8:	f7ff fe44 	bl	8001274 <SD_PowerOff>
	}

	return Stat;
 80015ec:	4b03      	ldr	r3, [pc, #12]	@ (80015fc <SD_disk_initialize+0x1cc>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	b2db      	uxtb	r3, r3
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3714      	adds	r7, #20
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd90      	pop	{r4, r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000004 	.word	0x20000004
 8001600:	200000ed 	.word	0x200000ed
 8001604:	200000ef 	.word	0x200000ef

08001608 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d001      	beq.n	800161c <SD_disk_status+0x14>
 8001618:	2301      	movs	r3, #1
 800161a:	e002      	b.n	8001622 <SD_disk_status+0x1a>
	return Stat;
 800161c:	4b03      	ldr	r3, [pc, #12]	@ (800162c <SD_disk_status+0x24>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	b2db      	uxtb	r3, r3
}
 8001622:	4618      	mov	r0, r3
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	bc80      	pop	{r7}
 800162a:	4770      	bx	lr
 800162c:	20000004 	.word	0x20000004

08001630 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
 800163a:	603b      	str	r3, [r7, #0]
 800163c:	4603      	mov	r3, r0
 800163e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d102      	bne.n	800164c <SD_disk_read+0x1c>
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <SD_disk_read+0x20>
 800164c:	2304      	movs	r3, #4
 800164e:	e051      	b.n	80016f4 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001650:	4b2a      	ldr	r3, [pc, #168]	@ (80016fc <SD_disk_read+0xcc>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	b2db      	uxtb	r3, r3
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	2b00      	cmp	r3, #0
 800165c:	d001      	beq.n	8001662 <SD_disk_read+0x32>
 800165e:	2303      	movs	r3, #3
 8001660:	e048      	b.n	80016f4 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001662:	4b27      	ldr	r3, [pc, #156]	@ (8001700 <SD_disk_read+0xd0>)
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	2b00      	cmp	r3, #0
 800166c:	d102      	bne.n	8001674 <SD_disk_read+0x44>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	025b      	lsls	r3, r3, #9
 8001672:	607b      	str	r3, [r7, #4]

	SELECT();
 8001674:	f7ff fd24 	bl	80010c0 <SELECT>

	if (count == 1)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	2b01      	cmp	r3, #1
 800167c:	d111      	bne.n	80016a2 <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800167e:	6879      	ldr	r1, [r7, #4]
 8001680:	2051      	movs	r0, #81	@ 0x51
 8001682:	f7ff fe80 	bl	8001386 <SD_SendCmd>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d129      	bne.n	80016e0 <SD_disk_read+0xb0>
 800168c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001690:	68b8      	ldr	r0, [r7, #8]
 8001692:	f7ff fe05 	bl	80012a0 <SD_RxDataBlock>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d021      	beq.n	80016e0 <SD_disk_read+0xb0>
 800169c:	2300      	movs	r3, #0
 800169e:	603b      	str	r3, [r7, #0]
 80016a0:	e01e      	b.n	80016e0 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	2052      	movs	r0, #82	@ 0x52
 80016a6:	f7ff fe6e 	bl	8001386 <SD_SendCmd>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d117      	bne.n	80016e0 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 80016b0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80016b4:	68b8      	ldr	r0, [r7, #8]
 80016b6:	f7ff fdf3 	bl	80012a0 <SD_RxDataBlock>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d00a      	beq.n	80016d6 <SD_disk_read+0xa6>
				buff += 512;
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80016c6:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	603b      	str	r3, [r7, #0]
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1ed      	bne.n	80016b0 <SD_disk_read+0x80>
 80016d4:	e000      	b.n	80016d8 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 80016d6:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 80016d8:	2100      	movs	r1, #0
 80016da:	204c      	movs	r0, #76	@ 0x4c
 80016dc:	f7ff fe53 	bl	8001386 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 80016e0:	f7ff fcfe 	bl	80010e0 <DESELECT>
	SPI_RxByte();
 80016e4:	f7ff fd40 	bl	8001168 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	bf14      	ite	ne
 80016ee:	2301      	movne	r3, #1
 80016f0:	2300      	moveq	r3, #0
 80016f2:	b2db      	uxtb	r3, r3
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000004 	.word	0x20000004
 8001700:	200000ef 	.word	0x200000ef

08001704 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b084      	sub	sp, #16
 8001708:	af00      	add	r7, sp, #0
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
 800170e:	603b      	str	r3, [r7, #0]
 8001710:	4603      	mov	r3, r0
 8001712:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8001714:	7bfb      	ldrb	r3, [r7, #15]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d102      	bne.n	8001720 <SD_disk_write+0x1c>
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d101      	bne.n	8001724 <SD_disk_write+0x20>
 8001720:	2304      	movs	r3, #4
 8001722:	e06b      	b.n	80017fc <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001724:	4b37      	ldr	r3, [pc, #220]	@ (8001804 <SD_disk_write+0x100>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	b2db      	uxtb	r3, r3
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <SD_disk_write+0x32>
 8001732:	2303      	movs	r3, #3
 8001734:	e062      	b.n	80017fc <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8001736:	4b33      	ldr	r3, [pc, #204]	@ (8001804 <SD_disk_write+0x100>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	b2db      	uxtb	r3, r3
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <SD_disk_write+0x44>
 8001744:	2302      	movs	r3, #2
 8001746:	e059      	b.n	80017fc <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8001748:	4b2f      	ldr	r3, [pc, #188]	@ (8001808 <SD_disk_write+0x104>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	2b00      	cmp	r3, #0
 8001752:	d102      	bne.n	800175a <SD_disk_write+0x56>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	025b      	lsls	r3, r3, #9
 8001758:	607b      	str	r3, [r7, #4]

	SELECT();
 800175a:	f7ff fcb1 	bl	80010c0 <SELECT>

	if (count == 1)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d110      	bne.n	8001786 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	2058      	movs	r0, #88	@ 0x58
 8001768:	f7ff fe0d 	bl	8001386 <SD_SendCmd>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d13a      	bne.n	80017e8 <SD_disk_write+0xe4>
 8001772:	21fe      	movs	r1, #254	@ 0xfe
 8001774:	68b8      	ldr	r0, [r7, #8]
 8001776:	f7ff fdc3 	bl	8001300 <SD_TxDataBlock>
 800177a:	4603      	mov	r3, r0
 800177c:	2b00      	cmp	r3, #0
 800177e:	d033      	beq.n	80017e8 <SD_disk_write+0xe4>
			count = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	603b      	str	r3, [r7, #0]
 8001784:	e030      	b.n	80017e8 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8001786:	4b20      	ldr	r3, [pc, #128]	@ (8001808 <SD_disk_write+0x104>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d007      	beq.n	80017a2 <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8001792:	2100      	movs	r1, #0
 8001794:	2077      	movs	r0, #119	@ 0x77
 8001796:	f7ff fdf6 	bl	8001386 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 800179a:	6839      	ldr	r1, [r7, #0]
 800179c:	2057      	movs	r0, #87	@ 0x57
 800179e:	f7ff fdf2 	bl	8001386 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	2059      	movs	r0, #89	@ 0x59
 80017a6:	f7ff fdee 	bl	8001386 <SD_SendCmd>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d11b      	bne.n	80017e8 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80017b0:	21fc      	movs	r1, #252	@ 0xfc
 80017b2:	68b8      	ldr	r0, [r7, #8]
 80017b4:	f7ff fda4 	bl	8001300 <SD_TxDataBlock>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00a      	beq.n	80017d4 <SD_disk_write+0xd0>
				buff += 512;
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80017c4:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	603b      	str	r3, [r7, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1ee      	bne.n	80017b0 <SD_disk_write+0xac>
 80017d2:	e000      	b.n	80017d6 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80017d4:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 80017d6:	21fd      	movs	r1, #253	@ 0xfd
 80017d8:	2000      	movs	r0, #0
 80017da:	f7ff fd91 	bl	8001300 <SD_TxDataBlock>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d101      	bne.n	80017e8 <SD_disk_write+0xe4>
			{
				count = 1;
 80017e4:	2301      	movs	r3, #1
 80017e6:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 80017e8:	f7ff fc7a 	bl	80010e0 <DESELECT>
	SPI_RxByte();
 80017ec:	f7ff fcbc 	bl	8001168 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	bf14      	ite	ne
 80017f6:	2301      	movne	r3, #1
 80017f8:	2300      	moveq	r3, #0
 80017fa:	b2db      	uxtb	r3, r3
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3710      	adds	r7, #16
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20000004 	.word	0x20000004
 8001808:	200000ef 	.word	0x200000ef

0800180c <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 800180c:	b590      	push	{r4, r7, lr}
 800180e:	b08b      	sub	sp, #44	@ 0x2c
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	603a      	str	r2, [r7, #0]
 8001816:	71fb      	strb	r3, [r7, #7]
 8001818:	460b      	mov	r3, r1
 800181a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <SD_disk_ioctl+0x1e>
 8001826:	2304      	movs	r3, #4
 8001828:	e113      	b.n	8001a52 <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8001830:	79bb      	ldrb	r3, [r7, #6]
 8001832:	2b05      	cmp	r3, #5
 8001834:	d124      	bne.n	8001880 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8001836:	6a3b      	ldr	r3, [r7, #32]
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	2b02      	cmp	r3, #2
 800183c:	d012      	beq.n	8001864 <SD_disk_ioctl+0x58>
 800183e:	2b02      	cmp	r3, #2
 8001840:	dc1a      	bgt.n	8001878 <SD_disk_ioctl+0x6c>
 8001842:	2b00      	cmp	r3, #0
 8001844:	d002      	beq.n	800184c <SD_disk_ioctl+0x40>
 8001846:	2b01      	cmp	r3, #1
 8001848:	d006      	beq.n	8001858 <SD_disk_ioctl+0x4c>
 800184a:	e015      	b.n	8001878 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 800184c:	f7ff fd12 	bl	8001274 <SD_PowerOff>
			res = RES_OK;
 8001850:	2300      	movs	r3, #0
 8001852:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001856:	e0fa      	b.n	8001a4e <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8001858:	f7ff fcca 	bl	80011f0 <SD_PowerOn>
			res = RES_OK;
 800185c:	2300      	movs	r3, #0
 800185e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001862:	e0f4      	b.n	8001a4e <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8001864:	6a3b      	ldr	r3, [r7, #32]
 8001866:	1c5c      	adds	r4, r3, #1
 8001868:	f7ff fd10 	bl	800128c <SD_CheckPower>
 800186c:	4603      	mov	r3, r0
 800186e:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8001870:	2300      	movs	r3, #0
 8001872:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001876:	e0ea      	b.n	8001a4e <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8001878:	2304      	movs	r3, #4
 800187a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800187e:	e0e6      	b.n	8001a4e <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001880:	4b76      	ldr	r3, [pc, #472]	@ (8001a5c <SD_disk_ioctl+0x250>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	b2db      	uxtb	r3, r3
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <SD_disk_ioctl+0x86>
 800188e:	2303      	movs	r3, #3
 8001890:	e0df      	b.n	8001a52 <SD_disk_ioctl+0x246>

		SELECT();
 8001892:	f7ff fc15 	bl	80010c0 <SELECT>

		switch (ctrl)
 8001896:	79bb      	ldrb	r3, [r7, #6]
 8001898:	2b0d      	cmp	r3, #13
 800189a:	f200 80c9 	bhi.w	8001a30 <SD_disk_ioctl+0x224>
 800189e:	a201      	add	r2, pc, #4	@ (adr r2, 80018a4 <SD_disk_ioctl+0x98>)
 80018a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a4:	0800199b 	.word	0x0800199b
 80018a8:	080018dd 	.word	0x080018dd
 80018ac:	0800198b 	.word	0x0800198b
 80018b0:	08001a31 	.word	0x08001a31
 80018b4:	08001a31 	.word	0x08001a31
 80018b8:	08001a31 	.word	0x08001a31
 80018bc:	08001a31 	.word	0x08001a31
 80018c0:	08001a31 	.word	0x08001a31
 80018c4:	08001a31 	.word	0x08001a31
 80018c8:	08001a31 	.word	0x08001a31
 80018cc:	08001a31 	.word	0x08001a31
 80018d0:	080019ad 	.word	0x080019ad
 80018d4:	080019d1 	.word	0x080019d1
 80018d8:	080019f5 	.word	0x080019f5
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80018dc:	2100      	movs	r1, #0
 80018de:	2049      	movs	r0, #73	@ 0x49
 80018e0:	f7ff fd51 	bl	8001386 <SD_SendCmd>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f040 80a6 	bne.w	8001a38 <SD_disk_ioctl+0x22c>
 80018ec:	f107 030c 	add.w	r3, r7, #12
 80018f0:	2110      	movs	r1, #16
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fcd4 	bl	80012a0 <SD_RxDataBlock>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 809c 	beq.w	8001a38 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8001900:	7b3b      	ldrb	r3, [r7, #12]
 8001902:	099b      	lsrs	r3, r3, #6
 8001904:	b2db      	uxtb	r3, r3
 8001906:	2b01      	cmp	r3, #1
 8001908:	d10d      	bne.n	8001926 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 800190a:	7d7b      	ldrb	r3, [r7, #21]
 800190c:	461a      	mov	r2, r3
 800190e:	7d3b      	ldrb	r3, [r7, #20]
 8001910:	021b      	lsls	r3, r3, #8
 8001912:	b29b      	uxth	r3, r3
 8001914:	4413      	add	r3, r2
 8001916:	b29b      	uxth	r3, r3
 8001918:	3301      	adds	r3, #1
 800191a:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 800191c:	8bfb      	ldrh	r3, [r7, #30]
 800191e:	029a      	lsls	r2, r3, #10
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	e02d      	b.n	8001982 <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001926:	7c7b      	ldrb	r3, [r7, #17]
 8001928:	f003 030f 	and.w	r3, r3, #15
 800192c:	b2da      	uxtb	r2, r3
 800192e:	7dbb      	ldrb	r3, [r7, #22]
 8001930:	09db      	lsrs	r3, r3, #7
 8001932:	b2db      	uxtb	r3, r3
 8001934:	4413      	add	r3, r2
 8001936:	b2da      	uxtb	r2, r3
 8001938:	7d7b      	ldrb	r3, [r7, #21]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	b2db      	uxtb	r3, r3
 800193e:	f003 0306 	and.w	r3, r3, #6
 8001942:	b2db      	uxtb	r3, r3
 8001944:	4413      	add	r3, r2
 8001946:	b2db      	uxtb	r3, r3
 8001948:	3302      	adds	r3, #2
 800194a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800194e:	7d3b      	ldrb	r3, [r7, #20]
 8001950:	099b      	lsrs	r3, r3, #6
 8001952:	b2db      	uxtb	r3, r3
 8001954:	461a      	mov	r2, r3
 8001956:	7cfb      	ldrb	r3, [r7, #19]
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	b29b      	uxth	r3, r3
 800195c:	4413      	add	r3, r2
 800195e:	b29a      	uxth	r2, r3
 8001960:	7cbb      	ldrb	r3, [r7, #18]
 8001962:	029b      	lsls	r3, r3, #10
 8001964:	b29b      	uxth	r3, r3
 8001966:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800196a:	b29b      	uxth	r3, r3
 800196c:	4413      	add	r3, r2
 800196e:	b29b      	uxth	r3, r3
 8001970:	3301      	adds	r3, #1
 8001972:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8001974:	8bfa      	ldrh	r2, [r7, #30]
 8001976:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800197a:	3b09      	subs	r3, #9
 800197c:	409a      	lsls	r2, r3
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8001982:	2300      	movs	r3, #0
 8001984:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8001988:	e056      	b.n	8001a38 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 800198a:	683b      	ldr	r3, [r7, #0]
 800198c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001990:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8001992:	2300      	movs	r3, #0
 8001994:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001998:	e055      	b.n	8001a46 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800199a:	f7ff fc0f 	bl	80011bc <SD_ReadyWait>
 800199e:	4603      	mov	r3, r0
 80019a0:	2bff      	cmp	r3, #255	@ 0xff
 80019a2:	d14b      	bne.n	8001a3c <SD_disk_ioctl+0x230>
 80019a4:	2300      	movs	r3, #0
 80019a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80019aa:	e047      	b.n	8001a3c <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80019ac:	2100      	movs	r1, #0
 80019ae:	2049      	movs	r0, #73	@ 0x49
 80019b0:	f7ff fce9 	bl	8001386 <SD_SendCmd>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d142      	bne.n	8001a40 <SD_disk_ioctl+0x234>
 80019ba:	2110      	movs	r1, #16
 80019bc:	6a38      	ldr	r0, [r7, #32]
 80019be:	f7ff fc6f 	bl	80012a0 <SD_RxDataBlock>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d03b      	beq.n	8001a40 <SD_disk_ioctl+0x234>
 80019c8:	2300      	movs	r3, #0
 80019ca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80019ce:	e037      	b.n	8001a40 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80019d0:	2100      	movs	r1, #0
 80019d2:	204a      	movs	r0, #74	@ 0x4a
 80019d4:	f7ff fcd7 	bl	8001386 <SD_SendCmd>
 80019d8:	4603      	mov	r3, r0
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d132      	bne.n	8001a44 <SD_disk_ioctl+0x238>
 80019de:	2110      	movs	r1, #16
 80019e0:	6a38      	ldr	r0, [r7, #32]
 80019e2:	f7ff fc5d 	bl	80012a0 <SD_RxDataBlock>
 80019e6:	4603      	mov	r3, r0
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d02b      	beq.n	8001a44 <SD_disk_ioctl+0x238>
 80019ec:	2300      	movs	r3, #0
 80019ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80019f2:	e027      	b.n	8001a44 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 80019f4:	2100      	movs	r1, #0
 80019f6:	207a      	movs	r0, #122	@ 0x7a
 80019f8:	f7ff fcc5 	bl	8001386 <SD_SendCmd>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d116      	bne.n	8001a30 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001a08:	e00b      	b.n	8001a22 <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8001a0a:	6a3c      	ldr	r4, [r7, #32]
 8001a0c:	1c63      	adds	r3, r4, #1
 8001a0e:	623b      	str	r3, [r7, #32]
 8001a10:	f7ff fbaa 	bl	8001168 <SPI_RxByte>
 8001a14:	4603      	mov	r3, r0
 8001a16:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8001a18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001a22:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001a26:	2b03      	cmp	r3, #3
 8001a28:	d9ef      	bls.n	8001a0a <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8001a30:	2304      	movs	r3, #4
 8001a32:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001a36:	e006      	b.n	8001a46 <SD_disk_ioctl+0x23a>
			break;
 8001a38:	bf00      	nop
 8001a3a:	e004      	b.n	8001a46 <SD_disk_ioctl+0x23a>
			break;
 8001a3c:	bf00      	nop
 8001a3e:	e002      	b.n	8001a46 <SD_disk_ioctl+0x23a>
			break;
 8001a40:	bf00      	nop
 8001a42:	e000      	b.n	8001a46 <SD_disk_ioctl+0x23a>
			break;
 8001a44:	bf00      	nop
		}

		DESELECT();
 8001a46:	f7ff fb4b 	bl	80010e0 <DESELECT>
		SPI_RxByte();
 8001a4a:	f7ff fb8d 	bl	8001168 <SPI_RxByte>
	}

	return res;
 8001a4e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	372c      	adds	r7, #44	@ 0x2c
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd90      	pop	{r4, r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	20000004 	.word	0x20000004

08001a60 <calculateCRC>:
								  0x78, 0x49, 0x1A, 0x2B, 0xBC, 0x8D, 0xDE, 0xEF,
								  0x82, 0xB3, 0xE0, 0xD1, 0x46, 0x77, 0x24, 0x15,
								  0x3B, 0x0A, 0x59, 0x68, 0xFF, 0xCE, 0x9D, 0xAC  };

// =======================[ Public functions ]==========================
uint8_t calculateCRC(uint8_t *data, uint8_t dataSize){
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
 8001a68:	460b      	mov	r3, r1
 8001a6a:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0x00; 						//Initial value under specification
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < dataSize; i++) {
 8001a70:	2300      	movs	r3, #0
 8001a72:	73bb      	strb	r3, [r7, #14]
 8001a74:	e00d      	b.n	8001a92 <calculateCRC+0x32>
        crc = crc8Table[crc ^ data[i]];
 8001a76:	7bbb      	ldrb	r3, [r7, #14]
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	781a      	ldrb	r2, [r3, #0]
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	4053      	eors	r3, r2
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b08      	ldr	r3, [pc, #32]	@ (8001aa8 <calculateCRC+0x48>)
 8001a88:	5c9b      	ldrb	r3, [r3, r2]
 8001a8a:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < dataSize; i++) {
 8001a8c:	7bbb      	ldrb	r3, [r7, #14]
 8001a8e:	3301      	adds	r3, #1
 8001a90:	73bb      	strb	r3, [r7, #14]
 8001a92:	7bba      	ldrb	r2, [r7, #14]
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d3ed      	bcc.n	8001a76 <calculateCRC+0x16>
    }
    return crc;
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	0800462c 	.word	0x0800462c

08001aac <sht21ConfigResolution>:
	SHT21_MEASURE_HUMIDITY = 0,
	SHT21_MEASURE_TEMPERATURE
}tSht21Measurement;
// ===================== [ Private function ]===========================

static tSht21Status sht21ConfigResolution(uint8_t mode){
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b086      	sub	sp, #24
 8001ab0:	af02      	add	r7, sp, #8
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd = SHT21_READ_USER_REGISTER;
 8001ab6:	23e7      	movs	r3, #231	@ 0xe7
 8001ab8:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef status;
	uint8_t userRegister;
	uint8_t buffer[2];

	//Read the user register
	status = HAL_I2C_Master_Transmit(&hi2c1, SHT21_SLAVE_ADDRESS, &cmd, 1, HAL_MAX_DELAY);			//Send the read command
 8001aba:	f107 020e 	add.w	r2, r7, #14
 8001abe:	f04f 33ff 	mov.w	r3, #4294967295
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	2180      	movs	r1, #128	@ 0x80
 8001ac8:	481f      	ldr	r0, [pc, #124]	@ (8001b48 <sht21ConfigResolution+0x9c>)
 8001aca:	f000 fd91 	bl	80025f0 <HAL_I2C_Master_Transmit>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return SHT21_ERROR_I2C_TRANSMIT;
 8001ad2:	7bfb      	ldrb	r3, [r7, #15]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <sht21ConfigResolution+0x30>
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e030      	b.n	8001b3e <sht21ConfigResolution+0x92>

	status = HAL_I2C_Master_Receive(&hi2c1, SHT21_SLAVE_ADDRESS, &userRegister, 1, HAL_MAX_DELAY);
 8001adc:	f107 020d 	add.w	r2, r7, #13
 8001ae0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	2180      	movs	r1, #128	@ 0x80
 8001aea:	4817      	ldr	r0, [pc, #92]	@ (8001b48 <sht21ConfigResolution+0x9c>)
 8001aec:	f000 fe7e 	bl	80027ec <HAL_I2C_Master_Receive>
 8001af0:	4603      	mov	r3, r0
 8001af2:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return SHT21_ERROR_I2C_RECEIVE;
 8001af4:	7bfb      	ldrb	r3, [r7, #15]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d001      	beq.n	8001afe <sht21ConfigResolution+0x52>
 8001afa:	2302      	movs	r3, #2
 8001afc:	e01f      	b.n	8001b3e <sht21ConfigResolution+0x92>

	//Modify the resolution
	userRegister &= ~((1 << 0) | (1 << 7));			//Clean bit 0 and 7 (Measurement resolution)
 8001afe:	7b7b      	ldrb	r3, [r7, #13]
 8001b00:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	737b      	strb	r3, [r7, #13]
	userRegister |= mode;
 8001b08:	7b7a      	ldrb	r2, [r7, #13]
 8001b0a:	79fb      	ldrb	r3, [r7, #7]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	737b      	strb	r3, [r7, #13]

	//Write the user register
	buffer[0] = SHT21_WRITE_USER_REGISTER;			//Write command
 8001b12:	23e6      	movs	r3, #230	@ 0xe6
 8001b14:	723b      	strb	r3, [r7, #8]
	buffer[1] = userRegister;						//Register content to be written
 8001b16:	7b7b      	ldrb	r3, [r7, #13]
 8001b18:	727b      	strb	r3, [r7, #9]
	status = HAL_I2C_Master_Transmit(&hi2c1, SHT21_SLAVE_ADDRESS, buffer, 2, HAL_MAX_DELAY);
 8001b1a:	f107 0208 	add.w	r2, r7, #8
 8001b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	2302      	movs	r3, #2
 8001b26:	2180      	movs	r1, #128	@ 0x80
 8001b28:	4807      	ldr	r0, [pc, #28]	@ (8001b48 <sht21ConfigResolution+0x9c>)
 8001b2a:	f000 fd61 	bl	80025f0 <HAL_I2C_Master_Transmit>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	73fb      	strb	r3, [r7, #15]
	if(status != HAL_OK) return SHT21_ERROR_I2C_TRANSMIT;
 8001b32:	7bfb      	ldrb	r3, [r7, #15]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <sht21ConfigResolution+0x90>
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e000      	b.n	8001b3e <sht21ConfigResolution+0x92>

	//Resolution configuration is OK
	return SHT21_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000040 	.word	0x20000040
 8001b4c:	00000000 	.word	0x00000000

08001b50 <temperatureConversion>:
	HAL_StatusTypeDef status;
	status = HAL_I2C_Master_Transmit(&hi2c1, SHT21_SLAVE_ADDRESS, &cmd, 1, HAL_MAX_DELAY);
	return(status == HAL_OK) ? SHT21_OK : SHT21_ERROR_I2C_TRANSMIT;
}

static float temperatureConversion(uint16_t rawSignalOutput){
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	4603      	mov	r3, r0
 8001b58:	80fb      	strh	r3, [r7, #6]
	return (-46.85 + 175.72 * (float) rawSignalOutput / 65536.0);
 8001b5a:	88fb      	ldrh	r3, [r7, #6]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe ffcb 	bl	8000af8 <__aeabi_ui2f>
 8001b62:	4603      	mov	r3, r0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7fe fc57 	bl	8000418 <__aeabi_f2d>
 8001b6a:	a311      	add	r3, pc, #68	@ (adr r3, 8001bb0 <temperatureConversion+0x60>)
 8001b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b70:	f7fe fcaa 	bl	80004c8 <__aeabi_dmul>
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	f04f 0200 	mov.w	r2, #0
 8001b80:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc0 <temperatureConversion+0x70>)
 8001b82:	f7fe fdcb 	bl	800071c <__aeabi_ddiv>
 8001b86:	4602      	mov	r2, r0
 8001b88:	460b      	mov	r3, r1
 8001b8a:	4610      	mov	r0, r2
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	a30a      	add	r3, pc, #40	@ (adr r3, 8001bb8 <temperatureConversion+0x68>)
 8001b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b94:	f7fe fae0 	bl	8000158 <__aeabi_dsub>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	4610      	mov	r0, r2
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	f7fe fea4 	bl	80008ec <__aeabi_d2f>
 8001ba4:	4603      	mov	r3, r0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	3d70a3d7 	.word	0x3d70a3d7
 8001bb4:	4065f70a 	.word	0x4065f70a
 8001bb8:	cccccccd 	.word	0xcccccccd
 8001bbc:	40476ccc 	.word	0x40476ccc
 8001bc0:	40f00000 	.word	0x40f00000

08001bc4 <humidityConversion>:

static float humidityConversion(uint16_t rawSignalOutput){
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b082      	sub	sp, #8
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	80fb      	strh	r3, [r7, #6]
	return (-6.0 + 125.0 * (float) rawSignalOutput / 65536.0);
 8001bce:	88fb      	ldrh	r3, [r7, #6]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f7fe ff91 	bl	8000af8 <__aeabi_ui2f>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fc1d 	bl	8000418 <__aeabi_f2d>
 8001bde:	f04f 0200 	mov.w	r2, #0
 8001be2:	4b10      	ldr	r3, [pc, #64]	@ (8001c24 <humidityConversion+0x60>)
 8001be4:	f7fe fc70 	bl	80004c8 <__aeabi_dmul>
 8001be8:	4602      	mov	r2, r0
 8001bea:	460b      	mov	r3, r1
 8001bec:	4610      	mov	r0, r2
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f04f 0200 	mov.w	r2, #0
 8001bf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001c28 <humidityConversion+0x64>)
 8001bf6:	f7fe fd91 	bl	800071c <__aeabi_ddiv>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4610      	mov	r0, r2
 8001c00:	4619      	mov	r1, r3
 8001c02:	f04f 0200 	mov.w	r2, #0
 8001c06:	4b09      	ldr	r3, [pc, #36]	@ (8001c2c <humidityConversion+0x68>)
 8001c08:	f7fe faa6 	bl	8000158 <__aeabi_dsub>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	f7fe fe6a 	bl	80008ec <__aeabi_d2f>
 8001c18:	4603      	mov	r3, r0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	405f4000 	.word	0x405f4000
 8001c28:	40f00000 	.word	0x40f00000
 8001c2c:	40180000 	.word	0x40180000

08001c30 <sht21ReadMeasurement>:

static tSht21Status sht21ReadMeasurement(tSht21Measurement measurementType, float *measurement){
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af02      	add	r7, sp, #8
 8001c36:	4603      	mov	r3, r0
 8001c38:	6039      	str	r1, [r7, #0]
 8001c3a:	71fb      	strb	r3, [r7, #7]
	ConversionFunction doMeasurementConversion = NULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	617b      	str	r3, [r7, #20]
	uint8_t calculatedCRC;
	uint8_t buffer[3];
	uint8_t cmd;

	//Check measurement type
	switch(measurementType){
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d002      	beq.n	8001c4c <sht21ReadMeasurement+0x1c>
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d005      	beq.n	8001c56 <sht21ReadMeasurement+0x26>
 8001c4a:	e009      	b.n	8001c60 <sht21ReadMeasurement+0x30>
	case SHT21_MEASURE_HUMIDITY:
		cmd = SHT21_TRIGGER_HUMIDITY_MEASURE;
 8001c4c:	23e5      	movs	r3, #229	@ 0xe5
 8001c4e:	72fb      	strb	r3, [r7, #11]
		doMeasurementConversion = humidityConversion;			//Dependency injection to select the function
 8001c50:	4b28      	ldr	r3, [pc, #160]	@ (8001cf4 <sht21ReadMeasurement+0xc4>)
 8001c52:	617b      	str	r3, [r7, #20]
		break;
 8001c54:	e006      	b.n	8001c64 <sht21ReadMeasurement+0x34>
	case SHT21_MEASURE_TEMPERATURE:
		cmd = SHT21_TRIGGER_TEMPERATURE_MEASURE;
 8001c56:	23e3      	movs	r3, #227	@ 0xe3
 8001c58:	72fb      	strb	r3, [r7, #11]
		doMeasurementConversion = temperatureConversion;
 8001c5a:	4b27      	ldr	r3, [pc, #156]	@ (8001cf8 <sht21ReadMeasurement+0xc8>)
 8001c5c:	617b      	str	r3, [r7, #20]
		break;
 8001c5e:	e001      	b.n	8001c64 <sht21ReadMeasurement+0x34>
	default:
		return SHT21_ERROR_UNKNOWN;
 8001c60:	2304      	movs	r3, #4
 8001c62:	e043      	b.n	8001cec <sht21ReadMeasurement+0xbc>
	}

	//Issue the selected measurement command
	status = HAL_I2C_Master_Transmit(&hi2c1, SHT21_SLAVE_ADDRESS, &cmd, 1, HAL_MAX_DELAY);
 8001c64:	f107 020b 	add.w	r2, r7, #11
 8001c68:	f04f 33ff 	mov.w	r3, #4294967295
 8001c6c:	9300      	str	r3, [sp, #0]
 8001c6e:	2301      	movs	r3, #1
 8001c70:	2180      	movs	r1, #128	@ 0x80
 8001c72:	4822      	ldr	r0, [pc, #136]	@ (8001cfc <sht21ReadMeasurement+0xcc>)
 8001c74:	f000 fcbc 	bl	80025f0 <HAL_I2C_Master_Transmit>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	74fb      	strb	r3, [r7, #19]
	if(status != HAL_OK) return SHT21_ERROR_I2C_TRANSMIT;
 8001c7c:	7cfb      	ldrb	r3, [r7, #19]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <sht21ReadMeasurement+0x56>
 8001c82:	2301      	movs	r3, #1
 8001c84:	e032      	b.n	8001cec <sht21ReadMeasurement+0xbc>

	//Read the sensor´s response
	status = HAL_I2C_Master_Receive(&hi2c1, SHT21_SLAVE_ADDRESS, buffer, 3, HAL_MAX_DELAY);
 8001c86:	f107 020c 	add.w	r2, r7, #12
 8001c8a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2303      	movs	r3, #3
 8001c92:	2180      	movs	r1, #128	@ 0x80
 8001c94:	4819      	ldr	r0, [pc, #100]	@ (8001cfc <sht21ReadMeasurement+0xcc>)
 8001c96:	f000 fda9 	bl	80027ec <HAL_I2C_Master_Receive>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	74fb      	strb	r3, [r7, #19]
	if(status != HAL_OK) return SHT21_ERROR_I2C_RECEIVE;
 8001c9e:	7cfb      	ldrb	r3, [r7, #19]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <sht21ReadMeasurement+0x78>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e021      	b.n	8001cec <sht21ReadMeasurement+0xbc>

	//Calculate CRC and compare
	calculatedCRC = calculateCRC(buffer, 2);
 8001ca8:	f107 030c 	add.w	r3, r7, #12
 8001cac:	2102      	movs	r1, #2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fed6 	bl	8001a60 <calculateCRC>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	74bb      	strb	r3, [r7, #18]
	if(buffer[2] != calculatedCRC) return SHT21_ERROR_CRC;
 8001cb8:	7bbb      	ldrb	r3, [r7, #14]
 8001cba:	7cba      	ldrb	r2, [r7, #18]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d001      	beq.n	8001cc4 <sht21ReadMeasurement+0x94>
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e013      	b.n	8001cec <sht21ReadMeasurement+0xbc>

	//Do the measurement conversion
	rawSignalOutput = (buffer[0] << 8) | (buffer[1] & ~(0x03));							//Clear status bits from the second byte received
 8001cc4:	7b3b      	ldrb	r3, [r7, #12]
 8001cc6:	b21b      	sxth	r3, r3
 8001cc8:	021b      	lsls	r3, r3, #8
 8001cca:	b21a      	sxth	r2, r3
 8001ccc:	7b7b      	ldrb	r3, [r7, #13]
 8001cce:	b21b      	sxth	r3, r3
 8001cd0:	f023 0303 	bic.w	r3, r3, #3
 8001cd4:	b21b      	sxth	r3, r3
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	b21b      	sxth	r3, r3
 8001cda:	823b      	strh	r3, [r7, #16]
																						//in order to calculate the relative humidity
	*measurement = doMeasurementConversion(rawSignalOutput);							//Save measurement conversion
 8001cdc:	8a3a      	ldrh	r2, [r7, #16]
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4798      	blx	r3
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	601a      	str	r2, [r3, #0]
	return SHT21_OK;
 8001cea:	2300      	movs	r3, #0
}
 8001cec:	4618      	mov	r0, r3
 8001cee:	3718      	adds	r7, #24
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	08001bc5 	.word	0x08001bc5
 8001cf8:	08001b51 	.word	0x08001b51
 8001cfc:	20000040 	.word	0x20000040

08001d00 <sht21Init>:

// ===================== [ Public functions ]===========================
tSht21Status sht21Init(void){
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
	//Obs: Heater is turned off when power on occurs or at soft reset by default
	tSht21Status status;
	HAL_Delay(SHT21_STARTUP_DELAY);														//Wait start up time
 8001d06:	200f      	movs	r0, #15
 8001d08:	f000 f88a 	bl	8001e20 <HAL_Delay>
	status = sht21ConfigResolution(SHT21_RESOLUTION_MODE2);								//RH: 8 bits, T: 12 bits
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	f7ff fecd 	bl	8001aac <sht21ConfigResolution>
 8001d12:	4603      	mov	r3, r0
 8001d14:	71fb      	strb	r3, [r7, #7]
	return status;
 8001d16:	79fb      	ldrb	r3, [r7, #7]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <sht21GetRelativeHumidity>:

tSht21Status sht21GetRelativeHumidity(float *relativeHumidity){
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
	tSht21Status status;
	status = sht21ReadMeasurement(SHT21_MEASURE_HUMIDITY, relativeHumidity);
 8001d28:	6879      	ldr	r1, [r7, #4]
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	f7ff ff80 	bl	8001c30 <sht21ReadMeasurement>
 8001d30:	4603      	mov	r3, r0
 8001d32:	73fb      	strb	r3, [r7, #15]
	return status;
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3710      	adds	r7, #16
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <sht21GetTemperature>:

tSht21Status sht21GetTemperature(float *temperature){
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b084      	sub	sp, #16
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
	tSht21Status status;
	status = sht21ReadMeasurement(SHT21_MEASURE_TEMPERATURE, temperature);
 8001d46:	6879      	ldr	r1, [r7, #4]
 8001d48:	2001      	movs	r0, #1
 8001d4a:	f7ff ff71 	bl	8001c30 <sht21ReadMeasurement>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	73fb      	strb	r3, [r7, #15]
	return status;
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d60:	4b08      	ldr	r3, [pc, #32]	@ (8001d84 <HAL_Init+0x28>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a07      	ldr	r2, [pc, #28]	@ (8001d84 <HAL_Init+0x28>)
 8001d66:	f043 0310 	orr.w	r3, r3, #16
 8001d6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d6c:	2003      	movs	r0, #3
 8001d6e:	f000 f92b 	bl	8001fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d72:	200f      	movs	r0, #15
 8001d74:	f000 f808 	bl	8001d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d78:	f7ff f858 	bl	8000e2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	40022000 	.word	0x40022000

08001d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d90:	4b12      	ldr	r3, [pc, #72]	@ (8001ddc <HAL_InitTick+0x54>)
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	4b12      	ldr	r3, [pc, #72]	@ (8001de0 <HAL_InitTick+0x58>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	4619      	mov	r1, r3
 8001d9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 f935 	bl	8002016 <HAL_SYSTICK_Config>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e00e      	b.n	8001dd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2b0f      	cmp	r3, #15
 8001dba:	d80a      	bhi.n	8001dd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	6879      	ldr	r1, [r7, #4]
 8001dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001dc4:	f000 f90b 	bl	8001fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dc8:	4a06      	ldr	r2, [pc, #24]	@ (8001de4 <HAL_InitTick+0x5c>)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	e000      	b.n	8001dd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dd2:	2301      	movs	r3, #1
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	20000000 	.word	0x20000000
 8001de0:	2000000c 	.word	0x2000000c
 8001de4:	20000008 	.word	0x20000008

08001de8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001dec:	4b05      	ldr	r3, [pc, #20]	@ (8001e04 <HAL_IncTick+0x1c>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	461a      	mov	r2, r3
 8001df2:	4b05      	ldr	r3, [pc, #20]	@ (8001e08 <HAL_IncTick+0x20>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4413      	add	r3, r2
 8001df8:	4a03      	ldr	r2, [pc, #12]	@ (8001e08 <HAL_IncTick+0x20>)
 8001dfa:	6013      	str	r3, [r2, #0]
}
 8001dfc:	bf00      	nop
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr
 8001e04:	2000000c 	.word	0x2000000c
 8001e08:	200000f4 	.word	0x200000f4

08001e0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e10:	4b02      	ldr	r3, [pc, #8]	@ (8001e1c <HAL_GetTick+0x10>)
 8001e12:	681b      	ldr	r3, [r3, #0]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bc80      	pop	{r7}
 8001e1a:	4770      	bx	lr
 8001e1c:	200000f4 	.word	0x200000f4

08001e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e28:	f7ff fff0 	bl	8001e0c <HAL_GetTick>
 8001e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e38:	d005      	beq.n	8001e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e64 <HAL_Delay+0x44>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4413      	add	r3, r2
 8001e44:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001e46:	bf00      	nop
 8001e48:	f7ff ffe0 	bl	8001e0c <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	68fa      	ldr	r2, [r7, #12]
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d8f7      	bhi.n	8001e48 <HAL_Delay+0x28>
  {
  }
}
 8001e58:	bf00      	nop
 8001e5a:	bf00      	nop
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	2000000c 	.word	0x2000000c

08001e68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b085      	sub	sp, #20
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e78:	4b0c      	ldr	r3, [pc, #48]	@ (8001eac <__NVIC_SetPriorityGrouping+0x44>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e84:	4013      	ands	r3, r2
 8001e86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e9a:	4a04      	ldr	r2, [pc, #16]	@ (8001eac <__NVIC_SetPriorityGrouping+0x44>)
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	60d3      	str	r3, [r2, #12]
}
 8001ea0:	bf00      	nop
 8001ea2:	3714      	adds	r7, #20
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bc80      	pop	{r7}
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eb4:	4b04      	ldr	r3, [pc, #16]	@ (8001ec8 <__NVIC_GetPriorityGrouping+0x18>)
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	0a1b      	lsrs	r3, r3, #8
 8001eba:	f003 0307 	and.w	r3, r3, #7
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bc80      	pop	{r7}
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	e000ed00 	.word	0xe000ed00

08001ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	6039      	str	r1, [r7, #0]
 8001ed6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	db0a      	blt.n	8001ef6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	b2da      	uxtb	r2, r3
 8001ee4:	490c      	ldr	r1, [pc, #48]	@ (8001f18 <__NVIC_SetPriority+0x4c>)
 8001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eea:	0112      	lsls	r2, r2, #4
 8001eec:	b2d2      	uxtb	r2, r2
 8001eee:	440b      	add	r3, r1
 8001ef0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ef4:	e00a      	b.n	8001f0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	4908      	ldr	r1, [pc, #32]	@ (8001f1c <__NVIC_SetPriority+0x50>)
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	3b04      	subs	r3, #4
 8001f04:	0112      	lsls	r2, r2, #4
 8001f06:	b2d2      	uxtb	r2, r2
 8001f08:	440b      	add	r3, r1
 8001f0a:	761a      	strb	r2, [r3, #24]
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bc80      	pop	{r7}
 8001f14:	4770      	bx	lr
 8001f16:	bf00      	nop
 8001f18:	e000e100 	.word	0xe000e100
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b089      	sub	sp, #36	@ 0x24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f003 0307 	and.w	r3, r3, #7
 8001f32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f34:	69fb      	ldr	r3, [r7, #28]
 8001f36:	f1c3 0307 	rsb	r3, r3, #7
 8001f3a:	2b04      	cmp	r3, #4
 8001f3c:	bf28      	it	cs
 8001f3e:	2304      	movcs	r3, #4
 8001f40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f42:	69fb      	ldr	r3, [r7, #28]
 8001f44:	3304      	adds	r3, #4
 8001f46:	2b06      	cmp	r3, #6
 8001f48:	d902      	bls.n	8001f50 <NVIC_EncodePriority+0x30>
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3b03      	subs	r3, #3
 8001f4e:	e000      	b.n	8001f52 <NVIC_EncodePriority+0x32>
 8001f50:	2300      	movs	r3, #0
 8001f52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f54:	f04f 32ff 	mov.w	r2, #4294967295
 8001f58:	69bb      	ldr	r3, [r7, #24]
 8001f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5e:	43da      	mvns	r2, r3
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	401a      	ands	r2, r3
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f68:	f04f 31ff 	mov.w	r1, #4294967295
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001f72:	43d9      	mvns	r1, r3
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f78:	4313      	orrs	r3, r2
         );
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3724      	adds	r7, #36	@ 0x24
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr

08001f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b082      	sub	sp, #8
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	3b01      	subs	r3, #1
 8001f90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f94:	d301      	bcc.n	8001f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f96:	2301      	movs	r3, #1
 8001f98:	e00f      	b.n	8001fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001fc4 <SysTick_Config+0x40>)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fa2:	210f      	movs	r1, #15
 8001fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fa8:	f7ff ff90 	bl	8001ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fac:	4b05      	ldr	r3, [pc, #20]	@ (8001fc4 <SysTick_Config+0x40>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fb2:	4b04      	ldr	r3, [pc, #16]	@ (8001fc4 <SysTick_Config+0x40>)
 8001fb4:	2207      	movs	r2, #7
 8001fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	e000e010 	.word	0xe000e010

08001fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff ff49 	bl	8001e68 <__NVIC_SetPriorityGrouping>
}
 8001fd6:	bf00      	nop
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}

08001fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fde:	b580      	push	{r7, lr}
 8001fe0:	b086      	sub	sp, #24
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	4603      	mov	r3, r0
 8001fe6:	60b9      	str	r1, [r7, #8]
 8001fe8:	607a      	str	r2, [r7, #4]
 8001fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ff0:	f7ff ff5e 	bl	8001eb0 <__NVIC_GetPriorityGrouping>
 8001ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	68b9      	ldr	r1, [r7, #8]
 8001ffa:	6978      	ldr	r0, [r7, #20]
 8001ffc:	f7ff ff90 	bl	8001f20 <NVIC_EncodePriority>
 8002000:	4602      	mov	r2, r0
 8002002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff5f 	bl	8001ecc <__NVIC_SetPriority>
}
 800200e:	bf00      	nop
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002016:	b580      	push	{r7, lr}
 8002018:	b082      	sub	sp, #8
 800201a:	af00      	add	r7, sp, #0
 800201c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f7ff ffb0 	bl	8001f84 <SysTick_Config>
 8002024:	4603      	mov	r3, r0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
	...

08002030 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002030:	b480      	push	{r7}
 8002032:	b08b      	sub	sp, #44	@ 0x2c
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800203a:	2300      	movs	r3, #0
 800203c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800203e:	2300      	movs	r3, #0
 8002040:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002042:	e169      	b.n	8002318 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002044:	2201      	movs	r2, #1
 8002046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	69fa      	ldr	r2, [r7, #28]
 8002054:	4013      	ands	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	69fb      	ldr	r3, [r7, #28]
 800205c:	429a      	cmp	r2, r3
 800205e:	f040 8158 	bne.w	8002312 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	4a9a      	ldr	r2, [pc, #616]	@ (80022d0 <HAL_GPIO_Init+0x2a0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d05e      	beq.n	800212a <HAL_GPIO_Init+0xfa>
 800206c:	4a98      	ldr	r2, [pc, #608]	@ (80022d0 <HAL_GPIO_Init+0x2a0>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d875      	bhi.n	800215e <HAL_GPIO_Init+0x12e>
 8002072:	4a98      	ldr	r2, [pc, #608]	@ (80022d4 <HAL_GPIO_Init+0x2a4>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d058      	beq.n	800212a <HAL_GPIO_Init+0xfa>
 8002078:	4a96      	ldr	r2, [pc, #600]	@ (80022d4 <HAL_GPIO_Init+0x2a4>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d86f      	bhi.n	800215e <HAL_GPIO_Init+0x12e>
 800207e:	4a96      	ldr	r2, [pc, #600]	@ (80022d8 <HAL_GPIO_Init+0x2a8>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d052      	beq.n	800212a <HAL_GPIO_Init+0xfa>
 8002084:	4a94      	ldr	r2, [pc, #592]	@ (80022d8 <HAL_GPIO_Init+0x2a8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d869      	bhi.n	800215e <HAL_GPIO_Init+0x12e>
 800208a:	4a94      	ldr	r2, [pc, #592]	@ (80022dc <HAL_GPIO_Init+0x2ac>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d04c      	beq.n	800212a <HAL_GPIO_Init+0xfa>
 8002090:	4a92      	ldr	r2, [pc, #584]	@ (80022dc <HAL_GPIO_Init+0x2ac>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d863      	bhi.n	800215e <HAL_GPIO_Init+0x12e>
 8002096:	4a92      	ldr	r2, [pc, #584]	@ (80022e0 <HAL_GPIO_Init+0x2b0>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d046      	beq.n	800212a <HAL_GPIO_Init+0xfa>
 800209c:	4a90      	ldr	r2, [pc, #576]	@ (80022e0 <HAL_GPIO_Init+0x2b0>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d85d      	bhi.n	800215e <HAL_GPIO_Init+0x12e>
 80020a2:	2b12      	cmp	r3, #18
 80020a4:	d82a      	bhi.n	80020fc <HAL_GPIO_Init+0xcc>
 80020a6:	2b12      	cmp	r3, #18
 80020a8:	d859      	bhi.n	800215e <HAL_GPIO_Init+0x12e>
 80020aa:	a201      	add	r2, pc, #4	@ (adr r2, 80020b0 <HAL_GPIO_Init+0x80>)
 80020ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b0:	0800212b 	.word	0x0800212b
 80020b4:	08002105 	.word	0x08002105
 80020b8:	08002117 	.word	0x08002117
 80020bc:	08002159 	.word	0x08002159
 80020c0:	0800215f 	.word	0x0800215f
 80020c4:	0800215f 	.word	0x0800215f
 80020c8:	0800215f 	.word	0x0800215f
 80020cc:	0800215f 	.word	0x0800215f
 80020d0:	0800215f 	.word	0x0800215f
 80020d4:	0800215f 	.word	0x0800215f
 80020d8:	0800215f 	.word	0x0800215f
 80020dc:	0800215f 	.word	0x0800215f
 80020e0:	0800215f 	.word	0x0800215f
 80020e4:	0800215f 	.word	0x0800215f
 80020e8:	0800215f 	.word	0x0800215f
 80020ec:	0800215f 	.word	0x0800215f
 80020f0:	0800215f 	.word	0x0800215f
 80020f4:	0800210d 	.word	0x0800210d
 80020f8:	08002121 	.word	0x08002121
 80020fc:	4a79      	ldr	r2, [pc, #484]	@ (80022e4 <HAL_GPIO_Init+0x2b4>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d013      	beq.n	800212a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002102:	e02c      	b.n	800215e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	623b      	str	r3, [r7, #32]
          break;
 800210a:	e029      	b.n	8002160 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	3304      	adds	r3, #4
 8002112:	623b      	str	r3, [r7, #32]
          break;
 8002114:	e024      	b.n	8002160 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	3308      	adds	r3, #8
 800211c:	623b      	str	r3, [r7, #32]
          break;
 800211e:	e01f      	b.n	8002160 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	330c      	adds	r3, #12
 8002126:	623b      	str	r3, [r7, #32]
          break;
 8002128:	e01a      	b.n	8002160 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	689b      	ldr	r3, [r3, #8]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d102      	bne.n	8002138 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002132:	2304      	movs	r3, #4
 8002134:	623b      	str	r3, [r7, #32]
          break;
 8002136:	e013      	b.n	8002160 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	2b01      	cmp	r3, #1
 800213e:	d105      	bne.n	800214c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002140:	2308      	movs	r3, #8
 8002142:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	69fa      	ldr	r2, [r7, #28]
 8002148:	611a      	str	r2, [r3, #16]
          break;
 800214a:	e009      	b.n	8002160 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800214c:	2308      	movs	r3, #8
 800214e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	69fa      	ldr	r2, [r7, #28]
 8002154:	615a      	str	r2, [r3, #20]
          break;
 8002156:	e003      	b.n	8002160 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002158:	2300      	movs	r3, #0
 800215a:	623b      	str	r3, [r7, #32]
          break;
 800215c:	e000      	b.n	8002160 <HAL_GPIO_Init+0x130>
          break;
 800215e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	2bff      	cmp	r3, #255	@ 0xff
 8002164:	d801      	bhi.n	800216a <HAL_GPIO_Init+0x13a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	e001      	b.n	800216e <HAL_GPIO_Init+0x13e>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3304      	adds	r3, #4
 800216e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	2bff      	cmp	r3, #255	@ 0xff
 8002174:	d802      	bhi.n	800217c <HAL_GPIO_Init+0x14c>
 8002176:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	e002      	b.n	8002182 <HAL_GPIO_Init+0x152>
 800217c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217e:	3b08      	subs	r3, #8
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	210f      	movs	r1, #15
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	fa01 f303 	lsl.w	r3, r1, r3
 8002190:	43db      	mvns	r3, r3
 8002192:	401a      	ands	r2, r3
 8002194:	6a39      	ldr	r1, [r7, #32]
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	fa01 f303 	lsl.w	r3, r1, r3
 800219c:	431a      	orrs	r2, r3
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	f000 80b1 	beq.w	8002312 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021b0:	4b4d      	ldr	r3, [pc, #308]	@ (80022e8 <HAL_GPIO_Init+0x2b8>)
 80021b2:	699b      	ldr	r3, [r3, #24]
 80021b4:	4a4c      	ldr	r2, [pc, #304]	@ (80022e8 <HAL_GPIO_Init+0x2b8>)
 80021b6:	f043 0301 	orr.w	r3, r3, #1
 80021ba:	6193      	str	r3, [r2, #24]
 80021bc:	4b4a      	ldr	r3, [pc, #296]	@ (80022e8 <HAL_GPIO_Init+0x2b8>)
 80021be:	699b      	ldr	r3, [r3, #24]
 80021c0:	f003 0301 	and.w	r3, r3, #1
 80021c4:	60bb      	str	r3, [r7, #8]
 80021c6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021c8:	4a48      	ldr	r2, [pc, #288]	@ (80022ec <HAL_GPIO_Init+0x2bc>)
 80021ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021cc:	089b      	lsrs	r3, r3, #2
 80021ce:	3302      	adds	r3, #2
 80021d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021d4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021d8:	f003 0303 	and.w	r3, r3, #3
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	220f      	movs	r2, #15
 80021e0:	fa02 f303 	lsl.w	r3, r2, r3
 80021e4:	43db      	mvns	r3, r3
 80021e6:	68fa      	ldr	r2, [r7, #12]
 80021e8:	4013      	ands	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a40      	ldr	r2, [pc, #256]	@ (80022f0 <HAL_GPIO_Init+0x2c0>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d013      	beq.n	800221c <HAL_GPIO_Init+0x1ec>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a3f      	ldr	r2, [pc, #252]	@ (80022f4 <HAL_GPIO_Init+0x2c4>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d00d      	beq.n	8002218 <HAL_GPIO_Init+0x1e8>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	4a3e      	ldr	r2, [pc, #248]	@ (80022f8 <HAL_GPIO_Init+0x2c8>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d007      	beq.n	8002214 <HAL_GPIO_Init+0x1e4>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4a3d      	ldr	r2, [pc, #244]	@ (80022fc <HAL_GPIO_Init+0x2cc>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d101      	bne.n	8002210 <HAL_GPIO_Init+0x1e0>
 800220c:	2303      	movs	r3, #3
 800220e:	e006      	b.n	800221e <HAL_GPIO_Init+0x1ee>
 8002210:	2304      	movs	r3, #4
 8002212:	e004      	b.n	800221e <HAL_GPIO_Init+0x1ee>
 8002214:	2302      	movs	r3, #2
 8002216:	e002      	b.n	800221e <HAL_GPIO_Init+0x1ee>
 8002218:	2301      	movs	r3, #1
 800221a:	e000      	b.n	800221e <HAL_GPIO_Init+0x1ee>
 800221c:	2300      	movs	r3, #0
 800221e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002220:	f002 0203 	and.w	r2, r2, #3
 8002224:	0092      	lsls	r2, r2, #2
 8002226:	4093      	lsls	r3, r2
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800222e:	492f      	ldr	r1, [pc, #188]	@ (80022ec <HAL_GPIO_Init+0x2bc>)
 8002230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002232:	089b      	lsrs	r3, r3, #2
 8002234:	3302      	adds	r3, #2
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d006      	beq.n	8002256 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002248:	4b2d      	ldr	r3, [pc, #180]	@ (8002300 <HAL_GPIO_Init+0x2d0>)
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	492c      	ldr	r1, [pc, #176]	@ (8002300 <HAL_GPIO_Init+0x2d0>)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	4313      	orrs	r3, r2
 8002252:	608b      	str	r3, [r1, #8]
 8002254:	e006      	b.n	8002264 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002256:	4b2a      	ldr	r3, [pc, #168]	@ (8002300 <HAL_GPIO_Init+0x2d0>)
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	43db      	mvns	r3, r3
 800225e:	4928      	ldr	r1, [pc, #160]	@ (8002300 <HAL_GPIO_Init+0x2d0>)
 8002260:	4013      	ands	r3, r2
 8002262:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d006      	beq.n	800227e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002270:	4b23      	ldr	r3, [pc, #140]	@ (8002300 <HAL_GPIO_Init+0x2d0>)
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	4922      	ldr	r1, [pc, #136]	@ (8002300 <HAL_GPIO_Init+0x2d0>)
 8002276:	69bb      	ldr	r3, [r7, #24]
 8002278:	4313      	orrs	r3, r2
 800227a:	60cb      	str	r3, [r1, #12]
 800227c:	e006      	b.n	800228c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800227e:	4b20      	ldr	r3, [pc, #128]	@ (8002300 <HAL_GPIO_Init+0x2d0>)
 8002280:	68da      	ldr	r2, [r3, #12]
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	43db      	mvns	r3, r3
 8002286:	491e      	ldr	r1, [pc, #120]	@ (8002300 <HAL_GPIO_Init+0x2d0>)
 8002288:	4013      	ands	r3, r2
 800228a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d006      	beq.n	80022a6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002298:	4b19      	ldr	r3, [pc, #100]	@ (8002300 <HAL_GPIO_Init+0x2d0>)
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	4918      	ldr	r1, [pc, #96]	@ (8002300 <HAL_GPIO_Init+0x2d0>)
 800229e:	69bb      	ldr	r3, [r7, #24]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]
 80022a4:	e006      	b.n	80022b4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022a6:	4b16      	ldr	r3, [pc, #88]	@ (8002300 <HAL_GPIO_Init+0x2d0>)
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	69bb      	ldr	r3, [r7, #24]
 80022ac:	43db      	mvns	r3, r3
 80022ae:	4914      	ldr	r1, [pc, #80]	@ (8002300 <HAL_GPIO_Init+0x2d0>)
 80022b0:	4013      	ands	r3, r2
 80022b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d021      	beq.n	8002304 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002300 <HAL_GPIO_Init+0x2d0>)
 80022c2:	681a      	ldr	r2, [r3, #0]
 80022c4:	490e      	ldr	r1, [pc, #56]	@ (8002300 <HAL_GPIO_Init+0x2d0>)
 80022c6:	69bb      	ldr	r3, [r7, #24]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	600b      	str	r3, [r1, #0]
 80022cc:	e021      	b.n	8002312 <HAL_GPIO_Init+0x2e2>
 80022ce:	bf00      	nop
 80022d0:	10320000 	.word	0x10320000
 80022d4:	10310000 	.word	0x10310000
 80022d8:	10220000 	.word	0x10220000
 80022dc:	10210000 	.word	0x10210000
 80022e0:	10120000 	.word	0x10120000
 80022e4:	10110000 	.word	0x10110000
 80022e8:	40021000 	.word	0x40021000
 80022ec:	40010000 	.word	0x40010000
 80022f0:	40010800 	.word	0x40010800
 80022f4:	40010c00 	.word	0x40010c00
 80022f8:	40011000 	.word	0x40011000
 80022fc:	40011400 	.word	0x40011400
 8002300:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002304:	4b0b      	ldr	r3, [pc, #44]	@ (8002334 <HAL_GPIO_Init+0x304>)
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	69bb      	ldr	r3, [r7, #24]
 800230a:	43db      	mvns	r3, r3
 800230c:	4909      	ldr	r1, [pc, #36]	@ (8002334 <HAL_GPIO_Init+0x304>)
 800230e:	4013      	ands	r3, r2
 8002310:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002314:	3301      	adds	r3, #1
 8002316:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231e:	fa22 f303 	lsr.w	r3, r2, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	f47f ae8e 	bne.w	8002044 <HAL_GPIO_Init+0x14>
  }
}
 8002328:	bf00      	nop
 800232a:	bf00      	nop
 800232c:	372c      	adds	r7, #44	@ 0x2c
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	40010400 	.word	0x40010400

08002338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002338:	b480      	push	{r7}
 800233a:	b083      	sub	sp, #12
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	460b      	mov	r3, r1
 8002342:	807b      	strh	r3, [r7, #2]
 8002344:	4613      	mov	r3, r2
 8002346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002348:	787b      	ldrb	r3, [r7, #1]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d003      	beq.n	8002356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800234e:	887a      	ldrh	r2, [r7, #2]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002354:	e003      	b.n	800235e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002356:	887b      	ldrh	r3, [r7, #2]
 8002358:	041a      	lsls	r2, r3, #16
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	611a      	str	r2, [r3, #16]
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr

08002368 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d101      	bne.n	800237a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e12b      	b.n	80025d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002380:	b2db      	uxtb	r3, r3
 8002382:	2b00      	cmp	r3, #0
 8002384:	d106      	bne.n	8002394 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7fe fd7e 	bl	8000e90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2224      	movs	r2, #36	@ 0x24
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0201 	bic.w	r2, r2, #1
 80023aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023cc:	f001 fbca 	bl	8003b64 <HAL_RCC_GetPCLK1Freq>
 80023d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	4a81      	ldr	r2, [pc, #516]	@ (80025dc <HAL_I2C_Init+0x274>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d807      	bhi.n	80023ec <HAL_I2C_Init+0x84>
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4a80      	ldr	r2, [pc, #512]	@ (80025e0 <HAL_I2C_Init+0x278>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	bf94      	ite	ls
 80023e4:	2301      	movls	r3, #1
 80023e6:	2300      	movhi	r3, #0
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	e006      	b.n	80023fa <HAL_I2C_Init+0x92>
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	4a7d      	ldr	r2, [pc, #500]	@ (80025e4 <HAL_I2C_Init+0x27c>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	bf94      	ite	ls
 80023f4:	2301      	movls	r3, #1
 80023f6:	2300      	movhi	r3, #0
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e0e7      	b.n	80025d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	4a78      	ldr	r2, [pc, #480]	@ (80025e8 <HAL_I2C_Init+0x280>)
 8002406:	fba2 2303 	umull	r2, r3, r2, r3
 800240a:	0c9b      	lsrs	r3, r3, #18
 800240c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	430a      	orrs	r2, r1
 8002420:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	4a6a      	ldr	r2, [pc, #424]	@ (80025dc <HAL_I2C_Init+0x274>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d802      	bhi.n	800243c <HAL_I2C_Init+0xd4>
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	3301      	adds	r3, #1
 800243a:	e009      	b.n	8002450 <HAL_I2C_Init+0xe8>
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002442:	fb02 f303 	mul.w	r3, r2, r3
 8002446:	4a69      	ldr	r2, [pc, #420]	@ (80025ec <HAL_I2C_Init+0x284>)
 8002448:	fba2 2303 	umull	r2, r3, r2, r3
 800244c:	099b      	lsrs	r3, r3, #6
 800244e:	3301      	adds	r3, #1
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	6812      	ldr	r2, [r2, #0]
 8002454:	430b      	orrs	r3, r1
 8002456:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002462:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	495c      	ldr	r1, [pc, #368]	@ (80025dc <HAL_I2C_Init+0x274>)
 800246c:	428b      	cmp	r3, r1
 800246e:	d819      	bhi.n	80024a4 <HAL_I2C_Init+0x13c>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	1e59      	subs	r1, r3, #1
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	fbb1 f3f3 	udiv	r3, r1, r3
 800247e:	1c59      	adds	r1, r3, #1
 8002480:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002484:	400b      	ands	r3, r1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00a      	beq.n	80024a0 <HAL_I2C_Init+0x138>
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1e59      	subs	r1, r3, #1
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	fbb1 f3f3 	udiv	r3, r1, r3
 8002498:	3301      	adds	r3, #1
 800249a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800249e:	e051      	b.n	8002544 <HAL_I2C_Init+0x1dc>
 80024a0:	2304      	movs	r3, #4
 80024a2:	e04f      	b.n	8002544 <HAL_I2C_Init+0x1dc>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d111      	bne.n	80024d0 <HAL_I2C_Init+0x168>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	1e58      	subs	r0, r3, #1
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6859      	ldr	r1, [r3, #4]
 80024b4:	460b      	mov	r3, r1
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	440b      	add	r3, r1
 80024ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80024be:	3301      	adds	r3, #1
 80024c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	bf0c      	ite	eq
 80024c8:	2301      	moveq	r3, #1
 80024ca:	2300      	movne	r3, #0
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	e012      	b.n	80024f6 <HAL_I2C_Init+0x18e>
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	1e58      	subs	r0, r3, #1
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6859      	ldr	r1, [r3, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	0099      	lsls	r1, r3, #2
 80024e0:	440b      	add	r3, r1
 80024e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80024e6:	3301      	adds	r3, #1
 80024e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	bf0c      	ite	eq
 80024f0:	2301      	moveq	r3, #1
 80024f2:	2300      	movne	r3, #0
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <HAL_I2C_Init+0x196>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e022      	b.n	8002544 <HAL_I2C_Init+0x1dc>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d10e      	bne.n	8002524 <HAL_I2C_Init+0x1bc>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	1e58      	subs	r0, r3, #1
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6859      	ldr	r1, [r3, #4]
 800250e:	460b      	mov	r3, r1
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	440b      	add	r3, r1
 8002514:	fbb0 f3f3 	udiv	r3, r0, r3
 8002518:	3301      	adds	r3, #1
 800251a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800251e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002522:	e00f      	b.n	8002544 <HAL_I2C_Init+0x1dc>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	1e58      	subs	r0, r3, #1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6859      	ldr	r1, [r3, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	0099      	lsls	r1, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	fbb0 f3f3 	udiv	r3, r0, r3
 800253a:	3301      	adds	r3, #1
 800253c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002540:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002544:	6879      	ldr	r1, [r7, #4]
 8002546:	6809      	ldr	r1, [r1, #0]
 8002548:	4313      	orrs	r3, r2
 800254a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	69da      	ldr	r2, [r3, #28]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a1b      	ldr	r3, [r3, #32]
 800255e:	431a      	orrs	r2, r3
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002572:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	6911      	ldr	r1, [r2, #16]
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	68d2      	ldr	r2, [r2, #12]
 800257e:	4311      	orrs	r1, r2
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	430b      	orrs	r3, r1
 8002586:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	695a      	ldr	r2, [r3, #20]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	431a      	orrs	r2, r3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	430a      	orrs	r2, r1
 80025a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0201 	orr.w	r2, r2, #1
 80025b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2220      	movs	r2, #32
 80025be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3710      	adds	r7, #16
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	000186a0 	.word	0x000186a0
 80025e0:	001e847f 	.word	0x001e847f
 80025e4:	003d08ff 	.word	0x003d08ff
 80025e8:	431bde83 	.word	0x431bde83
 80025ec:	10624dd3 	.word	0x10624dd3

080025f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af02      	add	r7, sp, #8
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	607a      	str	r2, [r7, #4]
 80025fa:	461a      	mov	r2, r3
 80025fc:	460b      	mov	r3, r1
 80025fe:	817b      	strh	r3, [r7, #10]
 8002600:	4613      	mov	r3, r2
 8002602:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002604:	f7ff fc02 	bl	8001e0c <HAL_GetTick>
 8002608:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b20      	cmp	r3, #32
 8002614:	f040 80e0 	bne.w	80027d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002618:	697b      	ldr	r3, [r7, #20]
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	2319      	movs	r3, #25
 800261e:	2201      	movs	r2, #1
 8002620:	4970      	ldr	r1, [pc, #448]	@ (80027e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 fc9e 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800262e:	2302      	movs	r3, #2
 8002630:	e0d3      	b.n	80027da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <HAL_I2C_Master_Transmit+0x50>
 800263c:	2302      	movs	r3, #2
 800263e:	e0cc      	b.n	80027da <HAL_I2C_Master_Transmit+0x1ea>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b01      	cmp	r3, #1
 8002654:	d007      	beq.n	8002666 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f042 0201 	orr.w	r2, r2, #1
 8002664:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002674:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2221      	movs	r2, #33	@ 0x21
 800267a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2210      	movs	r2, #16
 8002682:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	893a      	ldrh	r2, [r7, #8]
 8002696:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800269c:	b29a      	uxth	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	4a50      	ldr	r2, [pc, #320]	@ (80027e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80026a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026a8:	8979      	ldrh	r1, [r7, #10]
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	6a3a      	ldr	r2, [r7, #32]
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 fb08 	bl	8002cc4 <I2C_MasterRequestWrite>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e08d      	b.n	80027da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026d4:	e066      	b.n	80027a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	6a39      	ldr	r1, [r7, #32]
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 fd5c 	bl	8003198 <I2C_WaitOnTXEFlagUntilTimeout>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00d      	beq.n	8002702 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d107      	bne.n	80026fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80026fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e06b      	b.n	80027da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002706:	781a      	ldrb	r2, [r3, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002712:	1c5a      	adds	r2, r3, #1
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800271c:	b29b      	uxth	r3, r3
 800271e:	3b01      	subs	r3, #1
 8002720:	b29a      	uxth	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800272a:	3b01      	subs	r3, #1
 800272c:	b29a      	uxth	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	695b      	ldr	r3, [r3, #20]
 8002738:	f003 0304 	and.w	r3, r3, #4
 800273c:	2b04      	cmp	r3, #4
 800273e:	d11b      	bne.n	8002778 <HAL_I2C_Master_Transmit+0x188>
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002744:	2b00      	cmp	r3, #0
 8002746:	d017      	beq.n	8002778 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800274c:	781a      	ldrb	r2, [r3, #0]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002762:	b29b      	uxth	r3, r3
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	6a39      	ldr	r1, [r7, #32]
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f000 fd53 	bl	8003228 <I2C_WaitOnBTFFlagUntilTimeout>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00d      	beq.n	80027a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278c:	2b04      	cmp	r3, #4
 800278e:	d107      	bne.n	80027a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800279e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e01a      	b.n	80027da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d194      	bne.n	80026d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2220      	movs	r2, #32
 80027c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2200      	movs	r2, #0
 80027d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80027d4:	2300      	movs	r3, #0
 80027d6:	e000      	b.n	80027da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80027d8:	2302      	movs	r3, #2
  }
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	00100002 	.word	0x00100002
 80027e8:	ffff0000 	.word	0xffff0000

080027ec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b08c      	sub	sp, #48	@ 0x30
 80027f0:	af02      	add	r7, sp, #8
 80027f2:	60f8      	str	r0, [r7, #12]
 80027f4:	607a      	str	r2, [r7, #4]
 80027f6:	461a      	mov	r2, r3
 80027f8:	460b      	mov	r3, r1
 80027fa:	817b      	strh	r3, [r7, #10]
 80027fc:	4613      	mov	r3, r2
 80027fe:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002804:	f7ff fb02 	bl	8001e0c <HAL_GetTick>
 8002808:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002810:	b2db      	uxtb	r3, r3
 8002812:	2b20      	cmp	r3, #32
 8002814:	f040 824b 	bne.w	8002cae <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	2319      	movs	r3, #25
 800281e:	2201      	movs	r2, #1
 8002820:	497f      	ldr	r1, [pc, #508]	@ (8002a20 <HAL_I2C_Master_Receive+0x234>)
 8002822:	68f8      	ldr	r0, [r7, #12]
 8002824:	f000 fb9e 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 8002828:	4603      	mov	r3, r0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800282e:	2302      	movs	r3, #2
 8002830:	e23e      	b.n	8002cb0 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002838:	2b01      	cmp	r3, #1
 800283a:	d101      	bne.n	8002840 <HAL_I2C_Master_Receive+0x54>
 800283c:	2302      	movs	r3, #2
 800283e:	e237      	b.n	8002cb0 <HAL_I2C_Master_Receive+0x4c4>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0301 	and.w	r3, r3, #1
 8002852:	2b01      	cmp	r3, #1
 8002854:	d007      	beq.n	8002866 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f042 0201 	orr.w	r2, r2, #1
 8002864:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002874:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2222      	movs	r2, #34	@ 0x22
 800287a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2210      	movs	r2, #16
 8002882:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2200      	movs	r2, #0
 800288a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	893a      	ldrh	r2, [r7, #8]
 8002896:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289c:	b29a      	uxth	r2, r3
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	4a5f      	ldr	r2, [pc, #380]	@ (8002a24 <HAL_I2C_Master_Receive+0x238>)
 80028a6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028a8:	8979      	ldrh	r1, [r7, #10]
 80028aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028ae:	68f8      	ldr	r0, [r7, #12]
 80028b0:	f000 fa8a 	bl	8002dc8 <I2C_MasterRequestRead>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e1f8      	b.n	8002cb0 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d113      	bne.n	80028ee <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028c6:	2300      	movs	r3, #0
 80028c8:	61fb      	str	r3, [r7, #28]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	695b      	ldr	r3, [r3, #20]
 80028d0:	61fb      	str	r3, [r7, #28]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	699b      	ldr	r3, [r3, #24]
 80028d8:	61fb      	str	r3, [r7, #28]
 80028da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	e1cc      	b.n	8002c88 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d11e      	bne.n	8002934 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002904:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002906:	b672      	cpsid	i
}
 8002908:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800290a:	2300      	movs	r3, #0
 800290c:	61bb      	str	r3, [r7, #24]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	61bb      	str	r3, [r7, #24]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	61bb      	str	r3, [r7, #24]
 800291e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800292e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002930:	b662      	cpsie	i
}
 8002932:	e035      	b.n	80029a0 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002938:	2b02      	cmp	r3, #2
 800293a:	d11e      	bne.n	800297a <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800294a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800294c:	b672      	cpsid	i
}
 800294e:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002950:	2300      	movs	r3, #0
 8002952:	617b      	str	r3, [r7, #20]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681a      	ldr	r2, [r3, #0]
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002974:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002976:	b662      	cpsie	i
}
 8002978:	e012      	b.n	80029a0 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002988:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800298a:	2300      	movs	r3, #0
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	695b      	ldr	r3, [r3, #20]
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80029a0:	e172      	b.n	8002c88 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029a6:	2b03      	cmp	r3, #3
 80029a8:	f200 811f 	bhi.w	8002bea <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b0:	2b01      	cmp	r3, #1
 80029b2:	d123      	bne.n	80029fc <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f000 fc7d 	bl	80032b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d001      	beq.n	80029c8 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e173      	b.n	8002cb0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	691a      	ldr	r2, [r3, #16]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029e4:	3b01      	subs	r3, #1
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	3b01      	subs	r3, #1
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029fa:	e145      	b.n	8002c88 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a00:	2b02      	cmp	r3, #2
 8002a02:	d152      	bne.n	8002aaa <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a06:	9300      	str	r3, [sp, #0]
 8002a08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	4906      	ldr	r1, [pc, #24]	@ (8002a28 <HAL_I2C_Master_Receive+0x23c>)
 8002a0e:	68f8      	ldr	r0, [r7, #12]
 8002a10:	f000 faa8 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d008      	beq.n	8002a2c <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e148      	b.n	8002cb0 <HAL_I2C_Master_Receive+0x4c4>
 8002a1e:	bf00      	nop
 8002a20:	00100002 	.word	0x00100002
 8002a24:	ffff0000 	.word	0xffff0000
 8002a28:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002a2c:	b672      	cpsid	i
}
 8002a2e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	691a      	ldr	r2, [r3, #16]
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a52:	1c5a      	adds	r2, r3, #1
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002a72:	b662      	cpsie	i
}
 8002a74:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	691a      	ldr	r2, [r3, #16]
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a92:	3b01      	subs	r3, #1
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002aa8:	e0ee      	b.n	8002c88 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	4981      	ldr	r1, [pc, #516]	@ (8002cb8 <HAL_I2C_Master_Receive+0x4cc>)
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 fa55 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0f5      	b.n	8002cb0 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ad2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002ad4:	b672      	cpsid	i
}
 8002ad6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691a      	ldr	r2, [r3, #16]
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ae2:	b2d2      	uxtb	r2, r2
 8002ae4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002af4:	3b01      	subs	r3, #1
 8002af6:	b29a      	uxth	r2, r3
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	3b01      	subs	r3, #1
 8002b04:	b29a      	uxth	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b0a:	4b6c      	ldr	r3, [pc, #432]	@ (8002cbc <HAL_I2C_Master_Receive+0x4d0>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	08db      	lsrs	r3, r3, #3
 8002b10:	4a6b      	ldr	r2, [pc, #428]	@ (8002cc0 <HAL_I2C_Master_Receive+0x4d4>)
 8002b12:	fba2 2303 	umull	r2, r3, r2, r3
 8002b16:	0a1a      	lsrs	r2, r3, #8
 8002b18:	4613      	mov	r3, r2
 8002b1a:	009b      	lsls	r3, r3, #2
 8002b1c:	4413      	add	r3, r2
 8002b1e:	00da      	lsls	r2, r3, #3
 8002b20:	1ad3      	subs	r3, r2, r3
 8002b22:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d118      	bne.n	8002b62 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2220      	movs	r2, #32
 8002b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4a:	f043 0220 	orr.w	r2, r3, #32
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002b52:	b662      	cpsie	i
}
 8002b54:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e0a6      	b.n	8002cb0 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	f003 0304 	and.w	r3, r3, #4
 8002b6c:	2b04      	cmp	r3, #4
 8002b6e:	d1d9      	bne.n	8002b24 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691a      	ldr	r2, [r3, #16]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8a:	b2d2      	uxtb	r2, r2
 8002b8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b92:	1c5a      	adds	r2, r3, #1
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002bb2:	b662      	cpsie	i
}
 8002bb4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	691a      	ldr	r2, [r3, #16]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc0:	b2d2      	uxtb	r2, r2
 8002bc2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc8:	1c5a      	adds	r2, r3, #1
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd2:	3b01      	subs	r3, #1
 8002bd4:	b29a      	uxth	r2, r3
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002be8:	e04e      	b.n	8002c88 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f000 fb62 	bl	80032b8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e058      	b.n	8002cb0 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	691a      	ldr	r2, [r3, #16]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c08:	b2d2      	uxtb	r2, r2
 8002c0a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c10:	1c5a      	adds	r2, r3, #1
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c1a:	3b01      	subs	r3, #1
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	b29a      	uxth	r2, r3
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	695b      	ldr	r3, [r3, #20]
 8002c36:	f003 0304 	and.w	r3, r3, #4
 8002c3a:	2b04      	cmp	r3, #4
 8002c3c:	d124      	bne.n	8002c88 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c42:	2b03      	cmp	r3, #3
 8002c44:	d107      	bne.n	8002c56 <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c54:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	691a      	ldr	r2, [r3, #16]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c60:	b2d2      	uxtb	r2, r2
 8002c62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c68:	1c5a      	adds	r2, r3, #1
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c72:	3b01      	subs	r3, #1
 8002c74:	b29a      	uxth	r2, r3
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	3b01      	subs	r3, #1
 8002c82:	b29a      	uxth	r2, r3
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	f47f ae88 	bne.w	80029a2 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2220      	movs	r2, #32
 8002c96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002caa:	2300      	movs	r3, #0
 8002cac:	e000      	b.n	8002cb0 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002cae:	2302      	movs	r3, #2
  }
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3728      	adds	r7, #40	@ 0x28
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	00010004 	.word	0x00010004
 8002cbc:	20000000 	.word	0x20000000
 8002cc0:	14f8b589 	.word	0x14f8b589

08002cc4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b088      	sub	sp, #32
 8002cc8:	af02      	add	r7, sp, #8
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	607a      	str	r2, [r7, #4]
 8002cce:	603b      	str	r3, [r7, #0]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cd8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d006      	beq.n	8002cee <I2C_MasterRequestWrite+0x2a>
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d003      	beq.n	8002cee <I2C_MasterRequestWrite+0x2a>
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002cec:	d108      	bne.n	8002d00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002cfc:	601a      	str	r2, [r3, #0]
 8002cfe:	e00b      	b.n	8002d18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d04:	2b12      	cmp	r3, #18
 8002d06:	d107      	bne.n	8002d18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002d16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	9300      	str	r3, [sp, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002d24:	68f8      	ldr	r0, [r7, #12]
 8002d26:	f000 f91d 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00d      	beq.n	8002d4c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d3e:	d103      	bne.n	8002d48 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002d46:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002d48:	2303      	movs	r3, #3
 8002d4a:	e035      	b.n	8002db8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d54:	d108      	bne.n	8002d68 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d56:	897b      	ldrh	r3, [r7, #10]
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002d64:	611a      	str	r2, [r3, #16]
 8002d66:	e01b      	b.n	8002da0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d68:	897b      	ldrh	r3, [r7, #10]
 8002d6a:	11db      	asrs	r3, r3, #7
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	f003 0306 	and.w	r3, r3, #6
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	f063 030f 	orn	r3, r3, #15
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	490e      	ldr	r1, [pc, #56]	@ (8002dc0 <I2C_MasterRequestWrite+0xfc>)
 8002d86:	68f8      	ldr	r0, [r7, #12]
 8002d88:	f000 f966 	bl	8003058 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e010      	b.n	8002db8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d96:	897b      	ldrh	r3, [r7, #10]
 8002d98:	b2da      	uxtb	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	4907      	ldr	r1, [pc, #28]	@ (8002dc4 <I2C_MasterRequestWrite+0x100>)
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 f956 	bl	8003058 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3718      	adds	r7, #24
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	00010008 	.word	0x00010008
 8002dc4:	00010002 	.word	0x00010002

08002dc8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b088      	sub	sp, #32
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	607a      	str	r2, [r7, #4]
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ddc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681a      	ldr	r2, [r3, #0]
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002dec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	2b08      	cmp	r3, #8
 8002df2:	d006      	beq.n	8002e02 <I2C_MasterRequestRead+0x3a>
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d003      	beq.n	8002e02 <I2C_MasterRequestRead+0x3a>
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002e00:	d108      	bne.n	8002e14 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	e00b      	b.n	8002e2c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e18:	2b11      	cmp	r3, #17
 8002e1a:	d107      	bne.n	8002e2c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	9300      	str	r3, [sp, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2200      	movs	r2, #0
 8002e34:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f000 f893 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00d      	beq.n	8002e60 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e52:	d103      	bne.n	8002e5c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e5a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e079      	b.n	8002f54 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e68:	d108      	bne.n	8002e7c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002e6a:	897b      	ldrh	r3, [r7, #10]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	f043 0301 	orr.w	r3, r3, #1
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	611a      	str	r2, [r3, #16]
 8002e7a:	e05f      	b.n	8002f3c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e7c:	897b      	ldrh	r3, [r7, #10]
 8002e7e:	11db      	asrs	r3, r3, #7
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	f003 0306 	and.w	r3, r3, #6
 8002e86:	b2db      	uxtb	r3, r3
 8002e88:	f063 030f 	orn	r3, r3, #15
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	4930      	ldr	r1, [pc, #192]	@ (8002f5c <I2C_MasterRequestRead+0x194>)
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f000 f8dc 	bl	8003058 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e054      	b.n	8002f54 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002eaa:	897b      	ldrh	r3, [r7, #10]
 8002eac:	b2da      	uxtb	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	687a      	ldr	r2, [r7, #4]
 8002eb8:	4929      	ldr	r1, [pc, #164]	@ (8002f60 <I2C_MasterRequestRead+0x198>)
 8002eba:	68f8      	ldr	r0, [r7, #12]
 8002ebc:	f000 f8cc 	bl	8003058 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e044      	b.n	8002f54 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eca:	2300      	movs	r3, #0
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002eee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 f831 	bl	8002f64 <I2C_WaitOnFlagUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00d      	beq.n	8002f24 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f16:	d103      	bne.n	8002f20 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f1e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8002f20:	2303      	movs	r3, #3
 8002f22:	e017      	b.n	8002f54 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002f24:	897b      	ldrh	r3, [r7, #10]
 8002f26:	11db      	asrs	r3, r3, #7
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	f003 0306 	and.w	r3, r3, #6
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	f063 030e 	orn	r3, r3, #14
 8002f34:	b2da      	uxtb	r2, r3
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	687a      	ldr	r2, [r7, #4]
 8002f40:	4907      	ldr	r1, [pc, #28]	@ (8002f60 <I2C_MasterRequestRead+0x198>)
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f000 f888 	bl	8003058 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f48:	4603      	mov	r3, r0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3718      	adds	r7, #24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	00010008 	.word	0x00010008
 8002f60:	00010002 	.word	0x00010002

08002f64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	603b      	str	r3, [r7, #0]
 8002f70:	4613      	mov	r3, r2
 8002f72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f74:	e048      	b.n	8003008 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7c:	d044      	beq.n	8003008 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f7e:	f7fe ff45 	bl	8001e0c <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d302      	bcc.n	8002f94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d139      	bne.n	8003008 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	0c1b      	lsrs	r3, r3, #16
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d10d      	bne.n	8002fba <I2C_WaitOnFlagUntilTimeout+0x56>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	695b      	ldr	r3, [r3, #20]
 8002fa4:	43da      	mvns	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	bf0c      	ite	eq
 8002fb0:	2301      	moveq	r3, #1
 8002fb2:	2300      	movne	r3, #0
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	e00c      	b.n	8002fd4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	43da      	mvns	r2, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf0c      	ite	eq
 8002fcc:	2301      	moveq	r3, #1
 8002fce:	2300      	movne	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	461a      	mov	r2, r3
 8002fd4:	79fb      	ldrb	r3, [r7, #7]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d116      	bne.n	8003008 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff4:	f043 0220 	orr.w	r2, r3, #32
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e023      	b.n	8003050 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	0c1b      	lsrs	r3, r3, #16
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b01      	cmp	r3, #1
 8003010:	d10d      	bne.n	800302e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	43da      	mvns	r2, r3
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	4013      	ands	r3, r2
 800301e:	b29b      	uxth	r3, r3
 8003020:	2b00      	cmp	r3, #0
 8003022:	bf0c      	ite	eq
 8003024:	2301      	moveq	r3, #1
 8003026:	2300      	movne	r3, #0
 8003028:	b2db      	uxtb	r3, r3
 800302a:	461a      	mov	r2, r3
 800302c:	e00c      	b.n	8003048 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	699b      	ldr	r3, [r3, #24]
 8003034:	43da      	mvns	r2, r3
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	4013      	ands	r3, r2
 800303a:	b29b      	uxth	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	bf0c      	ite	eq
 8003040:	2301      	moveq	r3, #1
 8003042:	2300      	movne	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	461a      	mov	r2, r3
 8003048:	79fb      	ldrb	r3, [r7, #7]
 800304a:	429a      	cmp	r2, r3
 800304c:	d093      	beq.n	8002f76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3710      	adds	r7, #16
 8003054:	46bd      	mov	sp, r7
 8003056:	bd80      	pop	{r7, pc}

08003058 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	60f8      	str	r0, [r7, #12]
 8003060:	60b9      	str	r1, [r7, #8]
 8003062:	607a      	str	r2, [r7, #4]
 8003064:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003066:	e071      	b.n	800314c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003072:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003076:	d123      	bne.n	80030c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003086:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003090:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ac:	f043 0204 	orr.w	r2, r3, #4
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e067      	b.n	8003190 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c6:	d041      	beq.n	800314c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030c8:	f7fe fea0 	bl	8001e0c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d302      	bcc.n	80030de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d136      	bne.n	800314c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	0c1b      	lsrs	r3, r3, #16
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d10c      	bne.n	8003102 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	695b      	ldr	r3, [r3, #20]
 80030ee:	43da      	mvns	r2, r3
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	4013      	ands	r3, r2
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	bf14      	ite	ne
 80030fa:	2301      	movne	r3, #1
 80030fc:	2300      	moveq	r3, #0
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	e00b      	b.n	800311a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	699b      	ldr	r3, [r3, #24]
 8003108:	43da      	mvns	r2, r3
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	4013      	ands	r3, r2
 800310e:	b29b      	uxth	r3, r3
 8003110:	2b00      	cmp	r3, #0
 8003112:	bf14      	ite	ne
 8003114:	2301      	movne	r3, #1
 8003116:	2300      	moveq	r3, #0
 8003118:	b2db      	uxtb	r3, r3
 800311a:	2b00      	cmp	r3, #0
 800311c:	d016      	beq.n	800314c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2200      	movs	r2, #0
 8003122:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2220      	movs	r2, #32
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003138:	f043 0220 	orr.w	r2, r3, #32
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	2200      	movs	r2, #0
 8003144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e021      	b.n	8003190 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	0c1b      	lsrs	r3, r3, #16
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b01      	cmp	r3, #1
 8003154:	d10c      	bne.n	8003170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	43da      	mvns	r2, r3
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	4013      	ands	r3, r2
 8003162:	b29b      	uxth	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	bf14      	ite	ne
 8003168:	2301      	movne	r3, #1
 800316a:	2300      	moveq	r3, #0
 800316c:	b2db      	uxtb	r3, r3
 800316e:	e00b      	b.n	8003188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	43da      	mvns	r2, r3
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	4013      	ands	r3, r2
 800317c:	b29b      	uxth	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	bf14      	ite	ne
 8003182:	2301      	movne	r3, #1
 8003184:	2300      	moveq	r3, #0
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	f47f af6d 	bne.w	8003068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031a4:	e034      	b.n	8003210 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 f8e3 	bl	8003372 <I2C_IsAcknowledgeFailed>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e034      	b.n	8003220 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031bc:	d028      	beq.n	8003210 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031be:	f7fe fe25 	bl	8001e0c <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d302      	bcc.n	80031d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d11d      	bne.n	8003210 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031de:	2b80      	cmp	r3, #128	@ 0x80
 80031e0:	d016      	beq.n	8003210 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	2200      	movs	r2, #0
 80031e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fc:	f043 0220 	orr.w	r2, r3, #32
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e007      	b.n	8003220 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	695b      	ldr	r3, [r3, #20]
 8003216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800321a:	2b80      	cmp	r3, #128	@ 0x80
 800321c:	d1c3      	bne.n	80031a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800321e:	2300      	movs	r3, #0
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003234:	e034      	b.n	80032a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 f89b 	bl	8003372 <I2C_IsAcknowledgeFailed>
 800323c:	4603      	mov	r3, r0
 800323e:	2b00      	cmp	r3, #0
 8003240:	d001      	beq.n	8003246 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e034      	b.n	80032b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	f1b3 3fff 	cmp.w	r3, #4294967295
 800324c:	d028      	beq.n	80032a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800324e:	f7fe fddd 	bl	8001e0c <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	429a      	cmp	r2, r3
 800325c:	d302      	bcc.n	8003264 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d11d      	bne.n	80032a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	695b      	ldr	r3, [r3, #20]
 800326a:	f003 0304 	and.w	r3, r3, #4
 800326e:	2b04      	cmp	r3, #4
 8003270:	d016      	beq.n	80032a0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2220      	movs	r2, #32
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328c:	f043 0220 	orr.w	r2, r3, #32
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e007      	b.n	80032b0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f003 0304 	and.w	r3, r3, #4
 80032aa:	2b04      	cmp	r3, #4
 80032ac:	d1c3      	bne.n	8003236 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	60f8      	str	r0, [r7, #12]
 80032c0:	60b9      	str	r1, [r7, #8]
 80032c2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032c4:	e049      	b.n	800335a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	695b      	ldr	r3, [r3, #20]
 80032cc:	f003 0310 	and.w	r3, r3, #16
 80032d0:	2b10      	cmp	r3, #16
 80032d2:	d119      	bne.n	8003308 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f06f 0210 	mvn.w	r2, #16
 80032dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	2200      	movs	r2, #0
 80032e2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2220      	movs	r2, #32
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2200      	movs	r2, #0
 80032f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e030      	b.n	800336a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003308:	f7fe fd80 	bl	8001e0c <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	429a      	cmp	r2, r3
 8003316:	d302      	bcc.n	800331e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d11d      	bne.n	800335a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	695b      	ldr	r3, [r3, #20]
 8003324:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003328:	2b40      	cmp	r3, #64	@ 0x40
 800332a:	d016      	beq.n	800335a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2220      	movs	r2, #32
 8003336:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003346:	f043 0220 	orr.w	r2, r3, #32
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2200      	movs	r2, #0
 8003352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e007      	b.n	800336a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003364:	2b40      	cmp	r3, #64	@ 0x40
 8003366:	d1ae      	bne.n	80032c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003372:	b480      	push	{r7}
 8003374:	b083      	sub	sp, #12
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	695b      	ldr	r3, [r3, #20]
 8003380:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003384:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003388:	d11b      	bne.n	80033c2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003392:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	2220      	movs	r2, #32
 800339e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ae:	f043 0204 	orr.w	r2, r3, #4
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80033c2:	2300      	movs	r3, #0
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr
	...

080033d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e272      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	f000 8087 	beq.w	80034fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033f0:	4b92      	ldr	r3, [pc, #584]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f003 030c 	and.w	r3, r3, #12
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	d00c      	beq.n	8003416 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80033fc:	4b8f      	ldr	r3, [pc, #572]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f003 030c 	and.w	r3, r3, #12
 8003404:	2b08      	cmp	r3, #8
 8003406:	d112      	bne.n	800342e <HAL_RCC_OscConfig+0x5e>
 8003408:	4b8c      	ldr	r3, [pc, #560]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003410:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003414:	d10b      	bne.n	800342e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003416:	4b89      	ldr	r3, [pc, #548]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800341e:	2b00      	cmp	r3, #0
 8003420:	d06c      	beq.n	80034fc <HAL_RCC_OscConfig+0x12c>
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d168      	bne.n	80034fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e24c      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003436:	d106      	bne.n	8003446 <HAL_RCC_OscConfig+0x76>
 8003438:	4b80      	ldr	r3, [pc, #512]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a7f      	ldr	r2, [pc, #508]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 800343e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003442:	6013      	str	r3, [r2, #0]
 8003444:	e02e      	b.n	80034a4 <HAL_RCC_OscConfig+0xd4>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10c      	bne.n	8003468 <HAL_RCC_OscConfig+0x98>
 800344e:	4b7b      	ldr	r3, [pc, #492]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a7a      	ldr	r2, [pc, #488]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003454:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	4b78      	ldr	r3, [pc, #480]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a77      	ldr	r2, [pc, #476]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003460:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	e01d      	b.n	80034a4 <HAL_RCC_OscConfig+0xd4>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003470:	d10c      	bne.n	800348c <HAL_RCC_OscConfig+0xbc>
 8003472:	4b72      	ldr	r3, [pc, #456]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a71      	ldr	r2, [pc, #452]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003478:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800347c:	6013      	str	r3, [r2, #0]
 800347e:	4b6f      	ldr	r3, [pc, #444]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a6e      	ldr	r2, [pc, #440]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003484:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	e00b      	b.n	80034a4 <HAL_RCC_OscConfig+0xd4>
 800348c:	4b6b      	ldr	r3, [pc, #428]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a6a      	ldr	r2, [pc, #424]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003492:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003496:	6013      	str	r3, [r2, #0]
 8003498:	4b68      	ldr	r3, [pc, #416]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a67      	ldr	r2, [pc, #412]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 800349e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d013      	beq.n	80034d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ac:	f7fe fcae 	bl	8001e0c <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034b4:	f7fe fcaa 	bl	8001e0c <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b64      	cmp	r3, #100	@ 0x64
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e200      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034c6:	4b5d      	ldr	r3, [pc, #372]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f0      	beq.n	80034b4 <HAL_RCC_OscConfig+0xe4>
 80034d2:	e014      	b.n	80034fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034d4:	f7fe fc9a 	bl	8001e0c <HAL_GetTick>
 80034d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034da:	e008      	b.n	80034ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034dc:	f7fe fc96 	bl	8001e0c <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	693b      	ldr	r3, [r7, #16]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	2b64      	cmp	r3, #100	@ 0x64
 80034e8:	d901      	bls.n	80034ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80034ea:	2303      	movs	r3, #3
 80034ec:	e1ec      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ee:	4b53      	ldr	r3, [pc, #332]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1f0      	bne.n	80034dc <HAL_RCC_OscConfig+0x10c>
 80034fa:	e000      	b.n	80034fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d063      	beq.n	80035d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800350a:	4b4c      	ldr	r3, [pc, #304]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f003 030c 	and.w	r3, r3, #12
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00b      	beq.n	800352e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003516:	4b49      	ldr	r3, [pc, #292]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f003 030c 	and.w	r3, r3, #12
 800351e:	2b08      	cmp	r3, #8
 8003520:	d11c      	bne.n	800355c <HAL_RCC_OscConfig+0x18c>
 8003522:	4b46      	ldr	r3, [pc, #280]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800352a:	2b00      	cmp	r3, #0
 800352c:	d116      	bne.n	800355c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800352e:	4b43      	ldr	r3, [pc, #268]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b00      	cmp	r3, #0
 8003538:	d005      	beq.n	8003546 <HAL_RCC_OscConfig+0x176>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d001      	beq.n	8003546 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003542:	2301      	movs	r3, #1
 8003544:	e1c0      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003546:	4b3d      	ldr	r3, [pc, #244]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	4939      	ldr	r1, [pc, #228]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003556:	4313      	orrs	r3, r2
 8003558:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800355a:	e03a      	b.n	80035d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	691b      	ldr	r3, [r3, #16]
 8003560:	2b00      	cmp	r3, #0
 8003562:	d020      	beq.n	80035a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003564:	4b36      	ldr	r3, [pc, #216]	@ (8003640 <HAL_RCC_OscConfig+0x270>)
 8003566:	2201      	movs	r2, #1
 8003568:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356a:	f7fe fc4f 	bl	8001e0c <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003570:	e008      	b.n	8003584 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003572:	f7fe fc4b 	bl	8001e0c <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	1ad3      	subs	r3, r2, r3
 800357c:	2b02      	cmp	r3, #2
 800357e:	d901      	bls.n	8003584 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e1a1      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003584:	4b2d      	ldr	r3, [pc, #180]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	2b00      	cmp	r3, #0
 800358e:	d0f0      	beq.n	8003572 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003590:	4b2a      	ldr	r3, [pc, #168]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	4927      	ldr	r1, [pc, #156]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 80035a0:	4313      	orrs	r3, r2
 80035a2:	600b      	str	r3, [r1, #0]
 80035a4:	e015      	b.n	80035d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035a6:	4b26      	ldr	r3, [pc, #152]	@ (8003640 <HAL_RCC_OscConfig+0x270>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ac:	f7fe fc2e 	bl	8001e0c <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035b4:	f7fe fc2a 	bl	8001e0c <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e180      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035c6:	4b1d      	ldr	r3, [pc, #116]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 0302 	and.w	r3, r3, #2
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1f0      	bne.n	80035b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0308 	and.w	r3, r3, #8
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d03a      	beq.n	8003654 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d019      	beq.n	800361a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035e6:	4b17      	ldr	r3, [pc, #92]	@ (8003644 <HAL_RCC_OscConfig+0x274>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ec:	f7fe fc0e 	bl	8001e0c <HAL_GetTick>
 80035f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f2:	e008      	b.n	8003606 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035f4:	f7fe fc0a 	bl	8001e0c <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	2b02      	cmp	r3, #2
 8003600:	d901      	bls.n	8003606 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e160      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003606:	4b0d      	ldr	r3, [pc, #52]	@ (800363c <HAL_RCC_OscConfig+0x26c>)
 8003608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d0f0      	beq.n	80035f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003612:	2001      	movs	r0, #1
 8003614:	f000 faba 	bl	8003b8c <RCC_Delay>
 8003618:	e01c      	b.n	8003654 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800361a:	4b0a      	ldr	r3, [pc, #40]	@ (8003644 <HAL_RCC_OscConfig+0x274>)
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003620:	f7fe fbf4 	bl	8001e0c <HAL_GetTick>
 8003624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003626:	e00f      	b.n	8003648 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003628:	f7fe fbf0 	bl	8001e0c <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	2b02      	cmp	r3, #2
 8003634:	d908      	bls.n	8003648 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003636:	2303      	movs	r3, #3
 8003638:	e146      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
 800363a:	bf00      	nop
 800363c:	40021000 	.word	0x40021000
 8003640:	42420000 	.word	0x42420000
 8003644:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003648:	4b92      	ldr	r3, [pc, #584]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 800364a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1e9      	bne.n	8003628 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	f000 80a6 	beq.w	80037ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003662:	2300      	movs	r3, #0
 8003664:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003666:	4b8b      	ldr	r3, [pc, #556]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800366e:	2b00      	cmp	r3, #0
 8003670:	d10d      	bne.n	800368e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003672:	4b88      	ldr	r3, [pc, #544]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 8003674:	69db      	ldr	r3, [r3, #28]
 8003676:	4a87      	ldr	r2, [pc, #540]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 8003678:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800367c:	61d3      	str	r3, [r2, #28]
 800367e:	4b85      	ldr	r3, [pc, #532]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 8003680:	69db      	ldr	r3, [r3, #28]
 8003682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003686:	60bb      	str	r3, [r7, #8]
 8003688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800368a:	2301      	movs	r3, #1
 800368c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800368e:	4b82      	ldr	r3, [pc, #520]	@ (8003898 <HAL_RCC_OscConfig+0x4c8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003696:	2b00      	cmp	r3, #0
 8003698:	d118      	bne.n	80036cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800369a:	4b7f      	ldr	r3, [pc, #508]	@ (8003898 <HAL_RCC_OscConfig+0x4c8>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a7e      	ldr	r2, [pc, #504]	@ (8003898 <HAL_RCC_OscConfig+0x4c8>)
 80036a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036a6:	f7fe fbb1 	bl	8001e0c <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ae:	f7fe fbad 	bl	8001e0c <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b64      	cmp	r3, #100	@ 0x64
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e103      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c0:	4b75      	ldr	r3, [pc, #468]	@ (8003898 <HAL_RCC_OscConfig+0x4c8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d0f0      	beq.n	80036ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	68db      	ldr	r3, [r3, #12]
 80036d0:	2b01      	cmp	r3, #1
 80036d2:	d106      	bne.n	80036e2 <HAL_RCC_OscConfig+0x312>
 80036d4:	4b6f      	ldr	r3, [pc, #444]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	4a6e      	ldr	r2, [pc, #440]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 80036da:	f043 0301 	orr.w	r3, r3, #1
 80036de:	6213      	str	r3, [r2, #32]
 80036e0:	e02d      	b.n	800373e <HAL_RCC_OscConfig+0x36e>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10c      	bne.n	8003704 <HAL_RCC_OscConfig+0x334>
 80036ea:	4b6a      	ldr	r3, [pc, #424]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	4a69      	ldr	r2, [pc, #420]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 80036f0:	f023 0301 	bic.w	r3, r3, #1
 80036f4:	6213      	str	r3, [r2, #32]
 80036f6:	4b67      	ldr	r3, [pc, #412]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	4a66      	ldr	r2, [pc, #408]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 80036fc:	f023 0304 	bic.w	r3, r3, #4
 8003700:	6213      	str	r3, [r2, #32]
 8003702:	e01c      	b.n	800373e <HAL_RCC_OscConfig+0x36e>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	2b05      	cmp	r3, #5
 800370a:	d10c      	bne.n	8003726 <HAL_RCC_OscConfig+0x356>
 800370c:	4b61      	ldr	r3, [pc, #388]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 800370e:	6a1b      	ldr	r3, [r3, #32]
 8003710:	4a60      	ldr	r2, [pc, #384]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 8003712:	f043 0304 	orr.w	r3, r3, #4
 8003716:	6213      	str	r3, [r2, #32]
 8003718:	4b5e      	ldr	r3, [pc, #376]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	4a5d      	ldr	r2, [pc, #372]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 800371e:	f043 0301 	orr.w	r3, r3, #1
 8003722:	6213      	str	r3, [r2, #32]
 8003724:	e00b      	b.n	800373e <HAL_RCC_OscConfig+0x36e>
 8003726:	4b5b      	ldr	r3, [pc, #364]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 8003728:	6a1b      	ldr	r3, [r3, #32]
 800372a:	4a5a      	ldr	r2, [pc, #360]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 800372c:	f023 0301 	bic.w	r3, r3, #1
 8003730:	6213      	str	r3, [r2, #32]
 8003732:	4b58      	ldr	r3, [pc, #352]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	4a57      	ldr	r2, [pc, #348]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 8003738:	f023 0304 	bic.w	r3, r3, #4
 800373c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d015      	beq.n	8003772 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003746:	f7fe fb61 	bl	8001e0c <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800374c:	e00a      	b.n	8003764 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800374e:	f7fe fb5d 	bl	8001e0c <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	f241 3288 	movw	r2, #5000	@ 0x1388
 800375c:	4293      	cmp	r3, r2
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e0b1      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003764:	4b4b      	ldr	r3, [pc, #300]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 8003766:	6a1b      	ldr	r3, [r3, #32]
 8003768:	f003 0302 	and.w	r3, r3, #2
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0ee      	beq.n	800374e <HAL_RCC_OscConfig+0x37e>
 8003770:	e014      	b.n	800379c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003772:	f7fe fb4b 	bl	8001e0c <HAL_GetTick>
 8003776:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003778:	e00a      	b.n	8003790 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800377a:	f7fe fb47 	bl	8001e0c <HAL_GetTick>
 800377e:	4602      	mov	r2, r0
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	1ad3      	subs	r3, r2, r3
 8003784:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003788:	4293      	cmp	r3, r2
 800378a:	d901      	bls.n	8003790 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800378c:	2303      	movs	r3, #3
 800378e:	e09b      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003790:	4b40      	ldr	r3, [pc, #256]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 8003792:	6a1b      	ldr	r3, [r3, #32]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d1ee      	bne.n	800377a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800379c:	7dfb      	ldrb	r3, [r7, #23]
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d105      	bne.n	80037ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037a2:	4b3c      	ldr	r3, [pc, #240]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	4a3b      	ldr	r2, [pc, #236]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 80037a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69db      	ldr	r3, [r3, #28]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	f000 8087 	beq.w	80038c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80037b8:	4b36      	ldr	r3, [pc, #216]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f003 030c 	and.w	r3, r3, #12
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d061      	beq.n	8003888 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d146      	bne.n	800385a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037cc:	4b33      	ldr	r3, [pc, #204]	@ (800389c <HAL_RCC_OscConfig+0x4cc>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d2:	f7fe fb1b 	bl	8001e0c <HAL_GetTick>
 80037d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037d8:	e008      	b.n	80037ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037da:	f7fe fb17 	bl	8001e0c <HAL_GetTick>
 80037de:	4602      	mov	r2, r0
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	1ad3      	subs	r3, r2, r3
 80037e4:	2b02      	cmp	r3, #2
 80037e6:	d901      	bls.n	80037ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80037e8:	2303      	movs	r3, #3
 80037ea:	e06d      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ec:	4b29      	ldr	r3, [pc, #164]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1f0      	bne.n	80037da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6a1b      	ldr	r3, [r3, #32]
 80037fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003800:	d108      	bne.n	8003814 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003802:	4b24      	ldr	r3, [pc, #144]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	4921      	ldr	r1, [pc, #132]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 8003810:	4313      	orrs	r3, r2
 8003812:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003814:	4b1f      	ldr	r3, [pc, #124]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a19      	ldr	r1, [r3, #32]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003824:	430b      	orrs	r3, r1
 8003826:	491b      	ldr	r1, [pc, #108]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 8003828:	4313      	orrs	r3, r2
 800382a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800382c:	4b1b      	ldr	r3, [pc, #108]	@ (800389c <HAL_RCC_OscConfig+0x4cc>)
 800382e:	2201      	movs	r2, #1
 8003830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003832:	f7fe faeb 	bl	8001e0c <HAL_GetTick>
 8003836:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003838:	e008      	b.n	800384c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800383a:	f7fe fae7 	bl	8001e0c <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d901      	bls.n	800384c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003848:	2303      	movs	r3, #3
 800384a:	e03d      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800384c:	4b11      	ldr	r3, [pc, #68]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d0f0      	beq.n	800383a <HAL_RCC_OscConfig+0x46a>
 8003858:	e035      	b.n	80038c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800385a:	4b10      	ldr	r3, [pc, #64]	@ (800389c <HAL_RCC_OscConfig+0x4cc>)
 800385c:	2200      	movs	r2, #0
 800385e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003860:	f7fe fad4 	bl	8001e0c <HAL_GetTick>
 8003864:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003866:	e008      	b.n	800387a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003868:	f7fe fad0 	bl	8001e0c <HAL_GetTick>
 800386c:	4602      	mov	r2, r0
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	1ad3      	subs	r3, r2, r3
 8003872:	2b02      	cmp	r3, #2
 8003874:	d901      	bls.n	800387a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003876:	2303      	movs	r3, #3
 8003878:	e026      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800387a:	4b06      	ldr	r3, [pc, #24]	@ (8003894 <HAL_RCC_OscConfig+0x4c4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d1f0      	bne.n	8003868 <HAL_RCC_OscConfig+0x498>
 8003886:	e01e      	b.n	80038c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	69db      	ldr	r3, [r3, #28]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d107      	bne.n	80038a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e019      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
 8003894:	40021000 	.word	0x40021000
 8003898:	40007000 	.word	0x40007000
 800389c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80038a0:	4b0b      	ldr	r3, [pc, #44]	@ (80038d0 <HAL_RCC_OscConfig+0x500>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d106      	bne.n	80038c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038be:	429a      	cmp	r2, r3
 80038c0:	d001      	beq.n	80038c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e000      	b.n	80038c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80038c6:	2300      	movs	r3, #0
}
 80038c8:	4618      	mov	r0, r3
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40021000 	.word	0x40021000

080038d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
 80038dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e0d0      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80038e8:	4b6a      	ldr	r3, [pc, #424]	@ (8003a94 <HAL_RCC_ClockConfig+0x1c0>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0307 	and.w	r3, r3, #7
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d910      	bls.n	8003918 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038f6:	4b67      	ldr	r3, [pc, #412]	@ (8003a94 <HAL_RCC_ClockConfig+0x1c0>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f023 0207 	bic.w	r2, r3, #7
 80038fe:	4965      	ldr	r1, [pc, #404]	@ (8003a94 <HAL_RCC_ClockConfig+0x1c0>)
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	4313      	orrs	r3, r2
 8003904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003906:	4b63      	ldr	r3, [pc, #396]	@ (8003a94 <HAL_RCC_ClockConfig+0x1c0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0307 	and.w	r3, r3, #7
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	429a      	cmp	r2, r3
 8003912:	d001      	beq.n	8003918 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	e0b8      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0302 	and.w	r3, r3, #2
 8003920:	2b00      	cmp	r3, #0
 8003922:	d020      	beq.n	8003966 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	d005      	beq.n	800393c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003930:	4b59      	ldr	r3, [pc, #356]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	4a58      	ldr	r2, [pc, #352]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 8003936:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800393a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003948:	4b53      	ldr	r3, [pc, #332]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	4a52      	ldr	r2, [pc, #328]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 800394e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003952:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003954:	4b50      	ldr	r3, [pc, #320]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	494d      	ldr	r1, [pc, #308]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 8003962:	4313      	orrs	r3, r2
 8003964:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	2b00      	cmp	r3, #0
 8003970:	d040      	beq.n	80039f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d107      	bne.n	800398a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800397a:	4b47      	ldr	r3, [pc, #284]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003982:	2b00      	cmp	r3, #0
 8003984:	d115      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e07f      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b02      	cmp	r3, #2
 8003990:	d107      	bne.n	80039a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003992:	4b41      	ldr	r3, [pc, #260]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800399a:	2b00      	cmp	r3, #0
 800399c:	d109      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e073      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e06b      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039b2:	4b39      	ldr	r3, [pc, #228]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f023 0203 	bic.w	r2, r3, #3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	4936      	ldr	r1, [pc, #216]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039c4:	f7fe fa22 	bl	8001e0c <HAL_GetTick>
 80039c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ca:	e00a      	b.n	80039e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039cc:	f7fe fa1e 	bl	8001e0c <HAL_GetTick>
 80039d0:	4602      	mov	r2, r0
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	1ad3      	subs	r3, r2, r3
 80039d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039da:	4293      	cmp	r3, r2
 80039dc:	d901      	bls.n	80039e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039de:	2303      	movs	r3, #3
 80039e0:	e053      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e2:	4b2d      	ldr	r3, [pc, #180]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f003 020c 	and.w	r2, r3, #12
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d1eb      	bne.n	80039cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039f4:	4b27      	ldr	r3, [pc, #156]	@ (8003a94 <HAL_RCC_ClockConfig+0x1c0>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d210      	bcs.n	8003a24 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a02:	4b24      	ldr	r3, [pc, #144]	@ (8003a94 <HAL_RCC_ClockConfig+0x1c0>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f023 0207 	bic.w	r2, r3, #7
 8003a0a:	4922      	ldr	r1, [pc, #136]	@ (8003a94 <HAL_RCC_ClockConfig+0x1c0>)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a12:	4b20      	ldr	r3, [pc, #128]	@ (8003a94 <HAL_RCC_ClockConfig+0x1c0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0307 	and.w	r3, r3, #7
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d001      	beq.n	8003a24 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e032      	b.n	8003a8a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 0304 	and.w	r3, r3, #4
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d008      	beq.n	8003a42 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a30:	4b19      	ldr	r3, [pc, #100]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	4916      	ldr	r1, [pc, #88]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a3e:	4313      	orrs	r3, r2
 8003a40:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0308 	and.w	r3, r3, #8
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d009      	beq.n	8003a62 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a4e:	4b12      	ldr	r3, [pc, #72]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	691b      	ldr	r3, [r3, #16]
 8003a5a:	00db      	lsls	r3, r3, #3
 8003a5c:	490e      	ldr	r1, [pc, #56]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a62:	f000 f821 	bl	8003aa8 <HAL_RCC_GetSysClockFreq>
 8003a66:	4602      	mov	r2, r0
 8003a68:	4b0b      	ldr	r3, [pc, #44]	@ (8003a98 <HAL_RCC_ClockConfig+0x1c4>)
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	091b      	lsrs	r3, r3, #4
 8003a6e:	f003 030f 	and.w	r3, r3, #15
 8003a72:	490a      	ldr	r1, [pc, #40]	@ (8003a9c <HAL_RCC_ClockConfig+0x1c8>)
 8003a74:	5ccb      	ldrb	r3, [r1, r3]
 8003a76:	fa22 f303 	lsr.w	r3, r2, r3
 8003a7a:	4a09      	ldr	r2, [pc, #36]	@ (8003aa0 <HAL_RCC_ClockConfig+0x1cc>)
 8003a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a7e:	4b09      	ldr	r3, [pc, #36]	@ (8003aa4 <HAL_RCC_ClockConfig+0x1d0>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7fe f980 	bl	8001d88 <HAL_InitTick>

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40022000 	.word	0x40022000
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	08004614 	.word	0x08004614
 8003aa0:	20000000 	.word	0x20000000
 8003aa4:	20000008 	.word	0x20000008

08003aa8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b087      	sub	sp, #28
 8003aac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	60bb      	str	r3, [r7, #8]
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	617b      	str	r3, [r7, #20]
 8003aba:	2300      	movs	r3, #0
 8003abc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8003b3c <HAL_RCC_GetSysClockFreq+0x94>)
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f003 030c 	and.w	r3, r3, #12
 8003ace:	2b04      	cmp	r3, #4
 8003ad0:	d002      	beq.n	8003ad8 <HAL_RCC_GetSysClockFreq+0x30>
 8003ad2:	2b08      	cmp	r3, #8
 8003ad4:	d003      	beq.n	8003ade <HAL_RCC_GetSysClockFreq+0x36>
 8003ad6:	e027      	b.n	8003b28 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ad8:	4b19      	ldr	r3, [pc, #100]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0x98>)
 8003ada:	613b      	str	r3, [r7, #16]
      break;
 8003adc:	e027      	b.n	8003b2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	0c9b      	lsrs	r3, r3, #18
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	4a17      	ldr	r2, [pc, #92]	@ (8003b44 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003ae8:	5cd3      	ldrb	r3, [r2, r3]
 8003aea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d010      	beq.n	8003b18 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003af6:	4b11      	ldr	r3, [pc, #68]	@ (8003b3c <HAL_RCC_GetSysClockFreq+0x94>)
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	0c5b      	lsrs	r3, r3, #17
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	4a11      	ldr	r2, [pc, #68]	@ (8003b48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003b02:	5cd3      	ldrb	r3, [r2, r3]
 8003b04:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a0d      	ldr	r2, [pc, #52]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b0a:	fb03 f202 	mul.w	r2, r3, r2
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b14:	617b      	str	r3, [r7, #20]
 8003b16:	e004      	b.n	8003b22 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a0c      	ldr	r2, [pc, #48]	@ (8003b4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003b1c:	fb02 f303 	mul.w	r3, r2, r3
 8003b20:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	613b      	str	r3, [r7, #16]
      break;
 8003b26:	e002      	b.n	8003b2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003b28:	4b05      	ldr	r3, [pc, #20]	@ (8003b40 <HAL_RCC_GetSysClockFreq+0x98>)
 8003b2a:	613b      	str	r3, [r7, #16]
      break;
 8003b2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b2e:	693b      	ldr	r3, [r7, #16]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	371c      	adds	r7, #28
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bc80      	pop	{r7}
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40021000 	.word	0x40021000
 8003b40:	007a1200 	.word	0x007a1200
 8003b44:	0800472c 	.word	0x0800472c
 8003b48:	0800473c 	.word	0x0800473c
 8003b4c:	003d0900 	.word	0x003d0900

08003b50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b50:	b480      	push	{r7}
 8003b52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b54:	4b02      	ldr	r3, [pc, #8]	@ (8003b60 <HAL_RCC_GetHCLKFreq+0x10>)
 8003b56:	681b      	ldr	r3, [r3, #0]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bc80      	pop	{r7}
 8003b5e:	4770      	bx	lr
 8003b60:	20000000 	.word	0x20000000

08003b64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b68:	f7ff fff2 	bl	8003b50 <HAL_RCC_GetHCLKFreq>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	4b05      	ldr	r3, [pc, #20]	@ (8003b84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	0a1b      	lsrs	r3, r3, #8
 8003b74:	f003 0307 	and.w	r3, r3, #7
 8003b78:	4903      	ldr	r1, [pc, #12]	@ (8003b88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b7a:	5ccb      	ldrb	r3, [r1, r3]
 8003b7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b80:	4618      	mov	r0, r3
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40021000 	.word	0x40021000
 8003b88:	08004624 	.word	0x08004624

08003b8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b94:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc0 <RCC_Delay+0x34>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a0a      	ldr	r2, [pc, #40]	@ (8003bc4 <RCC_Delay+0x38>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	0a5b      	lsrs	r3, r3, #9
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	fb02 f303 	mul.w	r3, r2, r3
 8003ba6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ba8:	bf00      	nop
  }
  while (Delay --);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	1e5a      	subs	r2, r3, #1
 8003bae:	60fa      	str	r2, [r7, #12]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1f9      	bne.n	8003ba8 <RCC_Delay+0x1c>
}
 8003bb4:	bf00      	nop
 8003bb6:	bf00      	nop
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bc80      	pop	{r7}
 8003bbe:	4770      	bx	lr
 8003bc0:	20000000 	.word	0x20000000
 8003bc4:	10624dd3 	.word	0x10624dd3

08003bc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e076      	b.n	8003cc8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d108      	bne.n	8003bf4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003bea:	d009      	beq.n	8003c00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	61da      	str	r2, [r3, #28]
 8003bf2:	e005      	b.n	8003c00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2200      	movs	r2, #0
 8003c04:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fd f976 	bl	8000f0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c48:	431a      	orrs	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c52:	431a      	orrs	r2, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	f003 0301 	and.w	r3, r3, #1
 8003c66:	431a      	orrs	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003c70:	431a      	orrs	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	69db      	ldr	r3, [r3, #28]
 8003c76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6a1b      	ldr	r3, [r3, #32]
 8003c80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c84:	ea42 0103 	orr.w	r1, r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	0c1a      	lsrs	r2, r3, #16
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f002 0204 	and.w	r2, r2, #4
 8003ca6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	69da      	ldr	r2, [r3, #28]
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003cb6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b088      	sub	sp, #32
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	603b      	str	r3, [r7, #0]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ce0:	f7fe f894 	bl	8001e0c <HAL_GetTick>
 8003ce4:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003ce6:	88fb      	ldrh	r3, [r7, #6]
 8003ce8:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d001      	beq.n	8003cfa <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	e12a      	b.n	8003f50 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <HAL_SPI_Transmit+0x36>
 8003d00:	88fb      	ldrh	r3, [r7, #6]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e122      	b.n	8003f50 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	d101      	bne.n	8003d18 <HAL_SPI_Transmit+0x48>
 8003d14:	2302      	movs	r3, #2
 8003d16:	e11b      	b.n	8003f50 <HAL_SPI_Transmit+0x280>
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2203      	movs	r2, #3
 8003d24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	68ba      	ldr	r2, [r7, #8]
 8003d32:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	88fa      	ldrh	r2, [r7, #6]
 8003d38:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	88fa      	ldrh	r2, [r7, #6]
 8003d3e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2200      	movs	r2, #0
 8003d56:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d66:	d10f      	bne.n	8003d88 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d76:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681a      	ldr	r2, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003d86:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d92:	2b40      	cmp	r3, #64	@ 0x40
 8003d94:	d007      	beq.n	8003da6 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003da4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003dae:	d152      	bne.n	8003e56 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d002      	beq.n	8003dbe <HAL_SPI_Transmit+0xee>
 8003db8:	8b7b      	ldrh	r3, [r7, #26]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d145      	bne.n	8003e4a <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc2:	881a      	ldrh	r2, [r3, #0]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dce:	1c9a      	adds	r2, r3, #2
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003dd8:	b29b      	uxth	r3, r3
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	b29a      	uxth	r2, r3
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003de2:	e032      	b.n	8003e4a <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d112      	bne.n	8003e18 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003df6:	881a      	ldrh	r2, [r3, #0]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e02:	1c9a      	adds	r2, r3, #2
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e0c:	b29b      	uxth	r3, r3
 8003e0e:	3b01      	subs	r3, #1
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003e16:	e018      	b.n	8003e4a <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e18:	f7fd fff8 	bl	8001e0c <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	683a      	ldr	r2, [r7, #0]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d803      	bhi.n	8003e30 <HAL_SPI_Transmit+0x160>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e2e:	d102      	bne.n	8003e36 <HAL_SPI_Transmit+0x166>
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d109      	bne.n	8003e4a <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e082      	b.n	8003f50 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e4e:	b29b      	uxth	r3, r3
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1c7      	bne.n	8003de4 <HAL_SPI_Transmit+0x114>
 8003e54:	e053      	b.n	8003efe <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <HAL_SPI_Transmit+0x194>
 8003e5e:	8b7b      	ldrh	r3, [r7, #26]
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	d147      	bne.n	8003ef4 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	330c      	adds	r3, #12
 8003e6e:	7812      	ldrb	r2, [r2, #0]
 8003e70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e76:	1c5a      	adds	r2, r3, #1
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	3b01      	subs	r3, #1
 8003e84:	b29a      	uxth	r2, r3
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e8a:	e033      	b.n	8003ef4 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d113      	bne.n	8003ec2 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	330c      	adds	r3, #12
 8003ea4:	7812      	ldrb	r2, [r2, #0]
 8003ea6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003eb6:	b29b      	uxth	r3, r3
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003ec0:	e018      	b.n	8003ef4 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ec2:	f7fd ffa3 	bl	8001e0c <HAL_GetTick>
 8003ec6:	4602      	mov	r2, r0
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	1ad3      	subs	r3, r2, r3
 8003ecc:	683a      	ldr	r2, [r7, #0]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d803      	bhi.n	8003eda <HAL_SPI_Transmit+0x20a>
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ed8:	d102      	bne.n	8003ee0 <HAL_SPI_Transmit+0x210>
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d109      	bne.n	8003ef4 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e02d      	b.n	8003f50 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1c6      	bne.n	8003e8c <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003efe:	69fa      	ldr	r2, [r7, #28]
 8003f00:	6839      	ldr	r1, [r7, #0]
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f000 fa5a 	bl	80043bc <SPI_EndRxTxTransaction>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d002      	beq.n	8003f14 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2220      	movs	r2, #32
 8003f12:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d10a      	bne.n	8003f32 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	617b      	str	r3, [r7, #20]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
 8003f26:	617b      	str	r3, [r7, #20]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2201      	movs	r2, #1
 8003f36:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	e000      	b.n	8003f50 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
  }
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3720      	adds	r7, #32
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b08a      	sub	sp, #40	@ 0x28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
 8003f64:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003f66:	2301      	movs	r3, #1
 8003f68:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003f6a:	f7fd ff4f 	bl	8001e0c <HAL_GetTick>
 8003f6e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f76:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003f7e:	887b      	ldrh	r3, [r7, #2]
 8003f80:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003f82:	7ffb      	ldrb	r3, [r7, #31]
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	d00c      	beq.n	8003fa2 <HAL_SPI_TransmitReceive+0x4a>
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f8e:	d106      	bne.n	8003f9e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	689b      	ldr	r3, [r3, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d102      	bne.n	8003f9e <HAL_SPI_TransmitReceive+0x46>
 8003f98:	7ffb      	ldrb	r3, [r7, #31]
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d001      	beq.n	8003fa2 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	e17f      	b.n	80042a2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <HAL_SPI_TransmitReceive+0x5c>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d002      	beq.n	8003fb4 <HAL_SPI_TransmitReceive+0x5c>
 8003fae:	887b      	ldrh	r3, [r7, #2]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e174      	b.n	80042a2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d101      	bne.n	8003fc6 <HAL_SPI_TransmitReceive+0x6e>
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	e16d      	b.n	80042a2 <HAL_SPI_TransmitReceive+0x34a>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	2b04      	cmp	r3, #4
 8003fd8:	d003      	beq.n	8003fe2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2205      	movs	r2, #5
 8003fde:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	887a      	ldrh	r2, [r7, #2]
 8003ff2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	887a      	ldrh	r2, [r7, #2]
 8003ff8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	68ba      	ldr	r2, [r7, #8]
 8003ffe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	887a      	ldrh	r2, [r7, #2]
 8004004:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	887a      	ldrh	r2, [r7, #2]
 800400a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2200      	movs	r2, #0
 8004010:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004022:	2b40      	cmp	r3, #64	@ 0x40
 8004024:	d007      	beq.n	8004036 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004034:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800403e:	d17e      	bne.n	800413e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <HAL_SPI_TransmitReceive+0xf6>
 8004048:	8afb      	ldrh	r3, [r7, #22]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d16c      	bne.n	8004128 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004052:	881a      	ldrh	r2, [r3, #0]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405e:	1c9a      	adds	r2, r3, #2
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004068:	b29b      	uxth	r3, r3
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004072:	e059      	b.n	8004128 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b02      	cmp	r3, #2
 8004080:	d11b      	bne.n	80040ba <HAL_SPI_TransmitReceive+0x162>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004086:	b29b      	uxth	r3, r3
 8004088:	2b00      	cmp	r3, #0
 800408a:	d016      	beq.n	80040ba <HAL_SPI_TransmitReceive+0x162>
 800408c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800408e:	2b01      	cmp	r3, #1
 8004090:	d113      	bne.n	80040ba <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004096:	881a      	ldrh	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a2:	1c9a      	adds	r2, r3, #2
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80040b6:	2300      	movs	r3, #0
 80040b8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b01      	cmp	r3, #1
 80040c6:	d119      	bne.n	80040fc <HAL_SPI_TransmitReceive+0x1a4>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d014      	beq.n	80040fc <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68da      	ldr	r2, [r3, #12]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040dc:	b292      	uxth	r2, r2
 80040de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040e4:	1c9a      	adds	r2, r3, #2
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80040ee:	b29b      	uxth	r3, r3
 80040f0:	3b01      	subs	r3, #1
 80040f2:	b29a      	uxth	r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80040f8:	2301      	movs	r3, #1
 80040fa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040fc:	f7fd fe86 	bl	8001e0c <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004108:	429a      	cmp	r2, r3
 800410a:	d80d      	bhi.n	8004128 <HAL_SPI_TransmitReceive+0x1d0>
 800410c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800410e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004112:	d009      	beq.n	8004128 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004124:	2303      	movs	r3, #3
 8004126:	e0bc      	b.n	80042a2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800412c:	b29b      	uxth	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1a0      	bne.n	8004074 <HAL_SPI_TransmitReceive+0x11c>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004136:	b29b      	uxth	r3, r3
 8004138:	2b00      	cmp	r3, #0
 800413a:	d19b      	bne.n	8004074 <HAL_SPI_TransmitReceive+0x11c>
 800413c:	e082      	b.n	8004244 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d002      	beq.n	800414c <HAL_SPI_TransmitReceive+0x1f4>
 8004146:	8afb      	ldrh	r3, [r7, #22]
 8004148:	2b01      	cmp	r3, #1
 800414a:	d171      	bne.n	8004230 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	330c      	adds	r3, #12
 8004156:	7812      	ldrb	r2, [r2, #0]
 8004158:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415e:	1c5a      	adds	r2, r3, #1
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004168:	b29b      	uxth	r3, r3
 800416a:	3b01      	subs	r3, #1
 800416c:	b29a      	uxth	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004172:	e05d      	b.n	8004230 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f003 0302 	and.w	r3, r3, #2
 800417e:	2b02      	cmp	r3, #2
 8004180:	d11c      	bne.n	80041bc <HAL_SPI_TransmitReceive+0x264>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004186:	b29b      	uxth	r3, r3
 8004188:	2b00      	cmp	r3, #0
 800418a:	d017      	beq.n	80041bc <HAL_SPI_TransmitReceive+0x264>
 800418c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800418e:	2b01      	cmp	r3, #1
 8004190:	d114      	bne.n	80041bc <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	330c      	adds	r3, #12
 800419c:	7812      	ldrb	r2, [r2, #0]
 800419e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a4:	1c5a      	adds	r2, r3, #1
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f003 0301 	and.w	r3, r3, #1
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d119      	bne.n	80041fe <HAL_SPI_TransmitReceive+0x2a6>
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d014      	beq.n	80041fe <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041de:	b2d2      	uxtb	r2, r2
 80041e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041e6:	1c5a      	adds	r2, r3, #1
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041fa:	2301      	movs	r3, #1
 80041fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041fe:	f7fd fe05 	bl	8001e0c <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	6a3b      	ldr	r3, [r7, #32]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800420a:	429a      	cmp	r2, r3
 800420c:	d803      	bhi.n	8004216 <HAL_SPI_TransmitReceive+0x2be>
 800420e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004214:	d102      	bne.n	800421c <HAL_SPI_TransmitReceive+0x2c4>
 8004216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004218:	2b00      	cmp	r3, #0
 800421a:	d109      	bne.n	8004230 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e038      	b.n	80042a2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004234:	b29b      	uxth	r3, r3
 8004236:	2b00      	cmp	r3, #0
 8004238:	d19c      	bne.n	8004174 <HAL_SPI_TransmitReceive+0x21c>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800423e:	b29b      	uxth	r3, r3
 8004240:	2b00      	cmp	r3, #0
 8004242:	d197      	bne.n	8004174 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004244:	6a3a      	ldr	r2, [r7, #32]
 8004246:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004248:	68f8      	ldr	r0, [r7, #12]
 800424a:	f000 f8b7 	bl	80043bc <SPI_EndRxTxTransaction>
 800424e:	4603      	mov	r3, r0
 8004250:	2b00      	cmp	r3, #0
 8004252:	d008      	beq.n	8004266 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2220      	movs	r2, #32
 8004258:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2200      	movs	r2, #0
 800425e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e01d      	b.n	80042a2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d10a      	bne.n	8004284 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800426e:	2300      	movs	r3, #0
 8004270:	613b      	str	r3, [r7, #16]
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	613b      	str	r3, [r7, #16]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	613b      	str	r3, [r7, #16]
 8004282:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80042a0:	2300      	movs	r3, #0
  }
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3728      	adds	r7, #40	@ 0x28
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
	...

080042ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b088      	sub	sp, #32
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	603b      	str	r3, [r7, #0]
 80042b8:	4613      	mov	r3, r2
 80042ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80042bc:	f7fd fda6 	bl	8001e0c <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	4413      	add	r3, r2
 80042ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80042cc:	f7fd fd9e 	bl	8001e0c <HAL_GetTick>
 80042d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80042d2:	4b39      	ldr	r3, [pc, #228]	@ (80043b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	015b      	lsls	r3, r3, #5
 80042d8:	0d1b      	lsrs	r3, r3, #20
 80042da:	69fa      	ldr	r2, [r7, #28]
 80042dc:	fb02 f303 	mul.w	r3, r2, r3
 80042e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042e2:	e054      	b.n	800438e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042ea:	d050      	beq.n	800438e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80042ec:	f7fd fd8e 	bl	8001e0c <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	69fa      	ldr	r2, [r7, #28]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d902      	bls.n	8004302 <SPI_WaitFlagStateUntilTimeout+0x56>
 80042fc:	69fb      	ldr	r3, [r7, #28]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d13d      	bne.n	800437e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004310:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800431a:	d111      	bne.n	8004340 <SPI_WaitFlagStateUntilTimeout+0x94>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004324:	d004      	beq.n	8004330 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800432e:	d107      	bne.n	8004340 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800433e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004344:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004348:	d10f      	bne.n	800436a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004358:	601a      	str	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004368:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2201      	movs	r2, #1
 800436e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e017      	b.n	80043ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d101      	bne.n	8004388 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	3b01      	subs	r3, #1
 800438c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	689a      	ldr	r2, [r3, #8]
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	4013      	ands	r3, r2
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	429a      	cmp	r2, r3
 800439c:	bf0c      	ite	eq
 800439e:	2301      	moveq	r3, #1
 80043a0:	2300      	movne	r3, #0
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	461a      	mov	r2, r3
 80043a6:	79fb      	ldrb	r3, [r7, #7]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d19b      	bne.n	80042e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80043ac:	2300      	movs	r3, #0
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3720      	adds	r7, #32
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20000000 	.word	0x20000000

080043bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af02      	add	r7, sp, #8
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	9300      	str	r3, [sp, #0]
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	2201      	movs	r2, #1
 80043d0:	2102      	movs	r1, #2
 80043d2:	68f8      	ldr	r0, [r7, #12]
 80043d4:	f7ff ff6a 	bl	80042ac <SPI_WaitFlagStateUntilTimeout>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d007      	beq.n	80043ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043e2:	f043 0220 	orr.w	r2, r3, #32
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e013      	b.n	8004416 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	9300      	str	r3, [sp, #0]
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	2200      	movs	r2, #0
 80043f6:	2180      	movs	r1, #128	@ 0x80
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f7ff ff57 	bl	80042ac <SPI_WaitFlagStateUntilTimeout>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d007      	beq.n	8004414 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004408:	f043 0220 	orr.w	r2, r3, #32
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004410:	2303      	movs	r3, #3
 8004412:	e000      	b.n	8004416 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
	...

08004420 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004424:	4904      	ldr	r1, [pc, #16]	@ (8004438 <MX_FATFS_Init+0x18>)
 8004426:	4805      	ldr	r0, [pc, #20]	@ (800443c <MX_FATFS_Init+0x1c>)
 8004428:	f000 f8ac 	bl	8004584 <FATFS_LinkDriver>
 800442c:	4603      	mov	r3, r0
 800442e:	461a      	mov	r2, r3
 8004430:	4b03      	ldr	r3, [pc, #12]	@ (8004440 <MX_FATFS_Init+0x20>)
 8004432:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004434:	bf00      	nop
 8004436:	bd80      	pop	{r7, pc}
 8004438:	200000fc 	.word	0x200000fc
 800443c:	20000010 	.word	0x20000010
 8004440:	200000f8 	.word	0x200000f8

08004444 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b082      	sub	sp, #8
 8004448:	af00      	add	r7, sp, #0
 800444a:	4603      	mov	r3, r0
 800444c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800444e:	79fb      	ldrb	r3, [r7, #7]
 8004450:	4618      	mov	r0, r3
 8004452:	f7fc ffed 	bl	8001430 <SD_disk_initialize>
 8004456:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8004458:	4618      	mov	r0, r3
 800445a:	3708      	adds	r7, #8
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b082      	sub	sp, #8
 8004464:	af00      	add	r7, sp, #0
 8004466:	4603      	mov	r3, r0
 8004468:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800446a:	79fb      	ldrb	r3, [r7, #7]
 800446c:	4618      	mov	r0, r3
 800446e:	f7fd f8cb 	bl	8001608 <SD_disk_status>
 8004472:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8004474:	4618      	mov	r0, r3
 8004476:	3708      	adds	r7, #8
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}

0800447c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	60b9      	str	r1, [r7, #8]
 8004484:	607a      	str	r2, [r7, #4]
 8004486:	603b      	str	r3, [r7, #0]
 8004488:	4603      	mov	r3, r0
 800448a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800448c:	7bf8      	ldrb	r0, [r7, #15]
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	687a      	ldr	r2, [r7, #4]
 8004492:	68b9      	ldr	r1, [r7, #8]
 8004494:	f7fd f8cc 	bl	8001630 <SD_disk_read>
 8004498:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b084      	sub	sp, #16
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
 80044ac:	603b      	str	r3, [r7, #0]
 80044ae:	4603      	mov	r3, r0
 80044b0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 80044b2:	7bf8      	ldrb	r0, [r7, #15]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	68b9      	ldr	r1, [r7, #8]
 80044ba:	f7fd f923 	bl	8001704 <SD_disk_write>
 80044be:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}

080044c8 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b082      	sub	sp, #8
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	4603      	mov	r3, r0
 80044d0:	603a      	str	r2, [r7, #0]
 80044d2:	71fb      	strb	r3, [r7, #7]
 80044d4:	460b      	mov	r3, r1
 80044d6:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 80044d8:	79b9      	ldrb	r1, [r7, #6]
 80044da:	79fb      	ldrb	r3, [r7, #7]
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	4618      	mov	r0, r3
 80044e0:	f7fd f994 	bl	800180c <SD_disk_ioctl>
 80044e4:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
	...

080044f0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b087      	sub	sp, #28
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	4613      	mov	r3, r2
 80044fc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80044fe:	2301      	movs	r3, #1
 8004500:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8004502:	2300      	movs	r3, #0
 8004504:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8004506:	4b1e      	ldr	r3, [pc, #120]	@ (8004580 <FATFS_LinkDriverEx+0x90>)
 8004508:	7a5b      	ldrb	r3, [r3, #9]
 800450a:	b2db      	uxtb	r3, r3
 800450c:	2b01      	cmp	r3, #1
 800450e:	d831      	bhi.n	8004574 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8004510:	4b1b      	ldr	r3, [pc, #108]	@ (8004580 <FATFS_LinkDriverEx+0x90>)
 8004512:	7a5b      	ldrb	r3, [r3, #9]
 8004514:	b2db      	uxtb	r3, r3
 8004516:	461a      	mov	r2, r3
 8004518:	4b19      	ldr	r3, [pc, #100]	@ (8004580 <FATFS_LinkDriverEx+0x90>)
 800451a:	2100      	movs	r1, #0
 800451c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 800451e:	4b18      	ldr	r3, [pc, #96]	@ (8004580 <FATFS_LinkDriverEx+0x90>)
 8004520:	7a5b      	ldrb	r3, [r3, #9]
 8004522:	b2db      	uxtb	r3, r3
 8004524:	4a16      	ldr	r2, [pc, #88]	@ (8004580 <FATFS_LinkDriverEx+0x90>)
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4413      	add	r3, r2
 800452a:	68fa      	ldr	r2, [r7, #12]
 800452c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 800452e:	4b14      	ldr	r3, [pc, #80]	@ (8004580 <FATFS_LinkDriverEx+0x90>)
 8004530:	7a5b      	ldrb	r3, [r3, #9]
 8004532:	b2db      	uxtb	r3, r3
 8004534:	461a      	mov	r2, r3
 8004536:	4b12      	ldr	r3, [pc, #72]	@ (8004580 <FATFS_LinkDriverEx+0x90>)
 8004538:	4413      	add	r3, r2
 800453a:	79fa      	ldrb	r2, [r7, #7]
 800453c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800453e:	4b10      	ldr	r3, [pc, #64]	@ (8004580 <FATFS_LinkDriverEx+0x90>)
 8004540:	7a5b      	ldrb	r3, [r3, #9]
 8004542:	b2db      	uxtb	r3, r3
 8004544:	1c5a      	adds	r2, r3, #1
 8004546:	b2d1      	uxtb	r1, r2
 8004548:	4a0d      	ldr	r2, [pc, #52]	@ (8004580 <FATFS_LinkDriverEx+0x90>)
 800454a:	7251      	strb	r1, [r2, #9]
 800454c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800454e:	7dbb      	ldrb	r3, [r7, #22]
 8004550:	3330      	adds	r3, #48	@ 0x30
 8004552:	b2da      	uxtb	r2, r3
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	3301      	adds	r3, #1
 800455c:	223a      	movs	r2, #58	@ 0x3a
 800455e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	3302      	adds	r3, #2
 8004564:	222f      	movs	r2, #47	@ 0x2f
 8004566:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	3303      	adds	r3, #3
 800456c:	2200      	movs	r2, #0
 800456e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8004574:	7dfb      	ldrb	r3, [r7, #23]
}
 8004576:	4618      	mov	r0, r3
 8004578:	371c      	adds	r7, #28
 800457a:	46bd      	mov	sp, r7
 800457c:	bc80      	pop	{r7}
 800457e:	4770      	bx	lr
 8004580:	20000100 	.word	0x20000100

08004584 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800458e:	2200      	movs	r2, #0
 8004590:	6839      	ldr	r1, [r7, #0]
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f7ff ffac 	bl	80044f0 <FATFS_LinkDriverEx>
 8004598:	4603      	mov	r3, r0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3708      	adds	r7, #8
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <memset>:
 80045a2:	4603      	mov	r3, r0
 80045a4:	4402      	add	r2, r0
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d100      	bne.n	80045ac <memset+0xa>
 80045aa:	4770      	bx	lr
 80045ac:	f803 1b01 	strb.w	r1, [r3], #1
 80045b0:	e7f9      	b.n	80045a6 <memset+0x4>
	...

080045b4 <__libc_init_array>:
 80045b4:	b570      	push	{r4, r5, r6, lr}
 80045b6:	2600      	movs	r6, #0
 80045b8:	4d0c      	ldr	r5, [pc, #48]	@ (80045ec <__libc_init_array+0x38>)
 80045ba:	4c0d      	ldr	r4, [pc, #52]	@ (80045f0 <__libc_init_array+0x3c>)
 80045bc:	1b64      	subs	r4, r4, r5
 80045be:	10a4      	asrs	r4, r4, #2
 80045c0:	42a6      	cmp	r6, r4
 80045c2:	d109      	bne.n	80045d8 <__libc_init_array+0x24>
 80045c4:	f000 f81a 	bl	80045fc <_init>
 80045c8:	2600      	movs	r6, #0
 80045ca:	4d0a      	ldr	r5, [pc, #40]	@ (80045f4 <__libc_init_array+0x40>)
 80045cc:	4c0a      	ldr	r4, [pc, #40]	@ (80045f8 <__libc_init_array+0x44>)
 80045ce:	1b64      	subs	r4, r4, r5
 80045d0:	10a4      	asrs	r4, r4, #2
 80045d2:	42a6      	cmp	r6, r4
 80045d4:	d105      	bne.n	80045e2 <__libc_init_array+0x2e>
 80045d6:	bd70      	pop	{r4, r5, r6, pc}
 80045d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045dc:	4798      	blx	r3
 80045de:	3601      	adds	r6, #1
 80045e0:	e7ee      	b.n	80045c0 <__libc_init_array+0xc>
 80045e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80045e6:	4798      	blx	r3
 80045e8:	3601      	adds	r6, #1
 80045ea:	e7f2      	b.n	80045d2 <__libc_init_array+0x1e>
 80045ec:	08004740 	.word	0x08004740
 80045f0:	08004740 	.word	0x08004740
 80045f4:	08004740 	.word	0x08004740
 80045f8:	08004744 	.word	0x08004744

080045fc <_init>:
 80045fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fe:	bf00      	nop
 8004600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004602:	bc08      	pop	{r3}
 8004604:	469e      	mov	lr, r3
 8004606:	4770      	bx	lr

08004608 <_fini>:
 8004608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460a:	bf00      	nop
 800460c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460e:	bc08      	pop	{r3}
 8004610:	469e      	mov	lr, r3
 8004612:	4770      	bx	lr
