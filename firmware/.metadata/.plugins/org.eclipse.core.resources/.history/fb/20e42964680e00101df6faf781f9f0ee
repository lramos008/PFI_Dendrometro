#include "main.h"
#include "rtc_driver.h"

extern I2C_HandleTypeDef hi2c1;
//Limpiar A2F luego de cada interrupción, sino la línea queda en alto y no vuelve a bajo.

//Define address map from the RTC
#define RTC_SLAVE_ADDRESS				(0x68 << 1)
#define RTC_MEMORY_BASE_ADDRESS			0x00
#define RTC_DATETIME_BASE_ADDRESS		(RTC_MEMORY_BASE_ADDRESS + 0x0)
#define RTC_DATETIME_REGISTER_NUM		7


static uint8_t decimalToBCD(uint8_t decimal){
	return ((decimal / 10) << 4) | (decimal % 10);
}

static uint8_t BCDToDecimal(uint8_t bcd){
	return ((bcd >> 4) * 10) + (bcd & 0x0F);
}


/**
 * Configure and start the RTC for its use.
 *
 * @param none
 * @return none
 */
void RTCInit(void){
	//Enable periodic interrupt generation
	//If the corresponding Alarm Interrupt Enable ‘A1IE’ or ‘A2IE’ is also set to logic 1 and
	//the INTCN bit is set to logic 1, the alarm condition will activate the INT/SQW signal.

	//Configurar para tener formato de 24 horas (indicador AM / PM).

	//Set EOSC to para deteenr el oscilador (ahorrar batería hasta que arranque el dispositivo).

}

/**
 * Read date and time from the RTC.
 *
 * @param Pointer to a structure that will store the date and time read.
 * @return none
 */
void RTCGetDateAndTime(sDateAndTime *dateTime){
	uint8_t dataRead[RTC_DATETIME_REGISTER_NUM];

	//Read date and time from DS3231 memory
	HAL_I2C_Mem_Read(&hi2c1, RTC_SLAVE_ADDRESS, RTC_DATETIME_BASE_ADDRESS, I2C_MEMADD_SIZE_8BIT, dataRead, (uint16_t) RTC_DATETIME_REGISTER_NUM, HAL_MAX_DELAY);

	//Pass time data into the structure
	dateTime->time = (sTime) {.seconds = BCDToDecimal(dataRead[0]),
							  .minutes = BCDToDecimal(dataRead[1]),
							  .hours   = BCDToDecimal(dataRead[2])};
	dateTime->time.seconds = BCDToDecimal(dataRead[0]);
	dateTime->time.minutes = BCDToDecimal(dataRead[1]);
	dateTime->time.hours = 	BCDToDecimal(dataRead[2]);

	//Pass date data into the structure
	dateTime->date.day = BCDToDecimal(dataRead[3]);
	dateTime->date.date = BCDToDecimal(dataRead[4]);
	dateTime->date.month = BCDToDecimal(dataRead[5]);
	dateTime->date.year = BCDToDecimal(dataRead[6]);
	return;
}

/**
 * Configure RTC with the desired date and time.
 *
 * @param Pointer to a structure that stores the date and time to be configured.
 * @return none
 */
void RTCSetDateAndTime(const sDateAndTime *dateTime){

}

/**
 * Stop RTC and free its ocuppied resources.
 *
 * @param none
 * @return none
 */
void RTCDeinit(void){

}
