// =============================[ Includes ]===================================
#include "hm10_driver.h"
#include <string.h>
#include <stdio.h>


// ========================[ AT commands ]==============================
#define HM10_CHECK_RESPONSE				"AT"
#define HM10_SET_DEVICE_NAME			"AT+NAME"
#define HM10_SET_BAUDRATE				"AT+BAUD"
#define HM10_CHECK_BAUDRATE				"AT+BAUD?"
#define HM10_CONFIG_ROLE				"AT+ROLE"
#define HM10_SET_ADV_INTERVAL			"AT+ADVI"
#define HM10_SET_ADV_TYPE				"AT+ADTY"
#define HM10_SLEEP						"AT+SLEEP"
#define HM10_RESET						"AT+RESET"
#define HM10_ENABLE_AUTOSLEEP			"AT+PWRM1"
#define HM10_DEFINE_WORK_TYPE			"AT+IMME"
#define HM10_CONFIG_TRANSMISSION_POWER	"AT+POWE"


// ==========================[ Private defines ]===============================
#define CMD_BUFFER_SIZE          32
#define RESPONSE_BUFFER_SIZE     32
#define HM10_DMA_BUFFER_SIZE     64
#define GLOBAL_TIMEOUT           100
#define ENABLE_CONFIG_FUNCTIONS  1


// ======================[ Global variables ]===========================
static UART_HandleTypeDef *hm10Uart = NULL;
static char response[RESPONSE_BUFFER_SIZE] = {0};
uint8_t HM10DMABuffer[HM10_DMA_BUFFER_SIZE] = {0};
volatile bool receptionCompleteFlag = false;							//Use to know when to process a received command



// ======================[ Private functions ]===========================
//
static HM10Status_t HM10TransmitATCommand(const char *command, char *response, uint16_t maxLength, uint32_t timeout){
	char cmdBuffer[CMD_BUFFER_SIZE] = {0};
	int bytesToSend;
	HAL_StatusTypeDef status;

	// Add termination characters to the command
	bytesToSend = snprintf(cmdBuffer, CMD_BUFFER_SIZE, "%s\r\n", command);
	if(bytesToSend < 0) return HM10_ERROR_STRING;

	// Send AT command via UART
	status = HAL_UART_Transmit(hm10Uart, (uint8_t *)cmdBuffer, bytesToSend, timeout);
	if(status == HAL_BUSY) return HM10_ERROR_BUSY;
	else if(status != HAL_OK) return HM10_ERROR_UART;

	//Wait for response
	uint32_t startTime = HAL_GetTick();
	uint16_t index = 0;
	uint8_t receivedCharacter;
	while(HAL_GetTick() - startTime < timeout && index < maxLength - 1){
		status = HAL_UART_Receive(hm10Uart, &receivedCharacter, 1, 10);			// 10 ms of timeout between each character
		if(status == HAL_OK){
			response[index++] = receivedCharacter;
			if(receivedCharacter == '\n') break;								//End of AT command
		}
	}

	// Add end of string character
	response[index] = '\0';

	//Handle condition if there is no character in reception
	if(index == 0) return HM10_ERROR_TIMEOUT;
	return HM10_OK;
}


//Send AT command and check for an OK response from the hm10
static HM10Status_t HM10SendATCheckOK(const char *command){
	HM10Status_t status;
	//Clean response buffer
	memset(response, 0, RESPONSE_BUFFER_SIZE);

	//Send AT command
	status = HM10TransmitATCommand(command, response, RESPONSE_BUFFER_SIZE, GLOBAL_TIMEOUT);

	//Check for errors
	if(status != HM10_OK) return status;														//Possible transmission error
	if(strncmp(response, "OK", 2) != 0) return HM10_ERROR_AT_COMMAND_RESPONSE;					//Possible error response from HM10
	return HM10_OK;
}



// ======================[ Public functions ]===========================






