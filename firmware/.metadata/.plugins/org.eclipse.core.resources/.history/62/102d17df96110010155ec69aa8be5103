/*This RTC module uses the 24 hs per day format*/
// ===========================[ INCLUDES ]===============================
#include "rtc_driver.h"

// ===========================[ INCLUDES ]===============================
#define RTC_SLAVE_ADDRESS	   			(0x68 << 1)
#define RTC_MEMORY_BASE_ADDRESS			0x00
#define RTC_DATETIME_BASE_ADDRESS		RTC_MEMORY_BASE_ADDRESS
#define RTC_ALARM1_BASE_ADDRESS			(RTC_MEMORY_BASE_ADDRESS + 0x07)
#define RTC_ALARM2_BASE_ADDRESS			(RTC_MEMORY_BASE_ADDRESS + 0x0B)
#define RTC_CONTROL_REGISTER_ADDRESS	(RTC_MEMORY_BASE_ADDRESS + 0x0E)
#define RTC_STATUS_REGISTER_ADDRESS		(RTC_MEMORY_BASE_ADDRESS + 0x0F)

#define RTC_ENABLE_ALARM2_INTERRUPT		(1 << 1)
#define RTC_ENABLE_INT_OUTPUT			(1 << 2)
#define RTC_DISABLE_OSCILLATOR			(1 << 7)
#define RTC_CLEAR_ALARM2_INTERRUPT		~(1 << 1)
#define	RTC_SET_ALARM2_MASK_BIT			(1 << 7)
#define RTC_CLEAR_ALARM2_MASK_BIT		~(1 << 7)

#define RTC_DATETIME_REGISTERS 			7
#define RTC_ALARM2_REGISTERS			3
#define RTC_MAX_RETRIES				    10

// =======================[ PRIVATE FUNCTIONS ]==========================
/**
 * Convert a decimal number into its BCD representation
 *
 * @param Desired decimal number between 0 and 99.
 * @return BCD representation (4 bits per digit, 4 MSBs are tens, the other 4 bits are units).
 */
static uint8_t decimalToBCD(uint8_t decimal){
	return ((decimal / 10) << 4) | (decimal % 10);
}

/**
 * Convert a BCD representation into its corresponding decimal number.
 *
 * @param BCD representation (4 bits per digit, 4 MSBs are tens, the other 4 bits are units).
 * @return Resulting decimal number between 0 and 99.
 */
static uint8_t BCDToDecimal(uint8_t bcd){
	return ((bcd >> 4) * 10) + (bcd & 0x0F);
}


static tRtcStatus rtcWriteRegisters(uint16_t slaveAddress, uint16_t registerAddress, uint8_t *dataToWrite, uint16_t dataSize){
	HAL_StatusTypeDef status;
	uint8_t retries = 0;

	//Try to write on RTC registers
	do{
		status = HAL_I2C_Mem_Write(&hi2c1, slaveAddress, registerAddress, I2C_MEMADD_SIZE_8BIT, dataToWrite, dataSize, HAL_MAX_DELAY);
		retries++;
	}while(status != HAL_OK && retries < RTC_MAX_RETRIES);

	//Return writing status
	return (status == HAL_OK) ? RTC_OK : RTC_ERROR_WRITE;
}

static tRtcStatus rtcReadRegisters(uint16_t slaveAddress, uint16_t registerAddress, uint8_t *dataToRead, uint16_t dataSize){
	HAL_StatusTypeDef status;
	uint8_t retries = 0;
	do{
		status = HAL_I2C_Mem_Read(&hi2c1, slaveAddress, registerAddress, I2C_MEMADD_SIZE_8BIT, dataToRead, dataSize, HAL_MAX_DELAY);
		retries++;
	}while(status != HAL_OK && retries < RTC_MAX_RETRIES);

	return (status == HAL_OK) ? RTC_OK : RTC_ERROR_READ;
}

void rtcInit(void){

}

tRtcStatus rtcReadDateTime(sRtcDateTime *dateTime){
	tRtcStatus status;
	uint8_t rtcRegisters[RTC_DATETIME_REGISTERS];

	//Read date and time from DS3231 memory
	status = rtcReadRegisters(RTC_SLAVE_ADDRESS, RTC_DATETIME_BASE_ADDRESS, rtcRegisters, RTC_DATETIME_REGISTERS);


	if(status == RTC_OK){
		//Decode and pass time data into the structure
		dateTime->seconds = BCDToDecimal(rtcRegisters[0]);
		dateTime->minutes = BCDToDecimal(rtcRegisters[1]);
		dateTime->hours   = BCDToDecimal(rtcRegisters[2] & 0x3F);

		//Decode and pass date data into the structure
		dateTime->dayOfWeek = BCDToDecimal(rtcRegisters[3]);
		dateTime->date      = BCDToDecimal(rtcRegisters[4]);
		dateTime->month     = BCDToDecimal(rtcRegisters[5] & 0x1F);
		dateTime->year      = BCDToDecimal(rtcRegisters[6]);
	}

	//Return status of the operation
	return status;
}

tRtcStatus rtcWriteDateTime(const sRtcDateTime *dateTime){
	tRtcStatus status;
	uint8_t rtcRegisters[RTC_DATETIME_REGISTERS];

	//Encode time data in BCD format
	rtcRegisters[0] = decimalToBCD(dateTime->seconds);
	rtcRegisters[1] = decimalToBCD(dateTime->minutes);
	rtcRegisters[2] = decimalToBCD(dateTime->hours) & 0x3F;			//Ensure that 12/~24 bit is low to select 24 hours format

	//Encode date data
	rtcRegisters[3] = decimalToBCD(dateTime->dayOfWeek);
	rtcRegisters[4] = decimalToBCD(dateTime->date);
	rtcRegisters[5] = decimalToBCD(dateTime->month);
	rtcRegisters[6] = decimalToBCD(dateTime->year);

	//Write date and time on DS3231's memory
	status = rtcWriteRegisters(RTC_SLAVE_ADDRESS, RTC_DATETIME_BASE_ADDRESS, rtcRegisters, RTC_DATETIME_REGISTERS);

	//Return status of the operation
	return status;
}

tRtcStatus rtcSetAlarm2(tRtcAlarm2Mode mode, uint8_t minutes, uint8_t hours, uint8_t dyDt){
	uint8_t alarm2Registers[3] = {RTC_SET_ALARM2_MASK_BIT, RTC_SET_ALARM2_MASK_BIT, RTC_SET_ALARM2_MASK_BIT};
	uint8_t auxBuffer;
//	//Encode the date and time in BCD format
//	alarm2Registers[0] = decimalToBCD(minutes);
//	alarm2Registers[1] = decimalToBCD(hours) & 0x3F;
//	alarm2Registers[2] = (mode == RTC_ALARM2_MINUTES_HOURS_DAY_MATCH) ?

	//Decide which registers should be masked
	switch(mode){
	case RTC_ALARM2_ONCE_PER_MINUTE:
		//set by default
		break;
	case RTC_ALARM2_MINUTES_MATCH:
		alarm2Registers[0] &= RTC_CLEAR_ALARM2_MASK_BIT;
		break;
	case RTC_ALARM2_MINUTES_HOURS_MATCH:
		alarm2Registers[0] &= RTC_CLEAR_ALARM2_MASK_BIT;
		alarm2Registers[1] &= RTC_CLEAR_ALARM2_MASK_BIT;
		break;
	case RTC_ALARM2_MINUTES_HOURS_DAY_MATCH:
	case RTC_ALARM2_MINUTES_HOURS_DATE_MATCH:
		alarm2Registers[0] &= RTC_CLEAR_ALARM2_MASK_BIT;
		alarm2Registers[1] &= RTC_CLEAR_ALARM2_MASK_BIT;
		alarm2Registers[2] &= RTC_CLEAR_ALARM2_MASK_BIT;
		break;
	default:
		break;
	}

	//Select 24 hours format


}


tRtcStatus rtcSetAlarm2Interrupt(bool enable){
	tRtcStatus status;
	uint8_t controlRegister;

	//Read the control register
	status = rtcReadRegisters(RTC_SLAVE_ADDRESS, RTC_CONTROL_REGISTER_ADDRESS, &controlRegister, 1);
	if(status == RTC_OK){
		//Check if interrupt should be enabled or disabled
		if(enable){
			controlRegister |= RTC_ENABLE_ALARM2_INTERRUPT | RTC_ENABLE_INT_OUTPUT;
		}
		else{
			controlRegister &= ~(RTC_ENABLE_ALARM2_INTERRUPT | RTC_ENABLE_INT_OUTPUT);
		}

		//Write the control register
		status = rtcWriteRegisters(RTC_SLAVE_ADDRESS, RTC_CONTROL_REGISTER_ADDRESS, &controlRegister, 1);
	}

	//Return status of the operation
	return status;
}




tRtcStatus rtcClearAlarm2Flag(void){
	tRtcStatus status;
	uint8_t statusRegister;

	//Read the status register
	status = rtcReadRegisters(RTC_SLAVE_ADDRESS, RTC_STATUS_REGISTER_ADDRESS, &statusRegister, 1);
	if(status == RTC_OK){
		//Clear the A2F bit
		statusRegister &= RTC_CLEAR_ALARM2_INTERRUPT;

		//Write the status register bit 1 to clear the A2F
		status = rtcWriteRegisters(RTC_SLAVE_ADDRESS, RTC_STATUS_REGISTER_ADDRESS, &statusRegister, 1);
	}
	return status;
}




