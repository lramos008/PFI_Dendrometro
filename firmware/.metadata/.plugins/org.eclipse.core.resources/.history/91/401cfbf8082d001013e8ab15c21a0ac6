#ifndef RTC_DRIVER_H
#define RTC_DRIVER_H

// ===================== [ INCLUDES ]==========================
#include "main.h"
#include <stdbool.h>
// =======================[ ENUMS ]==========================
/**
 * @brief States of the RTC operations.
 */
typedef enum{
	RTC_OK = 0,								/**<Successful operation.*/
	RTC_ERROR_WRITE,						/**<Error during writing operation on the RTC*/
	RTC_ERROR_READ							/**<Error during reading operation on the RTC*/
}tRtcStatus;



/**
 * @brief Alarm 2 trigger modes for the RTC.
 */
typedef enum{
	RTC_ALARM2_ONCE_PER_MINUTE = 0,			/**< Triggers once per minute (when seconds match 00). */
	RTC_ALARM2_MINUTES_MATCH,				/**< Triggers when minutes match. */
	RTC_ALARM2_MINUTES_HOURS_MATCH,			/**< Triggers when minutes and hours match. */
	RTC_ALARM2_MINUTES_HOURS_DATE_MATCH,	/**< Triggers when minutes, hours, and date match. */
	RTC_ALARM2_MINUTES_HOURS_DAY_MATCH		/**< Triggers when minutes, hours, and day of week match. */
}tRtcAlarm2Mode;

// =====================[ STRUCTURES ]=======================
typedef struct{
	uint8_t seconds;
	uint8_t minutes;
	uint8_t hours;
	uint8_t dayOfWeek;
	uint8_t date;
	uint8_t month;
	uint8_t year;
}sRtcDateTime;

// =================[ FUNCTION PROTOTYPES ]==================
tRtcStatus rtcReadDateTime(sRtcDateTime *dateTime);
tRtcStatus rtcWriteDateTime(const sRtcDateTime *dateTime);
tRtcStatus rtcSetAlarm2(tRtcAlarm2Mode mode, uint8_t minutes, uint8_t hours, uint8_t dyDt);
tRtcStatus rtcSetAlarm2Interrupt(bool enable);
tRtcStatus rtcClearAlarm2Flag(void);
#endif	// RTC_DRIVER_H
