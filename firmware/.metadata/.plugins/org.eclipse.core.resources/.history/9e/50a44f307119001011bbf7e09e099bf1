// ==========================[ Includes ]===============================
#include "fs_interface.h"
#include <stddef.h>
#include "ff.h"

// =======================[ Private defines ]===========================
#define FS_MAX_RETRIES 20

// ======================[ Private variables ]==========================
static FATFS fs;
static FIL file;
static FILINFO fno;
// ==========================[ Structs ]================================
typedef struct{
	FATFS *fs;
	const char *path;
	BYTE opt;
}MountContext;

typedef struct{
	FIL *file;
	const char *path;
	BYTE mode;
}OpenContext;

typedef struct{
	FIL *file;
}CloseContext;

typedef struct{
	FIL *file;
	void *buffer;
	UINT bytesToRead;
	UINT *bytesRead;
}ReadContext;

typedef struct{
	FIL *file;
	const void *buffer;
	UINT bytesToWrite;
	UINT *bytesWritten;
}WriteContext;

// ==========================[ Typedefs ]===============================
typedef FRESULT (*FatFsOp)(void *context);												//Define Fatfs callback type

// ======================[ Private functions ]==========================
//Mount wrapper
static FRESULT mountWrapper(void *context){
	MountContext *realContext = (MountContext *) context;
	return f_mount(realContext->fs, realContext->path, realContext->opt);
}

//Open Wrapper
static FRESULT openWrapper(void *context){
	OpenContext *realContext = (OpenContext *) context;
	return f_open(realContext->file, realContext->path, realContext->mode);
}

//Close wrapper
static FRESULT closeWrapper(void *context){
	CloseContext *realContext = (CloseContext *) context;
	return f_close(realContext->file);
}

//Read wrapper
static FRESULT readWrapper(void *context){
	ReadContext *realContext = (ReadContext *) context;
	return f_read(realContext->file, realContext->buffer, realContext->bytesToRead, realContext->bytesRead);
}

//Write wrapper
static FRESULT writeWrapper(void *context){
	WriteContext *realContext = (WriteContext *) context;
	return f_write(realContext->file, realContext->buffer, realContext->bytesToWrite, realContext->bytesWritten);
}

static tFSResult retryFatFsOperation(FatFsOp op, void *context, tFSResult errorCode){
	uint8_t attemps = 0;
	FRESULT res;

	//Try to do the operation
	do{
		res = op(context);
		attemps++;
	}while(res != FR_OK && attemps < FS_MAX_RETRIES);

	return (res == FR_OK) ? FS_OK : errorCode;
}

static BYTE modeMapping(tFSOpenMode mode){
	switch(mode){
	case FILE_MODE_READ: 				return FA_READ;
	case FILE_MODE_WRITE:				return FA_WRITE;
	case FILE_MODE_APPEND:				return FA_WRITE | FA_OPEN_APPEND;
	case FILE_MODE_CREATE_NEW: 			return FA_WRITE | FA_CREATE_NEW;
	case FILE_MODE_CREATE_ALWAYS:		return FA_WRITE | FA_CREATE_ALWAYS;
	default:							return 0;
	}
}


// ======================[ Public functions ]==========================
tFSResult fsMountSdCard(void){
	//Define context
	MountContext context = {.fs = &fs,
							.path = "",
							.opt = 1    };
	//Do mounting operation
	return retryFatFsOperation(mountWrapper, &context, FS_ERR_MOUNT);
}

tFSResult fsUnmountSdCard(void){
	//Define context
	MountContext context = {.fs = NULL,
							.path = "",
							.opt = 0    };
	//Do the unmounting operation
	return retryFatFsOperation(mountWrapper, &context, FS_ERR_UNMOUNT);
}

tFSResult fsOpen(const char *path, tFSOpenMode mode){
	BYTE conversion = modeMapping(mode);
	OpenContext context = {.file = &file,
						   .path = path,
						   .mode = conversion };
	return retryFatFsOperation(openWrapper, &context, FS_ERR_OPEN);
}

tFSResult fsClose(void){
	CloseContext context = {.file = &file};
	return retryFatFsOperation(closeWrapper, &context, FS_ERR_CLOSE);
}

tFSResult fsRead(void *buffer, uint32_t bufferSize, uint32_t *bytesRead){
	ReadContext context = {.file = &file,
						   .buffer = buffer,
						   .bytesToRead = bufferSize,
	                       .bytesRead = (UINT *) bytesRead     };

	//Do the write operation
	return retryFatFsOperation(readWrapper, &context, FS_ERR_READ);
}

tFSResult fsWrite(const void *buffer, uint32_t bufferSize, uint32_t *bytesWritten){
	WriteContext context = {.file = &file,
	 	 	 	 	 	 	.buffer = buffer,
							.bytesToWrite = bufferSize,
							.bytesWritten = (UINT *)bytesWritten };

	//Do the write operation
	return retryFatFsOperation(writeWrapper, &context, FS_ERR_WRITE);
}

tFSResult fsCheckIfFileExists(const char *filename){
	FRESULT res;
	res = f_stat(filename, &fno);
	return (res == FR_OK) ? FS_OK : FS_ERR_NOT_FOUND;
}






